file_name,comments,num_comm
1-nearest-nbor-naive-classifier-for-home-credit.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Run classifier.  Since outputs are 0 and 1, just test counts', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",22
15-lines-plb-0-712-ext-source-x-lgbm.py,"['# coding: utf-8', '# # A quick and simple GB model optimisation on EXT\\_SOURCE\\_\\* variables', '# This kernel has started from the simple and clear [15 lines: Just EXT_SOURCE_x](https://www.kaggle.com/lemonkoala/15-lines-just-ext-source-x) by [Lem Lordje Ko](https://www.kaggle.com/lemonkoala). Goal goal is to see what performance can one reach in short piece of code. What has been added on top on the original kernel is optimisation of LightGBM hyper-parameters. The final reported precision is 0.723 locally and 0.712 on the public leaderboard', '# In[ ]:', '# Define parameter range in which optimisation will be performed.', '# In[ ]:', '# Define the hyper-parameter optimiser, it will test `n_HP_points_to_test` points sampled randomly. Beware: 3x20 (`CV_folds x n_HP_points_to_test`)  will run for approx 3 min on 4 CPU cores on kaggle', '# In[ ]:', '# Do actual parameter tune', '# In[ ]:', ""# Let's print the 5 best parameter sets based on the average roc auc on the testing fold in CV"", '# In[ ]:', '# Prepare a submission (note that you can directly submit it from the `Output` tab of the kernel, when you fork it)', '# In[ ]:', '# In[ ]:']",15
2019-06-05.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# In[47]:', '# In[48]:', '# In[49]:', '# In[50]:', '# In[51]:']",60
792_lb_lgbm_with_smile_feats.py,"['# HOME CREDIT DEFAULT RISK COMPETITION', '# Most features are created by applying min, max, mean, sum and var functions to grouped tables. ', '# Little feature selection is done and overfitting might be a problem since many features are related.', '# The following key ideas were used:', '# - Divide or subtract important features to get rates (like annuity and income)', '# - In Bureau Data: create specific features for Active credits and Closed credits', '# - In Previous Applications: create specific features for Approved and Refused applications', '# - Modularity: one function for each table (except bureau_balance and application_test)', '# - One-hot encoding for categorical features', '# All tables are joined with the application DF using the SK_ID_CURR key (except bureau_balance).', '# You can use LightGBM with KFold or Stratified KFold. Please upvote if you find usefull, thanks!', '# Update 16/06/2018:', '# - Added Payment Rate feature', '# - Removed index from features', '# - Set early stopping to 200 rounds', '# - Use standard KFold CV (not stratified)', '# Public LB increased to 0.792', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Some simple new features (percentages)', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",57
793_new_app_feats.py,"['# HOME CREDIT DEFAULT RISK COMPETITION', '# Most features are created by applying min, max, mean, sum and var functions to grouped tables. ', '# Little feature selection is done and overfitting might be a problem since many features are related.', '# The following key ideas were used:', '# - Divide or subtract important features to get rates (like annuity and income)', '# - In Bureau Data: create specific features for Active credits and Closed credits', '# - In Previous Applications: create specific features for Approved and Refused applications', '# - Modularity: one function for each table (except bureau_balance and application_test)', '# - One-hot encoding for categorical features', '# All tables are joined with the application DF using the SK_ID_CURR key (except bureau_balance).', '# You can use LightGBM with KFold or Stratified KFold. Please upvote if you find usefull, thanks!', '# Update 16/06/2018:', '# - Added Payment Rate feature', '# - Removed index from features', '# - Set early stopping to 200 rounds', '# - Use standard KFold CV (not stratified)', '# Public LB increased to 0.792', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Some simple new features (percentages)', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",57
a2-home-credit-default-risk.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:']",3
addnewfeature_lightgbm_with_simple_features.py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just removed a few min, max features. U can see the CV is not good. Dont believe in LB.', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # add features', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",43
alim-copy-eda-basic-fe-and-lgb.py,"['# coding: utf-8', '# # Home Credit Default Risk', '# ', '# This kernel will contain EDA, visualization, feature engineering and some modelling. Work currently in progress.', '# In[ ]:', ""# There are several files with data, let's go through them step by step."", '# In[ ]:', '# ## Data Exploration', '# ### application_train and application_test', '# These are main files with data and technically we can use only them to make predictions. Obviously using additional data is necessary to improve score.', '# In[ ]:', ""# We have 122 columns in just main file! Let's take a look on some of them."", '# #### Categorical features', '# ##### Target', '# In[ ]:', ""# We have disbalanced target, though disbalance isn't really serious."", '# ##### NAME_CONTRACT_TYPE', '# In[ ]:', '# We can see that there are two types of contract - cash loans and revolving loans. Most of the loans are cash loans which are defaulted.', '# ##### CODE_GENDER', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# We can see that women take more loans and higher percentage of them repays the loans. And there are 4 people with unindentified gender, who repayed their loans :)', '# ##### FLAG_OWN_CAR and FLAG_OWN_REALTY', '# In[ ]:', '# ##### CNT_CHILDREN and NAME_FAMILY_STATUS', '# In[ ]:', '# We can see that most of the people are married and have zero children. In face we can divide people into two group based on their family status - living together with their partner or single.', '# In[ ]:', ""# It isn't surprising that there are a lot of families consisting of two or one adults. Also there are families with two adults and 1-2 children."", '# ##### NAME_TYPE_SUITE', '# This feature shows who was accompanying client when he was applying for the loan.', '# In[ ]:', '# In[ ]:', '# It is interesting to see that these two variables sometimes contradict each other. For example, separated, single or widowed applicants were sometimes accompanied by their partner. I suppose this means unofficial relationships? Also sometimes children accompanied the applicant. Maybe these were adult childred?', '# ##### NAME_INCOME_TYPE', '# In[ ]:', '# In[ ]:', '# We can see that there are 4 categories with little amount of people in them: several high-income businessmen, 4 women and 1 man on maternity leave, and some unemployed/students. It is quite interesting that unemployed/students have quite a high income.', '# And of course, most of the people work.', '# In[ ]:', '# ##### AMT_GOODS_PRICE', '# For consumer loans it is the price of the goods for which the loan is given', '# In[ ]:', ""# So this means that only 278 loans have some other type. Let's go deeper."", '# In[ ]:', '# We can see that most of the loans have the amount which is similar to the goods price, but there are some outliers.', '# ##### NAME_HOUSING_TYPE', '# In[ ]:', '# ##### Contact information', ""# There are 6 features showing that client provided some contact information, let's see how many ways of contact clients usually provide."", '# In[ ]:', ""# Most clients provide 3 ways to contact them and usually minimus is 2, if we don't consider several people who left only 1."", '# # deliquencies', '# ', ""# It is very important to see how many times clients was late with payments or defaulted his loans. I suppose info about his social circle is also important. I'll divide values into 2 groups: 0, 1 and more than 1."", '# In[ ]:', '# In[ ]:', '# #### Continuous variables', '# ##### AMT_INCOME_TOTAL', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# We can see following things from the information above:', '# - income feature has some huge outliers. This could be due to rich individuals or due to errors in data;', ""# - average income is almost similar for those who repay the loans and those who don't;"", '# - if we leave only data within 90 percentile, it is almost normally distributed;', '# - log transformation also helps;', '# ##### AMT_CREDIT', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# This feature shows the amount of the loan in question.', '# We can see following things from the information above:', '# - income feature has some outliers. Maybe mortgage?;', ""# - average credit amoint is almost similar for those who repay the loans and those who don't;"", '# - if we leave only data within 95 percentile, it is almost normally distributed;', '# - log transformation also helps;', '# ##### DAYS_BIRTH', '# In[ ]:', '# We can see that age distribution is almost normal and most of the people are between 30 and 40 years.', '# ##### DAYS_EMPLOYED', '# In[ ]:', '# Ther was a strange value - 365243, it could mean empty values or some errors, so I replace it with zero.', ""# A lot of people don't work, but let's look deeper into this."", '# In[ ]:', '# Well, it seems that a lot of non-working people are pensioners, which is normal. As for working people - they seem to work for several years at one place.', ""# Ther are so many features and so many possible angles from which we can analyze them. Let's see this for example:"", '# In[ ]:', '# We can see that most of the loans are taken by working people with secondary education.', '# ## Transforming and merging data', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Basic modelling, LGB', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# This was EDA and basic feature engineering. I know that feature engineering and modelling could be much better, but decided to make EDA the main focus of this kernel. I'll do better feature engineering and modelling in the next one."", '# In[ ]:']",115
app-train-feat.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# In[3]:', '# In[4]:', '# Check missing value', '# Process features ', '    # Combine these (average)', '    # Transform to years', '    # round counting features', '    # extract columns that have more than 2 unique values and the maximum large than 1 and normalized', '# # Split training set and test set', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[24]:', '# In[ ]:', '# CV for logistic regression', '# In[ ]:', '# CV for XGB', '# In[10]:', '    # Hyperparam', '    LR = 0.0001 # learning rate', '    # build graph', '    nn_inputs = tf.layers.dense(x, units = round(2*NUM_FEAT), kernel_initializer = tf.truncated_normal_initializer(),activation = tf.nn.sigmoid) # hidden layer 2', '    nn_inputs = tf.layers.dense(x, units = round(1*NUM_FEAT), kernel_initializer = tf.truncated_normal_initializer(),activation = tf.nn.sigmoid) # hidden layer 3', '    nn_inputs = tf.layers.dense(x, units = 0.5*NUM_FEAT, kernel_initializer = tf.truncated_normal_initializer(),activation = tf.nn.sigmoid) # hidden layer 4', '    # session', '# In[11]:', '# In[12]:', '# In[ ]:']",41
automated-model-tuning.py,"['# coding: utf-8', '# # Introduction: Automated Hyperparameter Tuning', '# ', '# In this notebook, we will talk through a complete example of using automated hyperparameter tuning to optimize a machine learning model. In particular, we will use Bayesian Optimization and the Hyperopt library to tune the hyperparameters of a gradient boosting machine. ', '# ', '# __Additional Notebooks__ ', '# ', ""# If you haven't checked out my other work on this problem, here is a complete list of the notebooks I have completed so far:"", '# ', '# * [A Gentle Introduction](https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction)', '# * [Manual Feature Engineering Part One](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering)', '# * [Manual Feature Engineering Part Two](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering-p2)', '# * [Introduction to Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/automated-feature-engineering-basics)', '# * [Advanced Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/tuning-automated-feature-engineering-exploratory)', '# * [Feature Selection](https://www.kaggle.com/willkoehrsen/introduction-to-feature-selection)', '# * [Intro to Model Tuning: Grid and Random Search](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search)', '# * [Automated Model Tuning](https://www.kaggle.com/willkoehrsen/automated-model-tuning)', '# ', '# There are four approaches to tuning the hyperparameters of a machine learning model', '# ', '# 1. __Manual__: select hyperparameters based on intuition/experience/guessing, train the model with the hyperparameters, and score on the validation data. Repeat process until you run out of patience or are satisfied with the results.', '# 2. __Grid Search__: set up a grid of hyperparameter values and for each combination, train a model and score on the validation data. In this approach, every single combination of hyperparameters values is tried which can be very inefficient!', '# 3. __Random search__: set up a grid of hyperparameter values and select random combinations to train the model and score. The number of search iterations is set based on time/resources.', '# 4. __Automated Hyperparameter Tuning__: use methods such as gradient descent, Bayesian Optimization, or evolutionary algorithms to conduct a guided search for the best hyperparameters.', '# ', ""# These are listed in general order of least to most efficient. While we already conquered 2 and 3 [in this notebook](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search) (we didn't even try method 1), we have yet to take on automated hyperparameter tuning. There are a number of methods to do this including genetic programming, Bayesian optimization, and gradient based methods. Here we will focus only on Bayesian optimization, using the Tree Parzen Esimator (don't worry, you don't need to understand this in detail) in the [Hyperopt open-source Python library](https://hyperopt.github.io/hyperopt/)."", '# ', ""# For a little more background (we'll cover everything you need below), [here is an introductory article](https://towardsdatascience.com/an-introductory-example-of-bayesian-optimization-in-python-with-hyperopt-aae40fff4ff0) on Bayesian optimization, and [here is an article on automated hyperparameter tuning](https://towardsdatascience.com/automated-machine-learning-hyperparameter-tuning-in-python-dfda59b72f8a) using Bayesian optimization. Here we'll get right into automated hyperparameter tuning, so for the necessary background on model tuning, refer to [this kernel](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search)"", '# ', '# ## Bayesian Optimization Primer', '# ', '# The problem with grid and random search is that these are __uninformed methods__ because they do not use the past results from different values of hyperparameters in the objective function (remember the objective function takes in the hyperparameters and returns the model cross validation score). We record the results of the objective function for each set of hyperparameters, but the algorithms do not select the next hyperparameter values from this information. Intuitively, if we have the past results, we should  use them to reason about what hyperparameter values work the best and choose the next values wisely to try and spend more iterations evaluating promising values. Evaluating hyperparameters in the objective function is very time-consuming, and the __concept of Bayesian optimization is to limit calls to the evaluation function by choosing the next hyperparameter values based on the previous results.__ This allows the algorithm to spend __more time evaluating promising hyperparameter values and less time in low-scoring regions of the hyperparameter space__. For example, consider the image below:', '# ', '# ![](https://raw.githubusercontent.com/WillKoehrsen/hyperparameter-optimization/master/images/random_forest_hypothetical.png)', '# ', '# If you were choosing the next number of trees to try for the random forest, where would you concentrate your search? Probably around 100 trees because that is where the lowest errors have tended to occur (imagine this is a problem where we want to minimize the error). In effect, you have just done Bayesian hyperparameter optimization in your head! You formed a probability model of the error as a function of the hyperparameters and then selected the next hyperparameter values by maximizing the probability of a low error. Bayesian optimization works by building a surrogate function (in the form of a probability model) of the objective function $P(\\text{score} | \\text{hyperparameters}$. The surrogate function is much cheaper to evaluate than the objective, so the algorithm chooses the next values to try in the objective based on maximizing a criterion on the surrogate (usually expected improvement), exactly what you would have done with respect to the image above. ', '# ', ""# The surrogate function is based on past evaluation results - pairs of (score, hyperparameter) records - and is continually updated with each objective function evaluation. Bayesian optimization therefore uses Bayesian reasoning: form an initial model (called a prior) and then update it with more evidence. The idea is that as the data accumulates, the surrogate function gets closer and closer to the objective function, and the hyperparameter values that are the best in the surrogate function will also do the best in the objective function. Bayesian optimization methods differ in the algorithm used to build the surrogate function and choose the next hyperparameter values to try. Some of the common choices are Gaussian Process (implemented in Spearmint), Random Forest Regression (in SMAC), and the Tree Parzen Estimator (TPE) in Hyperopt (technical details can be found in this article, although they won't be necessary to use the methods)."", '# ', '# ### Four Part of Bayesian Optimization', '# ', '# Bayesian hyperparameter optimization requires the same four parts as we implemented in grid and random search:', '# ', '# 1. __Objective Function__: takes in an input (hyperparameters) and returns a score to minimize or maximize (the cross validation score)', '# 2. __Domain space__: the range of input values (hyperparameters) to evaluate', '# 3. __Optimization Algorithm__: the method used to construct the surrogate function and choose the next values to evaluate', '# 4. __Results__: score, value pairs that the algorithm uses to build the surrogate function', '# ', '# The only differences are that now our objective function will return a score to minimize (this is just convention in the field of optimization), our domain space will be probability distributions rather than a hyperparameter grid, and the optimization algorithm will be an __informed method__ that uses past results to choose the next hyperparameter values to evaluate. ', '# ', '# ## Hyperopt', '# ', '# Hyperopt is an open-source Python library the implements Bayesian Optimization using the Tree Parzen Estimator algorithm to construct the surrogate function and select the next hyperparameter values to evaluate in the objective function. There are a number of other libraries such as Spearmint (Guassian process surrogate function) and SMAC (random forest regression surrogate function) sharing the same problem structure. The four parts of an optimization problem that we develop here will apply to all the libraries with only a change in syntax. Morevoer, the optimization methods as applied to the Gradient Boosting Machine will translate to other machine learning models or any problem where we have to minimize a function.', '# ', '# ### Gradient Boosting Machine', '# ', '# We will use the gradient booosting machine (GBM) as our model to tune in the LightGBM library. The GBM is our choice of model because it performs extremely well for these types of problems (as shown on the leaderboard) and because the performance is heavily dependent on the choice of hyperparameter values. ', '# ', '# For more details of the Gradient Boosting Machine (GBM), check out this high-level blog post, or this in depth technical article.', '# ', '# ### Cross Validation with Early Stopping', '# ', '# As with random and grid search, we will evaluate each set of hyperparameters using 5 fold cross validation on the training data. The GBM model will be trained with early stopping, where estimators are added to the ensemble until the validation score has not decrease for 100 iterations (estimators added). ', '# ', '# Cross validation and early stopping will be implemented using the LightGBM `cv` function. We will use 5 folds and 100 early stopping rounds. ', '# ', '# #### Dataset and Approach', '# ', ""# As before, we will work with a limited section of the data - 10000 observations for training and 6000 observations for testing. This will allow the optimization within the notebook to finish in a reasonable amount of time. Later in the notebook, I'll present results from 1000 iterations of Bayesian hyperparameter optimization on the reduced dataset and we then will see if these results translate to a full dataset (from [this kernel](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features)). The functions developed here can be taken and run on any dataset, or used with any machine learning model (just with minor changes in the details) and working with a smaller dataset will allow us to learn all of the concepts. I am currently running 500 iterations of Bayesian hyperparameter optimization on a complete dataset and will make the results available when the search is completed. "", ""# With the background details out of the way, let's get started with Bayesian optimization applied to automated hyperparameter tuning! "", '# In[ ]:', '# Data manipulation', '# Modeling', '# Evaluation of the model', '# Visualization', '# Governing choices for search', '# The code below reads in the data and creates a smaller version for training and a set for testing. We can only use the training data __a single time__ when we evaluate the final model. Hyperparameter tuning must be done on the training data using cross validation!', '# In[ ]:', '# Sample 16000 rows (10000 for training, 6000 for testing)', '# Only numeric features', '# Extract the labels', '# Split into training and testing data', '# ### Baseline Model ', '# ', '# First we can create a model with the default value of hyperparameters and score it using cross validation with early stopping. Using the `cv` LightGBM function requires creating a `Dataset`.', '# In[ ]:', '# Training set', '# In[ ]:', '# Default hyperparamters', '# Using early stopping to determine number of estimators.', '# Perform cross validation with early stopping', '# Highest score', '# Standard deviation of best score', '# Now we can evaluate the baseline model on the testing data.', '# In[ ]:', '# Optimal number of esimators found in cv', '# Train and make predicions with model', '# # Objective Function', '# ', '# The first part to write is the objective function which takes in a set of hyperparameter values and returns the cross validation score on the training data. An objective function in Hyperopt must return either a single real value to minimize, or a dictionary with a key ""loss"" with the score to minimize (and a key ""status"" indicating if the run was successful or not). ', '# ', '# Optimization is typically about minimizing a value, and because our metric is Receiver Operating Characteristic Area Under the Curve (ROC AUC) where higher is better, the objective function will return $1 - \\text{ROC AUC Cross Validation}$. The algorithm will try to drive this value as low as possible (raising the ROC AUC) by choosing the next hyperparameters based on the past results. ', '# ', '# The complete objective function is shown below. As with random and grid search, we write to a `csv` file on each call of the function in order to track results as the search progress and so we have a saved record of the search. (The `subsample` and `boosting_type` logic will be explained when we get to the domain). ', '# In[ ]:', '    # Keep track of evals', '    # Using early stopping to find number of trees trained', '    # Retrieve the subsample', '    # Extract the boosting type and subsample to top level keys', '    # Make sure parameters that need to be integers are integers', '    # Perform n_folds cross validation', '    # Extract the best score', '    # Loss must be minimized', '    # Boosting rounds that returned the highest cv score', '    # Add the number of estimators to the hyperparameters', ""    # Write to the csv file ('a' means append)"", '    # Dictionary with information for evaluation', '# # Domain ', '# ', '# Specifying the domain (called the space in Hyperopt) is a little trickier than in grid search. In Hyperopt, and other Bayesian optimization frameworks, the domian is not a discrete grid but instead has probability distributions for each hyperparameter. For each hyperparameter, we will use the same limits as with the grid, but instead of being defined at each point, the domain represents probabilities for each hyperparameter. This will probably become clearer in the code and the images!', '# In[ ]:', '# First we will go through an example of the learning rate. We are using a log-uniform space for the learning rate defined from 0.005 to 0.5. The log - uniform distribution has the values evenly placed in logarithmic space rather than linear space. This is useful for variables that differ over several orders of magnitude such as the learning rate. For example, with a log-uniform distribution, there will be an equal chance of drawing a value from 0.005 to 0.05 and from 0.05 to 0.5 (in linear space far more values would be drawn from the later since the linear distance is much larger. The logarithmic space is exactly the same - a factor of 10).', '# In[ ]:', '# Create the learning rate', '# We can visualize the learning rate by drawing 10000 samples from the distribution.', '# In[ ]:', '# Draw 10000 samples from the learning rate domain', '# The number of leaves on the other hand is a discrete uniform distribution.', '# In[ ]:', '# Discrete uniform distribution', '# Sample 10000 times from the number of leaves distribution', '# kdeplot', '# ### Conditional Domain', '# ', '# In Hyperopt, we can use nested conditional statements to indicate hyperparameters that depend on other hyperparameters. For example, the ""goss"" `boosting_type` cannot use subsampling, so when we set up the `boosting_type` categorical variable, we have to set the subsample to 1.0 while for the other boosting types it\'s a float between 0.5 and 1.0.', '# In[ ]:', '# boosting type domain ', '# Draw a sample', '# We need to set both the boosting_type and subsample as top-level keys in the parameter dictionary. We can use the Python dict.get method with a default value of 1.0. This means that if the key is not present in the dictionary, the value returned will be the default (1.0).', '# In[ ]:', '# Retrieve the subsample if present otherwise set to 1.0', '# Extract the boosting type', '# The gbm cannot use the nested dictionary so we need to set the `boosting_type` and `subsample` as top level keys. ', '# ', '# Nested conditionals allow us to use a different set of hyperparameters depending on other hyperparameters. For example, we can explore different models with completely different sets of hyperparameters by using nested conditionals. The only requirement is that the first nested statement must be based on a choice hyperparameter (the choice could be the type of model).', '# ## Complete Bayesian Domain', '# ', '# Now we can define the entire domain. Each variable needs to have a label and a few parameters specifying the type and extent of the distribution. For the variables such as boosting type that are categorical, we use the choice variable. Other variables types include quniform, loguniform, and uniform. For the complete list, check out the documentation for Hyperopt. Altogether there are 10 hyperparameters to optimize. ', '# In[ ]:', '# Define the search space', '# ### Example of Sampling from the Domain', '# ', ""# Let's sample from the domain (using the conditional logic) to see the result of each draw. Every time we run this code, the results will change. (Again notice that we need to assign the top level keys to the keywords understood by the GBM)."", '# In[ ]:', '# Sample from the full space', '# Conditional logic to assign top-level keys', '# In[ ]:', ""# Let's test the objective function with the domain to make sure it works. (Every time the `of_connection` line is run, the `outfile` will be overwritten, so use a different name for each trial to save the results.)"", '# In[ ]:', '# Create a new file and open a connection', '# Write column names', '# Test the objective function', '# # Optimization Algorithm', '# ', '# The optimization algorithm is the method for constructing the surrogate function (probability model) and selecting the next set of hyperparameters to evaluate in the objective function. Hyperopt has two choices: random search and Tree Parzen Estimator. ', '# ', '# The technical details of TPE can be found in [this article](https://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf) and a conceptual explanation is in [this article](https://towardsdatascience.com/a-conceptual-explanation-of-bayesian-model-based-hyperparameter-optimization-for-machine-learning-b8172278050f). Although this is the most technical part of Bayesian hyperparameter optimization, defining the algorithm in Hyperopt is simple. ', '# In[ ]:', '# Create the algorithm', '# # Results History', '# The final part is the history of objective function evaluations. Although Hyperopt internally keeps track of the results for the algorithm to use, if we want to monitor the results and have a saved copy of the search, we need to store the results ourselves. Here, we are using two methods to make sure we capture all the results:', '# ', '# 1. A `Trials` object that stores the dictionary returned from the objective function', '# 2. Adding a line to a csv file every iteration.', '# ', '# The csv file option also lets us monitor the results of an on-going experiment. Although do not use Excel to open the file while training is on-going. Instead check the results using `tail results/out_file.csv` from bash or open the file in Sublime Text or Notepad.', '# In[ ]:', '# Record results', '# The `Trials` object will hold everything returned from the objective function in the `.results` attribute. We can use this after the search is complete to inspect the results, but an easier method is to read in the `csv` file because that will already be in a dataframe.', '# In[ ]:', '# Create a file and open a connection', '# Write column names', '# # Automated Hyperparameter Optimization in Practice', '# ', '# We have all four parts we need to run the optimization. To run Bayesian optimization we use the `fmin` function (a good reminder that we need a metric to minimize!) ', '# In[ ]:', '# `fmin` takes the four parts defined above as well as the maximum number of iterations `max_evals`. ', '# In[ ]:', '# Global variable', '# Run optimization', '# The `best` object holds only the hyperparameters that returned the lowest loss in the objective function. Although this is ultimately what we are after, if we want to understand how the search progresses, we need to inspect the `Trials` object or the `csv` file. For example, we can sort the `results` returned from the objective function by the lowest loss:', '# In[ ]:', '# Sort the trials with lowest loss (highest AUC) first', '# An easier method is to read in the csv file since this will be a dataframe. ', '# In[ ]:', '# The function below takes in the results, trains a model on the training data, and evalutes on the testing data. It returns a dataframe of hyperparameters from the search. ', '# ', '# Saving the results to a csv file converts the dictionary of hyperparameters to a string. We need to map this back to a dictionary using `ast.literal_eval`. ', '# In[ ]:', '    # String to dictionary', '    # Sort with best values on top', '    # Print out cross validation high score', '    # Use best hyperparameters to create a model', '    # Train and make predictions', '    # Create dataframe of hyperparameters', '    # Iterate through each set of hyperparameters that were evaluated', '    # Put the iteration and score in the hyperparameter dataframe', '# In[ ]:', '# ## Continue Optimization', '# ', '# Hyperopt can continue searching where a previous search left off if we pass in a `Trials` object that already has results. The algorithms used in Bayesian optimization are black-box optimizers because they have no internal state. All they need is the previous results of objective function evaluations (the input values and loss) and they can build up the surrogate function and select the next values to evaluate in the objective function. This means that any search can be continued as long as we have the history in a `Trials` object. ', '# In[ ]:', '# Continue training', '# To save the `Trials` object so it can be read in later for more training, we can use the `json` format. ', '# In[ ]:', '# Save the trial results', '# To start the training from where it left off, simply load in the `Trials` object and pass it to an instance of `fmin`. (You might even be able to tweak the hyperparameter distribution and continue searching with the `Trials` object because the algorithm does not maintain an internal state. Someone should check this and let me know in the comments!).', '# ## Next Steps', '# ', '# Now that we have developed all the necessary parts for automated hyperparameter tuning using Bayesian optimization, we can apply these to any dataset or any machine learning method. The functions taken here can be put in a script and run a full dataset. Next, we will go through results from 1000 evaluations on a reduced size dataset to see how the search progresses. We can then compare these results to random search to see how a method that uses __reasoning__ about past results differs from a method that does not. ', '# ', ""# After examining the tuning results from the reduced dataset, we will take the best performing hyperparameters and see if these translate to a full dataset, the features from the `[Updated 0.792 LB] LightGBM with Simple Features`(https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) kernel (I did not develop these features and want to give credit to the numerous people, including [Aguiar](https://www.kaggle.com/jsaguiar) and [olivier](https://www.kaggle.com/ogrellier),  who have worked on these features. Please check out their [kernels](https://www.kaggle.com/ogrellier/lighgbm-with-selected-features)!). We saw in the random and grid search notebook that the best hyperparameter values from the small datasets do not necessarily perform well on the full datasets. I am currently running the Bayesian Hyperparameter optimization for 500 iterations on the features referenced above and will make the results publicly available when the search is finished. For now, we will turn to the 1000 trials from the smaller dataset. These results can be generated by running the cell below, but I can't guarantee if this will finish within the kernel time limit! "", '# In[ ]:', '# MAX_EVALS = 1000', '# # Create a new file and open a connection', ""# OUT_FILE = 'bayesian_trials_1000.csv'"", ""# of_connection = open(OUT_FILE, 'w')"", '# writer = csv.writer(of_connection)', '# # Write column names', ""# headers = ['loss', 'hyperparameters', 'iteration', 'runtime', 'score']"", '# writer.writerow(headers)', '# of_connection.close()', '# # Record results', '# trials = Trials()', '# global ITERATION', '# ITERATION = 0 ', '# best = fmin(fn = objective, space = space, algo = tpe.suggest,', '#             trials = trials, max_evals = MAX_EVALS)', '# # Sort the trials with lowest loss (highest AUC) first', ""# trials_dict = sorted(trials.results, key = lambda x: x['loss'])"", ""# print('Finished, best results')"", '# print(trials_dict[:1])', '# # Save the trial results', ""# with open('trials.json', 'w') as f:"", '#     f.write(json.dumps(trials_dict))', '# # Search Results ', '# ', '# Next we will go through the results from 1000 search iterations on the reduced dataset. We will look at the scores, the distribution of hyperparameter values tried, the evolution of values over time, and compare the hyperparameters values to those from random search.', '# ', '# After examining the search results, we will use the optimized hyperparameters (at least optimized for the smaller dataset) to make predictions on a full dataset. These can then be submitted to the competition to see how well the methods do on a small sample of the data.', '# ## Learning Rate Distribution ', '# In[ ]:', '# We can see that the Bayesian search did worse in cross validation but then found hyperparameter values that did better on the test set! We will have to see if these results translate to the acutal competition data. First though, we can get all the scores in a dataframe in order to plot them over the course of training.', '# In[ ]:', '# Dataframe of just scores', '# We can also find the best scores for plotting the best hyperparameter values.', '# In[ ]:', '# Below is the code showing the progress of scores versus the iteration. For random search we do not expect to see a pattern, but for Bayesian optimization, we expect to see the scores increasing with the search as more promising hyperparameter values are tried.', '# In[ ]:', '# Plot of scores over the course of searching', '# Sure enough, we see that the Bayesian hyperparameter optimization scores increase as the search continues. This shows that more promising values (at least on the cross validation reduced dataset) were tried as the search progressed. Random search does record a better score, but the results do not improve over the course of the search. In this case, it looks like if we were to continue searching with Bayesian optimization, we would eventually reach higher scores on the cross vadidation data. ', '# ', '# For fun, we can make the same plot in Altair.', '# In[ ]:', '# Same chart, just in a different library for practice! ', '# ', '# ## Learning Rate Distribution', '# ', '# Next we can start plotting the distributions of hyperparameter values searched. We expect random search to align with the search domain, while the Bayesian hyperparameter optimization should tend to focus on more promising values, wherever those happen to be in the search domain.', '# ', '# The dashed vertical lines indicate the ""optimal"" value of the hyperparameter.', '# In[ ]:', '# Density plots of the learning rate distributions ', '# ## Distribution of all Numeric Hyperparameters', '# ', '# We can make the same chart now for all of the hyperparameters. For each setting, we plot the values tried by random search and bayesian optimization, as well as the sampling distirbution.', '# In[ ]:', '# Iterate through each hyperparameter', '        # Plot the random search distribution and the bayes search distribution', '# ## Evolution of Search', '# ', '# An interesting series of plots to make is the evolution of the hyperparameters over the search. This can show us what values the Bayesian optimization tended to focus on. The average cross validation score continued to improve throughout Bayesian optimization, indicating that ""more promising"" values of the hyperparameters were being evaluated and maybe a longer search would prove useful (or there could be a plateau in the validation scores with a longer search).', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# In[ ]:', '# Scatterplot of next three hyperparameters', '# The final plot is just a bar chart of the `boosting_type`. ', '# In[ ]:', '# Bar plots of boosting type', '# The Bayes optimization spent many more iterations using the `dart` boosting type than would be expected from a uniform distribution. We can use information such as this in further hyperparameter tuning. For example, we could use the distributions from Bayesian hyperparameter optimization to make a more focused hyperparameter grid for grid or even random search. ', '# ', '# ![](http://)For this chart, we can also make it in Altair for the practice.', '# In[ ]:', '# In[ ]:', '# ## Applied to Full Dataset', '# ', '# Now, we can take the best hyperparameters found from 1000 iterations of Bayesian hyperparameter optimization on the smaller dataset and apply these to a full dataset of features from the `[Updated 0.792 LB] LightGBM with Simple Features`(https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) kernel. The best hyperparameters from the smaller dataset will not necessarily be the best on the full dataset (because the small dataset does nto perfectly represent the entire data), but we can at least try them out. We will train a model using the optimal hyperparameters from Bayesian optimization using early stopping to determine the number of estimators. ', '# In[ ]:', '# Read in full dataset', '# Extract the test ids and train labels', '# In[ ]:', '# ### Random Search on the Full Dataset', '# In[ ]:', '# Cross validation with n_folds and early stopping', '# Then we can make predictions on the test data. The predictions are saved to a csv file that can be submitted to the competition.', '# In[ ]:', '# Submitting these to the competition results in a score of __0.787__ which compares to the original score from the kernel of __0.792__', '# ### Bayesian Optimization on the Full Dataset', '# In[ ]:', '# Cross validation with n_folds and early stopping', '# In[ ]:', ""# Submitting these to the competition results in a score of __0.792__. So the Bayesian optimization outperforms the random search based on 1000 iterations on a reduced sized dataset. I wouldn't put too much weight into these results because we saw that random search actually yielded a higher cross validation score. Nonetheless, Bayesian hyperparameter optimization can be an effective technique for automated machine learning model tuning."", '# # Conclusions', '# ', '# Bayesian optimization is one method for automated hyperparameter tuning. Automated hyperparameter tuning aims to find the best hyperparameter values for a machine learning model on a given dataset with no input from the data scientist beyond initial set-up required. Bayesian optimization uses Bayesian reasoning to build a probability model of the objecitve function $P(\\text{score} | \\text{hyperparameters})$ which is then used to select the next hyperparameter values to evaluate. The concept is to use more search iterations evaluating promising hyperparameter values by reasoning from the past results. This is an intuitive method of hyperparamter optimization that works in much the same way a human does to get better at any situation: learn from past experiences! If everything works as expected, Bayesian hyperparameter optimization can result in:', '# ', '# * Better generalization performance on the test set', '# * Fewer iterations than random or grid search require', '# ', '# Even if Bayesian optimization (or other automated hyperparameter tuning methods) does not deliver on the above points in all situations, it is a useful skill to master as a data scientist. In the future, data scientists are not going to spend valuable time tweaking model hyperparameters, and knowing methods for accomplishing this automatically will go a long way in your career or studies! Feel free to take this code and apply it to any dataset or to a different machine learning model. I am currently running these methods on a full dataset and will share the results when they are completed. I look forward to the next notebook! ', '# ', '# As always, I welcome feedback and constructive criticism. I write for Towards Data Science at https://medium.com/@williamkoehrsen/ and can be reached on Twitter at https://twitter.com/koehrsen_will. Thanks for reading to the end and keep making the data science community such a wonderful place for learning and sharing, ', '# ', '# Will', '# In[ ]:']",326
base-model-with-0-804-auc-on-home-credit (1).py,"['# coding: utf-8', '# ## Base Model Study on Home Credit', '# ', '# The Home Credit Default Risk dataset on the Kaggle is subjected as a final project of my DS/ML bootcamp, and I have spent a period of three weeks on this project. I developed various models and quite a large number of them having AUC scores better than 0.8 ( highest one +0.804). Unfortunately, I could not run any full version of my models on Kaggle because of insufficient RAM issue even though datasets are zipped to almost 4 times by integer/float dtype conversion on my datasets. Moreover, I made a bleend boosting study to acheive highest AUC score (0.81128, much highers possible) on Kaggle (https://www.kaggle.com/hikmetsezen/blend-boosting-for-home-credit-default-risk). Furthermore, I developed also a micro model having only 174 features with a better than  0.8 AUC score (https://www.kaggle.com/hikmetsezen/micro-model-174-features-0-8-auc-on-home-credit)', '# ', '# ', '# Mostly I use Colab Pro to compute LigthGBM calculations with 5-fold CV on GPUs. My models have 900-1800 features. ', '# ', '# I have a limited knowledge about the credit finance, therefore, I combined many Kaggle notebooks for expending number of features as much as I desire and/or acceptance of my LigthGBM models harvesting further enhance scores. I would like to thank these contributors. Some of them are listed here:', '# * https://www.kaggle.com/jsaguiar/lightgbm-with-simple-features <=-- my models are based on this study', '# * https://www.kaggle.com/jsaguiar/lightgbm-7th-place-solution', '# * https://www.kaggle.com/sangseoseo/oof-all-home-credit-default-risk <=-- in most cases these hyperparameters are used', '# * https://www.kaggle.com/ashishpatel26/different-basic-blends-possible <=-- thank for blending idea', '# * https://www.kaggle.com/mathchi/home-credit-risk-with-detailed-feature-engineering', '# * https://www.kaggle.com/windofdl/kernelf68f763785', '# * https://www.kaggle.com/meraxes10/lgbm-credit-default-prediction', '# * https://www.kaggle.com/luudactam/hc-v500', '# * https://www.kaggle.com/aantonova/aggregating-all-tables-in-one-dataset', '# * https://www.kaggle.com/wanakon/kernel24647bb75c', '# In[1]:', '# !pip install lightgbm==2.3.1', '# import lightgbm', '# lightgbm.__version__', '# In[2]:', '# load libraries', '# In[3]:', '# run functions and pre_settings', '    # one-hot encoder killer :-)', '# In[4]:', '    # general cleaning procedures', ""    df = df[df['AMT_INCOME_TOTAL'] < 20000000] # remove a outlier 117M"", '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', ""    df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace=True) # set null value"", ""    df['DAYS_LAST_PHONE_CHANGE'].replace(0, np.nan, inplace=True) # set null value"", '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # Flag_document features - count and kurtosis', '    # Categorical age - based on target=1 plot', '    # New features based on External sources', '    # Some simple new features (percentages)', '    # Credit ratios', '    # Income ratios', '    # Time ratios', '    # EXT_SOURCE_X FEATURE', '    # AMT_INCOME_TOTAL : income', '    # CNT_FAM_MEMBERS  : the number of family members', ""    # DAYS_BIRTH : Client's age in days at the time of application"", '    # DAYS_EMPLOYED : How many days before the application the person started current employment', '    # other feature from better than 0.8', '# In[5]:', '    # Credit duration and credit/account end date difference', '    # Credit to debt ratio and difference', '    # CREDIT_DAY_OVERDUE :', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[6]:', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Feature engineering: ratios and difference', '    # Interest ratio on previous application (simplified)', '    # Days last due difference (scheduled x done)', '    # from off', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# In[7]:', '    # Flag months with late payment', ""    pos['POS_IS_DPD'] = pos['SK_DPD'].apply(lambda x: 1 if x > 0 else 0) #  0) & (x < 120) else 0)"", '    # Features', '    # Count pos cash accounts', '    # Percentage of previous loans completed and completed before initial term', '    # Number of remaining installments (future installments) and percentage from total', '    # Group by SK_ID_CURR and merge', '    # Percentage of late payments for the 3 most recent applications', '    # Last month of each application', '    # Most recent applications (last 3)', '# In[8]:', '    # Group payments and get Payment difference', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Flag late payment', '    # Flag late payments that have a significant amount', '    # Flag k threshold late payments', '    # Features: Perform aggregations', '    # Count installments accounts', '    # from oof (DAYS_ENTRY_PAYMENT)', '# In[9]:', '    # Amount used from limit', '    # Current payment / Min payment', '    # Late payment  0 else 0)', '    # How much drawing of limit', '    # General aggregations', '    # Count credit card lines', '    # Last month balance of each credit card application', '# In[10]:', '    # keep index related columns', '    # Reduced memory usage', '    # Remove non-informative columns', '    # Removing features not interesting for classifier', '    # dataframe = ligthgbm_feature_selection(dataframe, index_cols, auc_limit=auc_limit)', '    # generate new columns with risk_groupanizer', '    # ending message of DATA POST-PROCESSING', '# In[11]:', '    # loading predicted result ', '    # split train, and test datasets', '    # delete main dataframe for saving memory', '        # Expand train dataset with two times of test dataset including predicted results', '    # Cross validation model', '    # Create arrays and dataframes to store results', '    # limit number of feature to only 174!!!', '    # print final shape of dataset to evaluate by LightGBM', '    # create submission file', '# In[12]:']",117
baseline_lgbm_in_r.R,"['# Forked from https://www.kaggle.com/kailex/tidy-xgb-all-tables-0-796', '# Changed to LGBM model', '# Changed to one-hot encoding', '  group_by(SK_ID_BUREAU) %>% # Aggregate by SK_ID_BUREAU', '  group_by(SK_ID_CURR) %>% # Aggregate by SK_ID_CURR', '# Make prediction and submission']",6
basic-baseline-with-lgb-v3-one-hot-encoder.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[2]:', ""# Now let's look at the shape of this dataset"", '# In[3]:', ""# **Let's look at the data**"", ""# Number of rows of most files are larger than numbers of rows of test / train data. Therefore, if all if entities (IDs) from train / test dataset are included in other files, we can merge other files' features into applicaion_test / application_train dataframe. If not all, but if most of IDs from applicaion_test / application_train are included in other files, we could merge them by estimating empty values. "", '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# **Ideas on hot to merge / concatenate data**', '# ', '# ![](https://storage.googleapis.com/kaggle-media/competitions/home-credit/home_credit.png)', '# According to the image on dataset explanation, there are some keys to merge / concatenate sparse data into some organized form. ', '# ', '# 1. First of all, with SK_ID CURR, we can find linkage between ***train / test dataset , bureau, POS_CASH_balance, credit_card_balance, installment_payment, and previous_application*** together. Here, since train / test dataset is our main target to work on, train/test dataset could be the hub of these data. ', '# ', ""# 2. With SK_ID_PREV, we cand find linkage between ***previous_application, POS_CASH_balance,  credit_card_balance, installment_payment*** and here, previoud_application may be the hub. (Since the linkage is 'SK_ID_PREV' and the infomation is mainly about previous information."", '# ', '# 3. Lastly, with SK_ID_BUREAU, we can link ***bureau and bureau_balance*** thereby linking these to the first group - to train / test dataset. ', '# ', ""# When we merge or link these separate data, we should consider** how to deal with Nan values. **If most of the files in each group shares most of the SK_IDs within there group, we can merge them on SK_ID and fill Nans by rather **1) putting estimated values, or 2) putting 0 or negative values as a sign of 'unidentified''** If 'unable to identify value' itself have significant implication (ex. if, say,  applicants with certain range of risk probability have tendency to have more missing values), putting 0 or negative value as sign of missing value would be more effective. "", ""# First let's see to what extent each group shares SK_IDs"", '# In[12]:', '# **Group 1 - train / test dataset , bureau, POS_CASH_balance, credit_card_balance, installment_payment, and previous_application**', '# In[13]:', '# **credit_card_balance**shows only little amount of IDS shared with training / test dataset. Others seems like including most of ID from training / test data. Seems like only if we handle them well, we could link them and work on it together. ', '# **Group 2 - previous_application, POS_CASH_balance,  credit_card_balance, installment_payment**', '# In[14]:', '# **Group 3 - bureau and bureau_balance**', '# In[15]:', ""# However, here, I'm thinking of linking Bureau data train / test dataset. Since Bureau shares 85% of it's id with train / test data, I'll check how much of those shared IDs are also shared with bureau_balance. "", '# In[16]:', ""# There are many redundant IDs. There are some value differences within the identical IDs, so later we'll think of ways to work on them - say, merge their values into the average, etc. For now, let's just check how many of independent IDs are shared. "", '# In[17]:', '# **To sum up, In group 1, train / test data as hub, we can merge : **', '# ', '# * POS_CASH_balance : 94.66589942597297 %', '# * bureau : 85.84047943186762 %', '# * credit_card_balance : 29.06850430169401 %', '# * installments_payments : 95.3213288234551 %', '# * previous_application : 95.11641941867482%', '# ', '# ** In group 2, previous_application as a hub, we can merge: **', '# * POS_CASH_balance : 53.81963029887188 %', '# * credit_card_balance : 5.564257035326012  %', '# * installments_payments : 57.41210407768106 %', '# ', '# ** Linking train / test data with bureau_balance, using bureau as a link: **', '# * 37.7656453944506%', '# ', '# of entire rows (IDs) could be merged', ""# **Now, let's merge group 1**"", '# ', '# ', '# Processing application_train/test', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# **Processing and merging *POS_CASH_balance***', '# In[22]:', '# ', ""# let's look at how it is distribute."", '#  I refered to the function of plotting from [this kernal](http://https://www.kaggle.com/gpreda/home-credit-default-risk-extensive-eda)', '# In[23]:', ""# Let's merge numerical values by the means within same SK_ID"", '# In[24]:', '# In[25]:', '# **Processing and merging *bureau***', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# * **Processing and merging* credit_card_balance***', '# In[30]:', '# In[31]:', '# In[32]:', '# **Processing and mergins *installments_payments***', '# In[33]:', '# In[34]:', '# In[35]:', '# **Processing and merging *previous_application***', '# In[36]:', '# In[37]:', '# In[38]:', '# **Try LGBM with merged data**', '# ', ""# Yet, I have much more things to be done (I noted them at the bottom of this notebook). However, I'll try LGBM with what I've got so far (Group 1)"", '# In[51]:', '# In[52]:', '# In[53]:', '# More things to do:', ""# - Adding categorical features when merging files (I only added numerical features for now. This was because each file have so many data on redundant SK_ID, so in case of numerical data I just merged average value within identical IDs, but in case of categorical data I'm not sure what would be the best way to merge it. For now I'm trying to get mode of categorical values** (But identifying mode of each IDs and merging them takes too much time and memory since there exists too much different IDs and categories.) I'll be glad to share any ideas on how to merge categorical values here!**"", '# ', ""# - Do log processing for numerical values (Haven't processed yet due to irregularity of numerical features, and some of files having too much features)"", '# ', ""# - More carefully handle Nan values : I just put -1 to all Nan values, but in some cases, say, if there exists value '-1' (or near -1) within the columns -1 would not appropriately identify 'Non existing value' for the column."", '# ', '# - Merge group 2 (previous payment as a hub, SK_ID_PREV as keys) to find out information on previous application. ', '# ', '# - Merge Bureau balance to df (Group 3)']",115
basic-jeepy.py,"['# coding: utf-8', '# In[3]:', '# In[4]:', '    # Compute target mean ', '    # Compute smoothing', '    # Apply average function to all target data', '    # The bigger the count the less full_avg is taken into account', '    # Apply averages to trn and tst series', '    # pd.merge does not keep the index so restore it', '    # pd.merge does not keep the index so restore it', '# In[5]:', ""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '# In[6]:', '# In[ ]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# In[ ]:']",34
bayesian-opt-lgbmclassifier.py,"['# coding: utf-8', '# Table of Contents', '# ', '# 1. [Predictive model LightGBM](#section-1)', '#   1. [Bayesian Optimization](#subsection-11)', '#   1. [LightGBM](#subsection-12)', '# 1. [Results](#section-2)', '#   1. [Errors ROC](#subsection-12)', '#   1. [Feature importance](#subsection-13)', '#   1. [Feature correlations](#subsection-14)', '# 1. [Last run for submission](#section-3)', '# In[1]:', '# ', '# # Predictive model LightGBM', '# In[2]:', '# In[3]:', '# In[4]:', '# ', '# ## Bayesian Optimization', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# ', '# ## LightGBM', '# In[10]:', '# LightGBM parameters found by Bayesian optimization', '# ', '# # Results', '# ', '# ## Errors ROC', '# In[11]:', '# In[12]:', '# ', '# ## Feature importance', '# In[13]:', '# In[14]:', '# In[15]:', '# ', '# ## Feature correlations', '# In[16]:', '# In[17]:', '# ', '# # Last run for submission', '# In[18]:', '# In[19]:', '# LightGBM parameters found by Bayesian optimization', '# In[20]:', '# In[21]:', '# In[22]:']",51
bigdata-project-eda-fe-choi-yunna.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# # ****application_train, application_test ë°ì´í„° í™œìš©****', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# **TARGET ê°’ì— ë”°ë¥¸ AMT_CREDIT(ëŒ€ì¶œ ê¸ˆì•¡)ê°’ ë¶„í¬ë„ ë¹„êµ**', '# ', '# ', '# plt.subplots() ê¸°ë°˜ìœ¼ë¡œ AMT_CREDIT ë¶„í¬ë„ ë¹„êµ ì‹œê°í™”', '# In[12]:', '# ì¡°ê±´ ê²°í•© (ë‘ ì¡°ê±´ì´ True ì¼ ë•Œ)', '# **app_train ê³¼ app_testë¥¼ í•©ì³ì„œ í•œë²ˆì— preprocessing ìˆ˜í–‰**', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# **ëª¨ë¸ë§**', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ í™•ì¸', '# In[26]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# iterate through the sources', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# **í•™ìŠµìš© ë°ì´í„°, í…ŒìŠ¤íŠ¸ìš© ë°ì´í„° ì„¸íŠ¸ ê²°í•©**', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# In[45]:', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ í”¼ì²˜ ê°€ê³µ', '# ê°€ì¡±ìˆ˜ë¥¼ ê³\xa0ë\xa0¤í•œ ê°€ì²˜ë¶„ ì†Œë“ í”¼ì²˜ ê°€ê³µ. ', '# In[46]:', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ. ', '# In[47]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©, NULLê°’ì€ LightGBM ë‚´ë¶€ì—ì„œ ì²˜ë¦¬í•˜ë„ë¡ íŠ¹ë³„í•œ ë³€ê²½í•˜ì§€ ì•ŠìŒ', '# **í•™ìŠµìš© ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ìš© ë°ì´í„° ë¶„ë¦¬**', '# In[48]:', '# In[49]:', '# In[50]:', '# In[51]:', '# In[52]:', '# In[53]:', '# In[54]:', '# In[ ]:']",88
bigdata-project-eda-fe-ella.py,"['# coding: utf-8', '# ## **Imports**', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# ## EDA : Application data', '# In[3]:', '# In[4]:', '# training ë°ì´í„° í”¼ì³ ì‚´íŽ´ë³´ê¸°', '# Training data ëŠ” 307511ê°œì˜ ë°ì´í„°ê°€ ìžˆê³\xa0 TARGETì„ í¬í•¨í•œ 122ê°œì˜ í”¼ì³ë¥¼ ê°–ê³\xa0 ìžˆë‹¤.', '# In[5]:', '# testing ë°ì´í„° í”¼ì³ ì‚´íŽ´ë³´ê¸°', '# Testing dataëŠ” 48744 ê°œì˜ ë°ì´í„°ì™€ TARGET ì´ ë¹\xa0ì§„ 121ê°œì˜ í”¼ì³ë¥¼ ê°–ê³\xa0 ìžˆë‹¤.', '# In[6]:', ""# 'TARGET' ì»¬ëŸ¼ ì‚´íŽ´ë³´ê¸°"", '# In[7]:', '# TARGET ì»¬ëŸ¼ ë°ì´í„° ê°œìˆ˜ ížˆìŠ¤í†\xa0ê·¸ëž¨ ì‹œê°í™”', '# In[8]:', '# target ê°œìˆ˜ ì‹œê°í™” 2', '# 0ì´ 1ë³´ë‹¤ í›¨ì”¬ ë” ë§Žì•˜ê³\xa0 1ì€ ë°ì´í„°ì˜ 8%ë§Œì„ ì°¨ì§€í•œë‹¤. ë¹„ìœ¨ì´ ë°˜ë°˜ì´ ì•„ë‹ˆë¯€ë¡œ ëª¨ë¸ë§ í•\xa0 ë•Œ ê°€ì¤‘ì¹˜ ì¡°ì\xa0ˆì´ í•„ìš”í•˜ë‹¤. ', '# In[9]:', '# training ë°ì´í„° ì¹¼ëŸ¼ í™•ì¸', '# In[10]:', '# column type ìˆ˜ í™•ì¸', '# int64 ì™€ float64 ëŠ” ìˆ˜ì¹˜í˜• ë³€ìˆ˜ì´ê³\xa0 objectëŠ” stringì„ í¬í•¨í•œ ë²”ì£¼í˜• ë³€ìˆ˜ì´ë‹¤. ë‚˜ì¤‘ì— encoding í•\xa0 í•„ìš”ê°€ ìžˆì–´ë³´ì¸ë‹¤. ', '# In[11]:', '# target ë³€ìˆ˜ì™€ ë‹¤ë¥¸ ë³€ìˆ˜ë“¤ê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ì•˜ë‹¤. ê·¸ë¦¬ê³\xa0 sorting í•˜ì˜€ë‹¤. ', '# ì–‘ì˜ ìƒê´€ê´€ê³„ ë†’ì€ ê²ƒ 15ê°œ, ìŒì˜ ìƒê´€ê´€ê³„ ë†’ì€ ê²ƒ 15ê°œ ë‚˜íƒ€ë‚´ê¸°', ""# ### EDA1 : 'DAYS_BIRTH'"", ""# 'DAYS BIRTH' ëŠ” ê³\xa0ê°ì˜ ê³\xa0ê° ë‚˜ì´ë¥¼ ì‹\xa0ì²\xad ì¼ìž ê¸°ì¤€ìœ¼ë¡œ ë³€í™˜í•œ ê°’ì´ë‹¤. ë”°ë¼ì„œ ìŒìˆ˜ê°’ì´ê³\xa0, ì¼(days) ë‹¨ìœ„ì´ë‹¤. "", '# In[12]:', '# DAYS_BIRTH ë°ì´í„° ì‚´íŽ´ë³´ê¸°', '# In[13]:', ""# 'DAYS_BIRTH' ê°€ ìŒìˆ˜ì´ê³\xa0 ë…„ ë‹¨ìœ„ë¡œ ë³´ê¸° ìœ„í•´ì„œ -365ë¡œ ë‚˜ëˆˆë‹¤. "", '# In[14]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ë¥¼ í™•ì¸í•œë‹¤. ', '# ì´ìƒê°’ ì—†ì´ ë‚˜ì´ê°€ ê³\xa0ë¥´ê²Œ ë¶„í¬ë˜ì–´ ìžˆë‹¤. ', '# In[15]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# target==1(ë¹¨ê°„ìƒ‰) ì˜ ë¶„í¬ë¥¼ ë³´ë©´ 20-30ëŒ€ì— ê¸°ìš¸ì–´ ìžˆëŠ”ê²ƒì„ ë³¼ ìˆ˜ ìžˆë‹¤. ì´ëŠ” ì\xa0Šì€ ì¸µì¼ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜ì„ ëª»í•\xa0 í™•ë¥\xa0ì´ ë†’ë‹¤ê³\xa0 ìœ\xa0ì¶”í•\xa0 ìˆ˜ ìžˆë‹¤.', '# target==0ì¼ë•Œì™€ 1ì¼ë•Œì˜ TARGETê³¼ì˜ ë¶„í¬ê°€ ìƒì´í•œê²ƒìœ¼ë¡œ ë³´ì•„ ì´ ë³€ìˆ˜ëŠ” ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì— ìœ\xa0ìš©í•˜ê²Œ í™œìš©ë\xa0 ê²ƒìœ¼ë¡œ ë³´ì¸ë‹¤.', '# In[16]:', '# ë‚˜ì´ë¥¼ ë‚˜ì´ëŒ€ ë³„ë¡œ ê·¸ë£¹ì„ ë‚˜ëˆ\xa0ì„œ target=1(ëŒ€ì¶œ ìƒí™˜ì´ ì–´ë\xa0¤ìš´) ì˜ í‰ê·\xa0ê°’ì„ ì‚´íŽ´ë³¸ë‹¤.', '# ìµœì†Œ 20 ìµœëŒ€ 70ìœ¼ë¡œí•´ì„œ ì´ 10ê°œë¡œ ê·¸ë£¹í•‘í•˜ì˜€ë‹¤. ', ""# ê²°ê³¼ëŠ” '~'ì´ìƒ '~'ë¯¸ë§Œìœ¼ë¡œ ê·¸ë£¹í•‘ëœë‹¤."", '# In[17]:', '# cut() í•¨ìˆ˜ë¥¼ ì‚¬ìš©í•´ì„œ 5ì‚´ ê°„ê²©ìœ¼ë¡œ ë‚˜ì´ëŒ€ ê·¸ë£¹ì„ ë‚˜ëˆ\xa0ë³´ì•˜ê³\xa0, ê° ë‚˜ì´ëŒ€ ë³„ë¡œ ëŒ€ì¶œìƒí™˜ì„ ëª»í•˜ëŠ” ë¹„ìœ¨ì„ ì²´í¬í•˜ì˜€ë‹¤.', '# In[18]:', '# binìœ¼ë¡œ groupby í•˜ê³\xa0 í‰ê·\xa0 ê³„ì‚°í•˜ê¸°', '# In[19]:', '# ë‚˜ì´ì™€ target í‰ê·\xa0ì„ bar plotìœ¼ë¡œ ì‹œê°í™” í•˜ì˜€ë‹¤. ', '# ì\xa0Šì€ì¸µì¼ìˆ˜ë¡ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í•˜ëŠ” ê²ƒìœ¼ë¡œ ë‚˜íƒ€ë‚¬ë‹¤. ', '# 20-25ì„¸, 25-30ì„¸ 30-35ì„¸ëŠ” ê°ê° ì•½10% ì´ìƒ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í–ˆê³\xa0, 55-60ì„¸, 60-65ì„¸, 65-70ì„¸ëŠ” 5%ì´í•˜ë¡œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í–ˆë‹¤.', ""# ### EDA2 : 'DAYS_EMPLOYED'"", ""# 'DAYS_EMPLOYED'ëŠ” ê³\xa0ê° ì†Œë“ê³¼ ê´€ë\xa0¨ëœ ë°ì´í„°ë¡œ, ëŒ€ì¶œ ì‹\xa0ì²\xadì\xa0„ í˜„ ì§ì—… ìœ\xa0ì§€ê¸°ê°„ì„ ì˜ë¯¸í•œë‹¤. ë§ˆì°¬ê°€ì§€ë¡œ ìŒìˆ˜ ê°’ì„ ë„ë©° ì¼(days) ë‹¨ìœ„ ì´ë‹¤."", '# In[20]:', '# ë°ì´í„° ì‚´íŽ´ë³´ê¸° ', '# In[21]:', '# í†µê³„ëŸ‰ í™•ì¸í•˜ê¸°', '# ìµœëŒ“ê°’ì´ 365243 ì´ê³\xa0, std ê°’ì´ ë§¤ìš° í° ê²ƒìœ¼ë¡œ ë³´ì•„ ì´ìƒì\xa0ì´ ìžˆì„ ê²ƒì´ë¼ íŒë‹¨ëœë‹¤. ', '# In[22]:', '# 365243 ì´ë¼ëŠ” ìµœëŒ€ê°’ì„ ê°–ê³\xa0 ìžˆë‹¤. ì´ìƒê°’ì´ë¼ê³\xa0 íŒë‹¨í•˜ê¸°ì—ëŠ” ì‹œê°í™”ë¡œ ë³´ì•˜ì„ ë•Œ ë¬´ì‹œí•\xa0 ìˆ˜ ì—†ì„ ì\xa0•ë„ë¡œ ê·¸ ìˆ˜ê°€ ìƒë‹¹ížˆ ë§Žë‹¤.', '# In[23]:', '# 365243 ì„ ì´ìƒê°’ìœ¼ë¡œ ë³´ê³\xa0, 365243ì¸ ê°’ê³¼ ì•„ë‹Œ ê°’ìœ¼ë¡œ ë‚˜ëˆ„ì–´ target ë¹„ìœ¨ì„ ì‚´íŽ´ë³´ì•˜ë‹¤.', '# In[24]:', '# ì´ìƒê°’(365243)ì¸ ê°’ì— ëŒ€í•´ì„œ True , Falseë¡œ êµ¬ë¶„', '# ì´ìƒê°’ì„ nanê°’ìœ¼ë¡œ ëŒ€ì¹˜', '# ížˆìŠ¤í†\xa0ê·¸ëž¨ìœ¼ë¡œ í™•ì¸í•˜ê¸°', '# 365243ì˜ ê°’ì´ nanê°’ìœ¼ë¡œ ëŒ€ì¹˜ë˜ì—ˆë‹¤.', '# In[25]:', '# test ë°ì´í„°ì—ë„ train ë°ì´í„°ì™€ ë™ì¼í•˜ê²Œ ìž‘ì—…í•œë‹¤.', '# True, Falseë¡œ ë˜ì–´ìžˆëŠ” ë°ì´í„° sumí•˜ë©´ Trueì¸ê²ƒ ê°œìˆ˜ë¥¼ ì¹´ìš´íŒ…í•œë‹¤.', ""# ### EDA3 : 'REGION_RATING_CLIENT_W_CITY'"", ""# 'REGION_RATING_CLIENT_W_CITY'ëŠ” ê³\xa0ê°ì˜ ê±°ì£¼ì§€ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ë³€ìˆ˜ë¡œ, (1,2,3) ìœ¼ë¡œ ê±°ì£¼ ì§€ì—\xadì„ í‰ê°€í•˜ì—¬ ë‚˜ëˆˆ ë³€ìˆ˜ì´ë‹¤. "", '# In[26]:', '# ë°ì´í„° ì‚´íŽ´ë³´ê¸°', '# In[27]:', '# catplot ìœ¼ë¡œ target ë³€ìˆ˜ì— ë”°ë¥¸ ë°ì´í„° ë¶„í¬ ì‚´íŽ´ë³´ê¸°', '# REGION_RATING_CLIENT_W_CITYê°€ 2,3 ì˜ ê²½ìš° ëŒ€ì¶œìƒí™˜ì„ ëª»í•˜ëŠ” ê²ƒìœ¼ë¡œ íŒë‹¨ëœë‹¤. ë°‘ì—ì„œ ë” ìžì„¸ížˆ ì‚´íŽ´ë³´ê²\xa0ë‹¤.', '# In[28]:', '# REGION_RATING_CLIENT_W_CITY ì— ëŒ€í•´ TARGET 1ì˜ ë¹„ìœ¨ ë³´ê¸°', ""# ### EDA 4 : 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3'"", '# EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ëŠ” ì™¸ë¶€ ìžì›ìœ¼ë¡œ ë¶€í„° ì\xa0•ê·œí™”ëœ ìŠ¤ì½”ì–´ë¡œ ê³\xa0ê° í–‰ë™ì„ ë‚˜íƒ€ë‚¸ë‹¤. ', '# ìŒì˜ ìƒê´€ê³„ìˆ˜ ì¤‘ì— ìƒê´€ë„ê°€ ê°€ìž¥ ë†’ì•˜ê¸°ì— ì´ ì„¸ê°€ì§€ë¥¼ ì¤‘ì\xa0ìœ¼ë¡œ EDAë¥¼ ì§„í–‰í•˜ì˜€ë‹¤.', '# TARGET ë³€ìˆ˜ì™€ EXT_SOURCEì™€ì˜ ìƒê´€ê´€ê³„ì™€ EXT_SOURCE ì„œë¡œê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ì•˜ë‹¤.', '# In[29]:', ""# 'DAYS_BIRTH' ë¥¼ ì¶”ê°€í•˜ì—¬ ìƒê´€ ê´€ê³„ë¥¼ ë³´ì•˜ë‹¤. 'DAYS_BIRTH' ëŠ” app_train ê³¼ app_test ì—ì„œ ë™ì¼í•˜ê²Œ ë…„ ë‹¨ìœ„ë¡œ ë°”ê¿”ì¤€ë‹¤."", '# In[30]:', '# ìƒê´€ê´€ê³„ë¡œ ížˆíŠ¸ë§µì„ ê·¸ë\xa0¤ë³´ì•˜ë‹¤.', '# In[31]:', '# EXT_SOURCE1,2,3ì„ TARGETê°’ ë³„ë¡œ ë‚˜ëˆ\xa0ì„œ kdeplot ìœ¼ë¡œ ì‹œê°í™” í•˜ì˜€ë‹¤.', '    # subplot ìœ¼ë¡œ ë‚˜ëˆ„ì–´ ì£¼ê¸°', '    # target ë³„ë¡œ kdeplot ë‚˜íƒ€ë‚´ê¸°', '    # titleê³¼ xì¶•, yì¶• ì§€ì\xa0•', '# ë†’ì´ ì¡°ì\xa0•', '# ### EDA 5 : ë²”ì£¼í˜• ë³€ìˆ˜', '# column type ìˆ˜ë¥¼ í™•ì¸ í–ˆì„ ë•Œ, stringì„ í¬í•¨í•œ ë²”ì£¼í˜• ë³€ìˆ˜ê°€ ìžˆì—ˆë‹¤. ê° ë³€ìˆ˜ë§ˆë‹¤ target ë¶„í¬ë¥¼ í™•ì¸í•´ ë³´ê³\xa0 encodingí•\xa0 í•„ìš”ê°€ ìžˆë‹¤.', '# In[32]:', '# column type ìˆ˜ í™•ì¸', '# int64 ì™€ float64 ëŠ” ìˆ˜ì¹˜í˜• ë³€ìˆ˜ì´ê³\xa0 objectëŠ” stringì„ í¬í•¨í•œ ë²”ì£¼í˜• ë³€ìˆ˜ì´ë‹¤. ë‚˜ì¤‘ì— encoding í•\xa0 í•„ìš”ê°€ ìžˆì–´ë³´ì¸ë‹¤. ', '# In[33]:', '# object ë³€ìˆ˜ listë¡œ ë°”ê¾¸ì–´ í™•ì¸', ""# - 'NAME_CONTRACT_TYPE' : ëŒ€ì¶œìœ\xa0í˜•"", ""# - 'CODE_GENDER': ì„±ë³„"", ""# - 'FLAG_OWN_CAR': ì°¨ ì†Œìœ\xa0 ì—¬ë¶€"", ""# - 'FLAG_OWN_REALTY': ë¶€ë™ì‚° ì†Œìœ\xa0 ì—¬ë¶€"", ""# - 'NAME_TYPE_SUITE': ë™í–‰ê³\xa0ê°"", ""# - 'NAME_INCOME_TYPE': ì†Œë“ìœ\xa0í˜•"", ""# - 'NAME_EDUCATION_TYPE': ê³\xa0ê° êµìœ¡ ë\xa0ˆë²¨"", ""# - 'NAME_FAMILY_STATUS': ê³\xa0ê° ê°€ì¡± ìœ\xa0í˜•"", ""# - 'NAME_HOUSING_TYPE': ì£¼íƒ ìœ\xa0í˜•"", ""# - 'OCCUPATION_TYPE': ì§ì—… ìœ\xa0í˜•"", ""# - 'WEEKDAY_APPR_PROCESS_START': ëŒ€ì¶œì‹\xa0ì²\xad ì‹œìž‘ìš”ì¼"", ""# - 'ORGANIZATION_TYPE': ê³\xa0ê° ì§ìž¥ ìœ\xa0í˜•"", ""# - 'FONDKAPREMONT_MODE','HOUSETYPE_MODE','WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE' : ê³\xa0ê° ê±°ì£¼ì§€ì—\xad íŠ¹ì\xa0•ê°’"", '# ', ""# ì´ ì¤‘ì—ì„œ ëŒ€ì¶œ ìƒí™˜ ì—¬ë¶€ì™€ ê´€ë\xa0¨ë\xa0 ìˆ˜ ìžˆëŠ” 'CODE_GENDER','FLAG_OWN_CAR','FLAG_OWN_REALTY','NAME_INCOME_TYPE','NAME_HOUSING_TYPE','OCCUPATION_TYPE'ì— ëŒ€í•˜ì—¬ ì‚´íŽ´ë³´ê²\xa0ë‹¤."", '# In[34]:', '# ê°ê°ì˜ ë³€ìˆ˜ë§ˆë‹¤ target ë¶„í¬ë¥¼ í™•ì¸í•˜ì˜€ë‹¤.', '# In[35]:', '# target ê°’ì— ë”°ë¥¸ ë¶„í¬ë¥¼ ì‚´íŽ´ë³´ì•˜ë‹¤.', '# **ê²°ê³¼**', ""# - 'CODE_GENDER': ì—°ì²´ê°€ ì•„ë‹Œ ê²½ìš°ì— ë¹„í•´ ë‚¨ì„±ì´ ì—°ì²´ì¸ ê²½ìš°ì— ë¹„ìœ¨ì´ ë†’ê²Œ ë‚˜íƒ€ë‚¬ë‹¤. "", ""# - 'FLAG_OWN_CAR': ì—°ì²´ì¸ ê²½ìš°ì™€ ì—°ì²´ê°€ ì•„ë‹Œ ê²½ìš°ì˜ ì°¨ì´ê°€ í¬ì§€ ì•Šë‹¤."", ""# - 'FLAG_OWN_REALTY': ì—°ì²´ì¸ ê²½ìš°ì™€ ì—°ì²´ê°€ ì•„ë‹Œ ê²½ìš°ì˜ ì°¨ì´ê°€ í¬ì§€ ì•Šë‹¤. "", ""# - 'NAME_INCOME_TYPE': State servant, working, unemployed ë¹„ìœ¨ì´ ì—°ì²´ì¼ ë•Œ ë” í¬ê²Œ ë‚˜íƒ€ë‚¬ë‹¤. "", ""# - 'NAME_HOUSING_TYPE': ë¹Œë¦° ì§‘ì—ì„œ ì‚´ê±°ë‚˜ ë¶€ëª¨ë‹˜ê³¼ í•¨ê»˜ ì‚´ ë•Œ ì—°ì²´ ë¹„ìœ¨ì´ ë” í¬ê²Œ ë‚˜íƒ€ë‚¬ë‹¤."", ""# - 'OCCUPATION_TYPE': ë…¸ë™ìž, ë“œë¼ì´ë²„, ë³´ì•ˆ ì§ë¬´ ì¢…ì‚¬ìžë“¤ì˜ ì—°ì²´ ë¹„ìœ¨ì´ ë” í¬ê²Œ ë‚˜íƒ€ë‚¬ë‹¤. "", ""# ### EDA 6 : 'AMT_CREDIT', 'AMT_INCOME_TOTAL', 'AMT_ANNUITY','AMT_GOODS_PRICE'"", ""# - 'AMT_CREDIT': ëŒ€ì¶œê¸ˆì•¡"", ""# - 'AMT_INCOME_TOTAL' : ê³\xa0ê° ì†Œë“"", ""# - 'AMT_ANNUITY' : ì›” ëŒ€ì¶œ ì§€ê¸‰ì•¡"", ""# - 'AMT_GOODS_PRICE' : ì†Œë¹„ìž ëŒ€ì¶œ ìƒí’ˆì•¡"", '# In[36]:', '# ìƒê´€ ê´€ê³„ë¥¼ ë„ì¶œí•´ ë³´ì•˜ë‹¤.', '# In[37]:', '# ìƒê´€ê´€ê³„ë¡œ ížˆíŠ¸ë§µì„ ê·¸ë\xa0¤ë³´ì•˜ë‹¤.', '# In[38]:', ""# 'AMT_CREDIT', 'AMT_INCOME_TOTAL', 'AMT_ANNUITY'ì„ TARGETê°’ ë³„ë¡œ ë‚˜ëˆ\xa0ì„œ kdeplot ìœ¼ë¡œ ì‹œê°í™” í•˜ì˜€ë‹¤."", '    # subplot ìœ¼ë¡œ ë‚˜ëˆ„ì–´ ì£¼ê¸°', '    # target ë³„ë¡œ kdeplot ë‚˜íƒ€ë‚´ê¸°', '    # titleê³¼ xì¶•, yì¶• ì§€ì\xa0•', '# ë†’ì´ ì¡°ì\xa0•', '# ### ê²°ì¸¡ê°’ í™•ì¸', '# In[39]:', '# í•¨ìˆ˜ë¥¼ ë§Œë“¤ì–´ ê²°ì¸¡ê°’ì˜ ìœ\xa0ë¬´ë¥¼ í™•ì¸í•œë‹¤. ', '        # ì´ ê²°ì¸¡ê°’', '        # ê²°ì¸¡ê°’ ë¹„ìœ¨', '        # í‘œ ë§Œë“¤ê¸°', '        # column ì´ë¦„ ë‹¤ì‹œ ì„¤ì\xa0•', '        # ê²°ì¸¡ê°’ ë¹„ìœ¨ ë†’ì€ ìˆœìœ¼ë¡œ ë‚´ë¦¼ì°¨ìˆœ í•˜ê¸°', '        # ì\xa0•ë³´ ìš”ì•½', '# In[40]:', '# ê²°ì¸¡ê°’ í†µê³„', '# ### ë°ì´í„° ê°€ê³µ ì\xa0„ training data, testing data ê²°í•©', '# In[41]:', '# In[42]:', '# In[43]:', '# ## Feature Engineering : Application data', '# ### ë²”ì£¼í˜• ë³€ìˆ˜ Label Encoding', '# In[44]:', '# ë²”ì£¼í˜• ë³€ìˆ˜ë¥¼ ë¦¬ìŠ¤íŠ¸ë¡œ ë§Œë“\xa0 í›„ì— ì¸ì½”ë”© ì§„í–‰', '# In[45]:', ""# ### FE1 : 'AMT_CREDIT', 'AMT_INCOME_TOTAL', 'AMT_ANNUITY','AMT_GOODS_PRICE'"", '# ë‹¤ìŒê³¼ ê°™ì€ ìƒˆë¡œìš´ ë³€ìˆ˜ë¥¼ ì¶”ê°€í•˜ì˜€ë‹¤.', '# - CREDIT_INCOME_PERCENT: ê³\xa0ê°ì˜ ìˆ˜ìž…ì— ëŒ€í•œ ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ', '# - ANNUITY_INCOME_PERCENT: ê³\xa0ê°ì´ ìˆ˜ìž…ì— ëŒ€í•œ ì›” ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨', '# - CREDIT_TERM: ëŒ€ì¶œ ê°šëŠ” ê¸°ê°„ (ì›” ë‹¨ìœ„)', '# - GOODS_CREDIT_RATIO: ì´ ëŒ€ì¶œ ê¸ˆì•¡ì— ëŒ€í•œ ëŒ€ì¶œ ìƒí’ˆ ê¸ˆì•¡ ë¹„ìœ¨', '# - CREDIT_GOODS_DIFF: ì´ ëŒ€ì¶œ ê¸ˆì•¡ - ëŒ€ì¶œ ìƒí’ˆ ê¸ˆì•¡', '# - GOODS_INCOME_RATIO : ê³\xa0ê° ìˆ˜ìž…ì— ëŒ€í•œ ëŒ€ì¶œ ìƒí’ˆ ê¸ˆì•¡ ë¹„ìœ¨', '# In[46]:', '# ìƒˆë¡œìš´ ë³€ìˆ˜ ì¶”ê°€', ""# ### FE2 : 'EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3'"", '# ë‹¤ìŒê³¼ ê°™ì€ ìƒˆë¡œìš´ ë³€ìˆ˜ë¥¼ ì¶”ê°€ í•˜ì˜€ë‹¤.', ""# - 'APPS_EXT_SOURCE_MEAN': EXT_SOURCE ë“¤ì˜ í‰ê·\xa0"", ""# - 'APPS_EXT_SOURCE_STD' : EXT_SOURCE ë“¤ì˜ í‘œì¤€íŽ¸ì°¨"", '# In[47]:', '# In[48]:', '# column ë°©í–¥ìœ¼ë¡œ í‰ê·\xa0 êµ¬í•˜ê¸°', '# In[49]:', '# ìƒê´€ê´€ê³„ê°€ ë†’ì€ ê²ƒì— ëŒ€í•´ ë„ˆë¬´ ê°€ê³µí•˜ë©´ ì„±ëŠ¥ì´ ì˜¤ížˆë\xa0¤ ë–¨ì–´ì§ˆ ìˆ˜ ìžˆìœ¼ë¯€ë¡œ meanê³¼ std ë§Œ êµ¬í•˜ì˜€ë‹¤.', '# In[50]:', '# In[51]:', ""# 'APPS_EXT_SOURCE_STD'ì˜ NULL ê°’ í‰ê·\xa0ìœ¼ë¡œ ì±„ìš°ê¸°"", '# In[52]:', ""# ### FE3 : 'DAYS_BIRTH', 'DAYS_EMPLOYED'"", '# ë‹¤ìŒê³¼ ê°™ì€ ìƒˆë¡œìš´ ë³€ìˆ˜ë¥¼ ì¶”ê°€í•˜ì˜€ë‹¤.', ""# - 'EMPLOYED_BIRTH_RATIO' : ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•´ ì¼í•œ ë‚\xa0ì§œ ë¹„ìœ¨"", ""# - 'INCOME_EMPLOYED_RATIO' : ì§ì—… ìœ\xa0ì§€ ê¸°ê°„ì— ëŒ€í•œ ì´ ìˆ˜ìž… ë¹„ìœ¨"", ""# - 'INCOME_BIRTH_RATIO' : ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ì´ ìˆ˜ìž… ë¹„ìœ¨"", ""# - 'CAR_BIRTH_RATIO' : ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ì†Œìœ\xa0 ì°¨ëŸ‰ ì—°ì‹"", ""# - 'CAR_EMPLOYED_RATIO' : ì§ì—… ìœ\xa0ì§€ ê¸°ê°„ì— ëŒ€í•œ ì†Œìœ\xa0 ì°¨ëŸ‰ ì—°ì‹"", '# In[53]:', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ', '# ### Null ê°’ ì¼ê´„ ë³€í™˜', '# In[54]:', '# ## EDA : CREDIT CARD BALANCE data', '# In[55]:', '# In[56]:', '# In[57]:', '# In[58]:', '# application_train ë°ì´í„°ì™€ credit_card_balance ë°ì´í„° merge', '# ### Null ê°’ í™•ì¸', '# In[59]:', '# ### SK_ID_CURRë‹¹ í‰ê·\xa0 SK_ID_PREV ê±´ìˆ˜ í™•ì¸', '# In[60]:', '# In[61]:', '# In[62]:', '# boxplot ìœ¼ë¡œ ì‹œê°í™”, í‰ê·\xa0', '# ì´ìƒê°’ì´ ë§Žì§€ ì•Šê³\xa0 í‰ê·\xa0ì´ 37 ì\xa0•ë„ì´ë‹¤. ', '# ### EDA1 : ë²”ì£¼í˜• ë³€ìˆ˜', '# In[63]:', '# In[64]:', ""# 'NAME_CONTRACT_STATUS' ì˜ target ë¶„í¬ ì‹œê°í™”"", '    # Rotate x-labels', '# In[65]:', '# crosstab ìœ¼ë¡œ ë³´ë©´, 0ì—ì„œ completed ë¹„ìœ¨ì´ 1ë³´ë‹¤ ë” ë†’ì€ ê²ƒì„ ì•Œ ìˆ˜ ìžˆë‹¤.', '# ### EDA2 : ìˆ˜ì¹˜í˜• ë³€ìˆ˜', '# In[66]:', '# ì‹œê°í™”ë¥¼ ìœ„í•œ í•¨ìˆ˜ ë§Œë“¤ì–´ ë†“ê¸°', '# In[67]:', ""# app_train[['SK_ID_CURR', 'TARGET']] ë‘ê°€ì§€ ì»¬ëŸ¼ë§Œ ê°–ê³\xa0 ì˜´"", ""# on='SK_ID_CURR' ì»¬ëŸ¼ ê¸°ì¤€ìœ¼ë¡œ ì¡°ì¸"", '# In[68]:', '# ìˆ˜ì¹˜í˜• ë³€ìˆ˜ ë¦¬ìŠ¤íŠ¸ë¡œ ë§Œë“¤ê¸°', '# In[69]:', ""# 'SK_ID_PREV','SK_ID_CURR','TARGET' ì»¬ëŸ¼ í•„ìš”ì—†ìŒ"", '# In[70]:', '# ì‹œê°í™”ë¥¼ ìœ„í•´ show_hist_by_target í•¨ìˆ˜ í˜¸ì¶œ', '# ### EDA3 :  ìƒê´€ê´€ê³„ ë¶„ì„', '# In[71]:', '# target ë³€ìˆ˜ì™€ ë‹¤ë¥¸ ë³€ìˆ˜ë“¤ê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ì•˜ë‹¤. ê·¸ë¦¬ê³\xa0 sorting í•˜ì˜€ë‹¤. ', '# ì–‘ì˜ ìƒê´€ê´€ê³„ ë†’ì€ ê²ƒ 15ê°œ, ìŒì˜ ìƒê´€ê´€ê³„ ë†’ì€ ê²ƒ 15ê°œ ë‚˜íƒ€ë‚´ê¸°', '# ### EDA4 : AMT_BALANCE, AMT_CREDIT_LIMIT_ACTUAL, AMT_INST_MIN_REGULARITY,AMT_RECIVABLE, AMT_TOTAL_RECEIVABLE,CNT_INSTALMENT_MATURE_CUM', '# target ë³„ ë¶„í¬ì™€ ìƒê´€ê´€ê³„ë¡œ ìœ\xa0ì˜ë¯¸í•œ ë³€ìˆ˜ë¼ê³\xa0 ì¶”ë\xa0¤ë‚¸ 6ê°œì˜ ë³€ìˆ˜ë¥¼ ë” ìžì„¸ížˆ ì‚´íŽ´ë³´ê²\xa0ë‹¤.', '# (AMT_BALANCE, AMT_CREDIT_LIMIT_ACTUAL, AMT_INST_MIN_REGULARITY,AMT_RECIVABLE,', '# AMT_TOTAL_RECEIVABLE,CNT_INSTALMENT_MATURE_CUM )', '# ', '# - AMT_BALANCE : ëŒ€ì¶œ ì›”ë³„ ìž”ì•¡', '# - AMT_CREDIT_LIMIT_ACTUAL : ì›”ë³„ ì¹´ë“œ í—ˆìš© í•œë„', '# - AMT_INST_MIN_REGULARITY : ìµœì†Œ í•\xa0ë¶€ ë‚©ìž… ê¸ˆì•¡', '# - AMT_TOTAL_RECEIVABLE : ì´ ì›ê¸ˆ íšŒìˆ˜ ê¸ˆì•¡', '# - AMT_RECIVABLE : ëŒ€ì¶œ ì›ê¸ˆ íšŒìˆ˜ ê¸ˆì•¡', '# - CNT_INSTALMENT_MATURE_CUM : ëŒ€ì¶œ ë‚©ë¶€ íšŸìˆ˜', '# ', '# In[72]:', '# AMT_BALANCE', '# AMT_CREDIT_LIMIT_ACTUAL', '# AMT_INST_MIN_REGULARITY', '# CNT_INSTALMENT_MATURE_CUM', '# AMT_INST_MIN_REGULARITY', '# AMT_CREDIT_LIMIT_ACTUAL', '# In[73]:', '# mean, median, count íƒ€ê²Ÿë³„ë¡œ ì¡°ì‚¬í•´ë³´ê¸°', '# ## Feature Engineering : CREDIT CARD BALANCE data', '# In[74]:', '# ë³€ìˆ˜ë¡œ ë°›ì•„ì„œ ccb_groupì— ì\xa0€ìž¥', '# In[75]:', '# In[76]:', '# MultiIndexë¡œ ë˜ì–´ ìžˆëŠ” ì»¬ëŸ¼ëª… í™•ì¸', '# In[77]:', '# ì»¬ëŸ¼ëª… ë³€ê²½', '# In[78]:', '# In[79]:', '# In[80]:', '# ### ë²”ì£¼í˜• ë³€ìˆ˜ ì¸ì½”ë”©', '# In[81]:', '# ë²”ì£¼í˜• ë³€ìˆ˜ë¥¼ ë¦¬ìŠ¤íŠ¸ë¡œ ë§Œë“\xa0 í›„ì— ì¸ì½”ë”© ì§„í–‰', '# ## Modeling', '# In[82]:', '# In[83]:', '# ë°ì´í„° train, test ë¡œ ë‚˜ëˆ„ê¸°', '# In[84]:', '# In[85]:', '# In[86]:', '# In[87]:', '# í•™ìŠµëœ Classifierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡í•˜ê³\xa0 ê²°ê³¼ë¥¼ Kaggleë¡œ Submit ìˆ˜í–‰', '# In[88]:']",290
bigdata-project-eda-fe-hr.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# ## 1. í•„ìš”í•œ ë¼ì´ë¸ŒëŸ¬ë¦¬ì™€ app ë°ì´í„° ì„¸íŠ¸ ë¡œë”©', '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# ## 2. Application_trainì— ëŒ€í•œ EDA ì§„í–‰', '# In[4]:', '# In[5]:', '# In[6]:', '# ## 3. Featureì— ëŒ€í•´ TATGETê°’ ë¶„í¬ ë¹„êµ ë° ì‹œê°í™”', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# ## 4. ì£¼ìš” ì»¬ëŸ¼ë“¤ì˜ TARGETê³¼ì˜ ìƒê´€ë„ ë¶„ì„', '# In[14]:', '# In[15]:', '# In[16]:', '# ## 4-1. EXT_SORCE_X ë³€ìˆ˜ë“¤ê³¼ TARGET ê°’ì˜ ê´€ê³„ í™•ì¸ ë° ê°€ê³µ', '# In[17]:', '# In[18]:', '# In[19]:', '## # ê° EXT_SOURCE ë¥¼ TARGETê°’ ë³„ë¡œ ë‚˜ëˆ\xa0ì„œ ë¶„í¬ë¥¼ ì‚´í•Œ', '# iterate through the sources', '# ## 5. Feature Engineering', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# ## 6. í•™ìŠµ ë°ì´í„°ë¥¼ ê²€ì¦ ë°ì´í„°ë¡œ ë¶„ë¦¬í•˜ê³\xa0 LGBM Classifierë¡œ í•™ìŠµ ìˆ˜í–‰.', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# ## submit ê²°ê³¼', '# ![image.png](attachment:92196adc-df60-454c-8af6-4d9103f1765b.png)', '# ## 7. prev_application ë°ì´í„° ì„¸íŠ¸ ê¸°ë°˜ì˜ EDAì™€ Feature Engineering ìˆ˜í–‰ í›„ í•™ìŠµ ëª¨ë¸ ìƒì„±/í‰ê°€', '# ', '# -> PREVIOUS_APPLICATION.CSV - ê³¼ê±° ëŒ€ì¶œ ì´ë\xa0¥ (ê³\xa0ê°ì˜ í˜„ìž¬ ëŒ€ì¶œ ì´ì\xa0„ ê³¼ê±° ëŒ€ì¶œ ì\xa0•ë³´ ì\xa0œê³µ)', '# In[40]:', '    # EXT_SOURCE_X FEATURE ê°€ê³µ', '    # AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', ""# app_train[['SK_ID_CURR', 'TARGET']] ë‘ê°€ì§€ ì»¬ëŸ¼ì„ ê°€ì§€ê³\xa0 on='SK_ID_CURR' ì¡°ì¸"", '# In[46]:', '# ìˆ«ìží˜• dtype ê°–ê³\xa0 ìžˆëŠ” ì»¬ëŸ¼ë§Œ ì¶”ì¶œ', '# In[47]:', '# In[48]:', '# In[49]:', '# In[50]:', '# ì‹\xa0ì²\xadê¸ˆì•¡ê³¼ ì‹¤ì\xa0œ ëŒ€ì¶œì•¡, ìƒí’ˆê¸ˆì•¡ê³¼ì˜ ì°¨ì´ ë¹„ìœ¨, ë§Œê¸°ì¼ ì°¨ì´ ë¹„êµ, ì´ìžìœ¨ ê³„ì‚°ë“±ì˜ ì£¼ìš” ì»¬ëŸ¼ ê°€ê³µ ìƒì‚°. ', '    # ëŒ€ì¶œ ì‹\xa0ì²\xad ê¸ˆì•¡ê³¼ ì‹¤ì\xa0œ ëŒ€ì¶œì•¡/ëŒ€ì¶œ ìƒí’ˆê¸ˆì•¡ ì°¨ì´ ë° ë¹„ìœ¨', '    # DAYS_XXX í”¼ì²˜ì˜ 365243(ì´ìƒì¹˜) ì„ NULLë¡œ ë³€í™˜', '    # ì²«ë²ˆì§¸ ë§Œê¸°ì¼ê³¼ ë§ˆì§€ë§‰ ë§Œê¸°ì¼ê¹Œì§€ì˜ ê¸°ê°„', '    # ë§¤ì›” ë‚©ë¶€ ê¸ˆì•¡ê³¼ ë‚©ë¶€ íšŸìˆ˜ ê³±í•´ì„œ ì\xa0„ì²´ ë‚©ë¶€ ê¸ˆì•¡ êµ¬í•¨. ', '    # ê¸°ì¡´ ì´ìžìœ¨ ê´€ë\xa0¨ ì»¬ëŸ¼ì¸ RATE_INTEREST_PRIVILEGEDì˜ ê²½ìš° Nullê°’ì´ ë§Žì•„ì„œ ìƒˆë¡\xadê²Œ ì´ìžìœ¨ì—ëŒ€í•œ ì»¬ëŸ¼ ìƒ', '    # ì\xa0„ì²´ ë‚©ë¶€ ê¸ˆì•¡ ëŒ€ë¹„ AMT_CREDIT ë¹„ìœ¨ì„ êµ¬í•˜ê³\xa0 ì—¬ê¸°ì— ë‹¤ì‹œ ë‚©ë¶€íšŸìˆ˜ë¡œ ë‚˜ëˆ„ì–´ì„œ ì´ìžìœ¨ ê³„ì‚°. ', '# In[51]:', '# ê¸°ì¡´ ì»¬ëŸ¼ë° ìœ„ì—ì„œ ê°€ê³µëœ ì‹\xa0ê·œ ì»¬ëŸ¼ë“¤ì— ëŒ€í•´ì„œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ Aggregation ìˆ˜í–‰.  ', '         # ê¸°ì¡´ ì£¼ìš” ì»¬ëŸ¼ë“¤ì„ SK_ID_CURR ë\xa0ˆë²¨ë¡œ Aggregation ìˆ˜í–‰', '        # ì‹\xa0ê·œ ê°€ê³µ ì»¬ëŸ¼ë“¤ì„ SK_ID_CURR ë\xa0ˆë²¨ë¡œ Aggregation ìˆ˜í–‰', ""    # multi index ì»¬ëŸ¼ì„ '_'ë¡œ ì—°ê²°í•˜ì—¬ ì»¬ëŸ¼ëª… ë³€ê²½"", ""    # 'SK_ID_CURR'ë¡œ ì¡°ì¸í•˜ê¸° ìœ„í•´ SK_ID_CURRì„ ì»¬ëŸ¼ìœ¼ë¡œ ë³€í™˜  "", '# In[52]:', '# NAME_CONTRACT_STATUSì˜ SK_ID_CURRë³„ Approved, Refusedì˜ ê±´ìˆ˜ ê³„ì‚°.  ', '    # ì›ëž˜ groupby ì»¬ëŸ¼ + ì„¸ë¶€ ê¸°ì¤€ ì»¬ëŸ¼ìœ¼ë¡œ groupby ìˆ˜í–‰. ì„¸ë¶„í™”ëœ ë\xa0ˆë²¨ë¡œ aggregation ìˆ˜í–‰ í•œ ë’¤ì— unstack()ìœ¼ë¡œ ì»¬ëŸ¼ë\xa0ˆë²¨ë¡œ ë³€í˜•. ', '    # NAME_CONTRACT_STATUSë¡œ groupì„ ë§Œë“¤ì–´ Approvedì™€ Refusedì˜ ê°’ì„ í™•ì¸', '    # ì»¬ëŸ¼ëª… ë³€ê²½. ', '    # NaNê°’ì€ ëª¨ë‘ 0ìœ¼ë¡œ ë³€ê²½. ', ""    # 'SK_ID_CURR'ë¡œ ì¡°ì¸í•˜ê¸° ìœ„í•´ SK_ID_CURRì„ ì»¬ëŸ¼ìœ¼ë¡œ ë³€í™˜  "", '# In[53]:', '# ì•žì—ì„œ êµ¬í•œ prev_amt_aggì™€ prev_refused_appr_aggë¥¼ ì¡°ì¸í•˜ê³\xa0 SK_ID_CURRë³„ APPROVED_COUNT ë° REFUSED_COUNT ë¹„ìœ¨ ìƒì„±', '    # prev_amt_aggì™€ ì¡°ì¸. ', '    # SK_ID_CURRë³„ ê³¼ê±° ëŒ€ì¶œê±´ìˆ˜ ëŒ€ë¹„ APPROVED_COUNT ë° REFUSED_COUNT ë¹„ìœ¨ ìƒì„±. ', ""    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' ì»¬ëŸ¼ drop "", '# In[54]:', '# appsì™€ previous ë°ì´í„° ì„¸íŠ¸ë¥¼ SK_ID_CURRë\xa0ˆë²¨ë¡œ ë‹¤ì–‘í•œ ì»¬ëŸ¼ì´ aggregationë˜ì–´ ìžˆëŠ” prev_agg ì¡°ì¸', '# ê°€ê³µëœ ìµœì¢… ë°ì´í„° ì„¸íŠ¸ ìƒì„±', '# In[55]:', '# Label ì¸ì½”ë”© ìˆ˜í–‰. ', '# In[56]:', '# í•™ìŠµ ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì„¸íŠ¸ ë¶„ë¦¬. ', '# In[57]:', '# í•™ìŠµ ìˆ˜í–‰. ', '    # í•™ìŠµ ë°ì´í„°ë¥¼ ê²€ì¦ ë°ì´í„°ë¡œ ë¶„ë¦¬', '# In[58]:', '# In[59]:', '# In[60]:', '# In[61]:', '# ## submit ê²°ê³¼', '# ![image.png](attachment:f258d504-8c68-4fc9-bbdd-820ac54035e2.png)', '# ## 8. bureauì™€ bureau_bal ë°ì´í„° ì„¸íŠ¸ ê¸°ë°˜ì˜ EDAì™€ Feature Engineering ìˆ˜í–‰ í›„ í•™ìŠµ ëª¨ë¸ ìƒì„±/í‰ê°€', '# ->bureau.csv : ë‹¤ë¥¸ ê¸ˆìœµ ê¸°ê´€ì—ì„œ ì\xa0œê³µ í•œ ëª¨ë“\xa0 ê³\xa0ê°ì˜ ì´ì\xa0„ ëŒ€ì¶œ ì\xa0•ë³´', '# In[62]:', '# In[63]:', '# TARGET ê°’ì„ ê°€ì\xa0¸ì˜¤ê¸° ìœ„í•´ bureauë¥¼ appsì™€ ì¡°ì¸', '# In[64]:', '# In[65]:', '# ìˆ«ìží˜• ì»¬ëŸ¼ì¤‘ IDì™€ TARGETì€ ì\xa0œì™¸', '# In[66]:', '# In[67]:', '# In[68]:', '# In[69]:', '# correlated features', '# In[70]:', '# bureau ì±„ë¬´ ì™„ë£Œ ë‚\xa0ì§œ ë° ëŒ€ì¶œ ê¸ˆì•¡ ëŒ€ë¹„ ì±„ë¬´ ê¸ˆì•¡ ê´€ë\xa0¨ ì»¬ëŸ¼ ê°€ê³µ.', '    # ì˜ˆì\xa0• ì±„ë¬´ ì‹œìž‘ ë° ì™„ë£Œì¼ê³¼ ì‹¤ì\xa0œ ì±„ë¬´ ì™„ë£Œì¼ê°„ì˜ ì°¨ì´ ë° ë‚\xa0ì§œ ë¹„ìœ¨ ê°€ê³µ.  ', '    # ì±„ë¬´ ê¸ˆì•¡ ëŒ€ë¹„/ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ë° ì°¨ì´ ê°€ê³µ', '# In[71]:', '# bureau ì£¼ìš” ì»¬ëŸ¼ ë° ì•žì—ì„œ ì±„ë¬´ ë° ëŒ€ì¶œê¸ˆì•¡ ê´€ë\xa0¨ ì»¬ëŸ¼ë“¤ë¡œ SK_ID_CURR ë\xa0ˆë²¨ì˜ aggregation ì»¬ëŸ¼ ìƒì„±. ', '    # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '# In[72]:', ""# Bureauì˜ CREDIT_ACTIVE='Active' ì¸ ë°ì´í„°ë§Œ filtering í›„ ì£¼ìš” ì»¬ëŸ¼ ë° ì•žì—ì„œ ì±„ë¬´ ë° ëŒ€ì¶œê¸ˆì•¡ ê´€ë\xa0¨ ì»¬ëŸ¼ë“¤ë¡œ SK_ID_CURR ë\xa0ˆë²¨ì˜ aggregation ì»¬ëŸ¼ ìƒì„±"", ""    # CREDIT_ACTIVE='Active' ì¸ ë°ì´í„°ë§Œ filtering"", '        # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '# In[73]:', '# bureau_balì„ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ê±´ìˆ˜ì™€ MONTHS_BALANCEì˜ aggregation ê°€ê³µ ', '    # SK_ID_CURR ë\xa0ˆë²¨ë¡œ ê±´ìˆ˜ì™€ MONTHS_BALANCEì˜ aggregation ê°€ê³µ ', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '# In[74]:', '# ê°€ê³µëœ bureauê´€ë\xa0¨ aggregation ì»¬ëŸ¼ë“¤ì„ ëª¨ë‘ ê²°í•©   ', '    # ê°€ê³µëœ bureauê´€ë\xa0¨ aggregation ì»¬ëŸ¼ë“¤ì„ ëª¨ë‘ ì¡°ì¸í•˜ì—¬ ê²°í•© í›„ return  ', '# In[75]:', '# In[76]:', '# application, previous, bureau, bureau_bal ê´€ë\xa0¨ ë°ì´í„°ì…‹ ê°€ê³µ ë° ì·¨í•©. ', '# In[77]:', '# Category ì»¬ëŸ¼ì„ ëª¨ë‘ Label ì¸ì½”ë”© ìˆ˜í–‰ ', '# í•™ìŠµê³¼ í…ŒìŠ¤íŠ¸ ë°ì´í„°ë¡œ ë¶„ë¦¬', '# In[78]:', '# In[79]:', '# ## submit ê²°ê³¼', '# ![image.png](attachment:9230e333-0c7e-4e82-bad6-e3ef9ceec005.png)', '# ## - bureau, application, previous ë°ì´í„°ë¥¼ ëª¨ë‘ ì‚¬ìš©í–ˆì„ ë•Œ ê°€ìž¥ ì¢‹ì€ ì„±ëŠ¥ì„ ë³´ì—¬ì¤€ë‹¤.']",167
bigdata-project-eda-fe-je2760sul.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# Prev_application ë°ì´í„° ì„¸íŠ¸ ê¸°ë°˜ì˜ EDAì™€ Feature Engineering ìˆ˜í–‰ í›„ í•™ìŠµ ëª¨ë¸ ìƒì„±/í‰ê°€', '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# ìƒˆë¡œìš´ Feature ë§Œë“¤ì–´ì„œ application_trainê³¼ application_testì— ì¶”ê°€', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '    # EXT_SOURCE_X FEATURE ê°€ê³µ', '    # AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ Feature ê°€ê³µ', '    # DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ', '# In[8]:', '# Previous_application ë¡œë”©', '# In[9]:', '# In[10]:', '# In[ ]:', '# appicationê³¼ previous ì¡°ì¸í•˜ê³\xa0 ë¹„êµ', '# ', '# -ëˆ„ë½ëœ ì§‘í•© í™•ì¸', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# Null ê°’ì„ í™•ì¸í•˜ê³\xa0 ì\xa0„ì²´ ë°ì´í„°ì—ì„œ ë¹„ìœ¨ì„ ë³´ì—¬ì£¼ëŠ” í•¨ìˆ˜', '# In[15]:', '# In[16]:', '# In[ ]:', '# Target ìœ\xa0í˜•ì— ë”°ë¼ ìˆ«ìží˜• feature í™•ì¸', '# In[17]:', '# prev_appì™€ app_trainì„ inner ì¡°ì¸ ==> TARGET ê°’ì€ application_train(app_train) ë°ì´í„°ì—ë§Œ ìžˆìŒ', '# ==> prev_appì•ˆì— TARGET ìœ\xa0í˜•ì— ë”°ë¼ FEATURE í™•ì¸ì„ í•˜ë\xa0¤ë©´ ì¡°ì¸í•\xa0 í•„ìš”ê°€ ìžˆìŒ', ""# app_train[['SK_ID_CURR', 'TARGET']] ë‘ê°€ì§€ ì»¬ëŸ¼ë§Œ ê°–ê³\xa0 ì˜´"", ""# on='SK_ID_CURR' ì»¬ëŸ¼ ê¸°ì¤€ìœ¼ë¡œ ì¡°ì¸"", '# In[18]:', '# TARGET 1 ì¼ë•Œ ê°’ì„ í™•ì¸', '# TARGET 0 ì¼ë•Œ ê°’ì„ í™•ì¸', '# In[19]:', '# Numerical Features(ìˆ«ìží˜• í”¼ì²˜) ê³¼ Categorical Features(ë²”ì£¼/object í”¼ì²˜) êµ¬ë¶„ í•¨ìˆ˜', '# In[20]:', '# Numerical Features & Categorical Feature ìœ„í•œ ì‹œê°í™” í•¨ìˆ˜', '# In[21]:', '# ì‹œê°í™” í•¨ìˆ˜', '    # Rotate x-labels', '# previous_applicationì„ ì´ìš©í•œ EDA', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# numberic feature ì‹œê°í™”', '# In[26]:', '# RATE_DOWN_PAYMENT : ì„\xa0ê¸ˆ ë¹„ìœ¨(ì\xa0•ê·œí™”ë¨)', '# ë¹„ìœ¨ì´ ëŒ€ë¶€ë¶„ 0.0~0.1 ì‚¬ì´ì— ëª¨ì—¬ìžˆìŒ', '# RATE_INTEREST_PRIMARY : ì´ìžìœ¨', '# RATE_INTEREST_PRIVILEGED : ì´ìžìœ¨', '# In[27]:', '# CNT_PAYMENT : ì´ì\xa0„ ëŒ€ì¶œ ì‹\xa0ì²\xadì˜ ëŒ€ì¶œê¸ˆì•¡ ê´€ë\xa0¨ TERM', '# ë‹¤ì–‘í•œ ë¶„í¬ê°€ ìžˆì§€ë§Œ, 0~20 ì‚¬ì´ì˜ ê°’ ìœ„ì£¼ë¡œ ë¶„í¬ë˜ì–´ ìžˆìŒ', '# DAYS_FIRST_DUE : ì‹\xa0ì²\xad ë‚\xa0ì§œë¡œ ë¶€í„° ë§ˆê°ì¼ê¹Œì§€ì˜ ì¼ìž', '# DAYS_LAST_DUE : ì‹\xa0ì²\xad ë‚\xa0ì§œë¡œë¶€í„° ë§ˆì§€ë§‰ ë§Œê¸°ì¼ê¹Œì§€ì˜ ì¼', '# In[28]:', ""# 'AMT_ANNUITY' : ì›” ëŒ€ì¶œ ë‚©ìž…ì•¡"", '# ëŒ€ì¶œ ìœ\xa0í˜•ê³¼ ì˜ì—… ëŒ€ì¶œ ì—¬ë¶€ì— ë”°ë¼ ë¶„ë¥˜ í•´ ì›” ëŒ€ì¶œ ë‚©ìž…ì•¡ í™•ì¸', '# In[29]:', '# NAME_CASH_LOAN_PURPOSE : í˜„ê¸ˆ ëŒ€ì¶œ ëª©ì\xa0', '# In[ ]:', '# APP_PREV ë°ì´í„° ì„¸íŠ¸ FEATURE ENGINEERING ìˆ˜í–‰', '# In[30]:', '# groupby SK_ID_CURR', '# ', '# In[31]:', '# ë³€ìˆ˜ë¡œ ë°›ì•„ì„œ prev_groupì— ì\xa0€ìž¥', ""prev_group = prev_app.groupby('SK_ID_CURR') # groupby ëŒ€ìƒ ì»¬ëŸ¼ëª…"", '# In[ ]:', '# ë§Œê¸°ì¼ê¹Œì§€ ì›” ë‚©ìž…í•´ì•¼ í•˜ëŠ” ì›ê¸ˆê³¼ ê·¸ ë¹„ìœ¨ì€?', '# In[ ]:', '# In[32]:', '# ëŒ€ì¶œ ê¸ˆì•¡ AMT_CREDITì—ì„œ ì\xa0„ì²´ ë‚©ë¶€í•´ì•¼ í•˜ëŠ” íšŸìˆ˜ CNT_PAYMENTë¥¼ ë‚˜ëˆ”', '# In[33]:', '# AMT_ANNUITYì—ì„œ ì›ê¸ˆì˜ ë¹„ìœ¨ í™•ì¸', '# In[34]:', '# In[35]:', '# In[36]:', '# SK_IP_CURRì„ ì´ìš©í•´ ê° ëŒ€ì¶œ íšŸìˆ˜ë¥¼ êµ¬í•˜ê³\xa0, ì›”ë³„ ì›ê¸ˆ ë‚©ìž…ì•¡ì˜ í‰ê·\xa0, ìµœëŒ€, ìµœì†Œ ê°’ì„ êµ¬í•¨', '# In[37]:', '# ì›ê¸ˆ ë¹„ìœ¨ì— ëŒ€í•œ í‰ê·\xa0, ìµœëŒ€, ìµœì†Œ ê°’ì„ êµ¬í•¨', '# In[38]:', '# In[ ]:', '# COUSTOMER ë‹¹ ëŒ€ì¶œ ìƒíƒœ(í—ˆê°€, ì·¨ì†Œ) ë¹„ìœ¨', '# In[39]:', '# In[40]:', '# Refused ì¸ ê²½ìš°ì—ëŠ” yì—ëŠ” 0, Approved ì¸ê²½ìš°ì—ëŠ” Y=1 ', '# In[41]:', '# In[42]:', '# COUSTOMERë‹¹ APPROVED(=1)ì¸ ê±´ìˆ˜ë¥¼ í•©í•¨', '# In[43]:', '# COUSTOMERì˜ ëŒ€ì¶œ ì‹\xa0ì²\xad íšŸìˆ˜ë¡œ APPROVED ê±´ìˆ˜ë¥¼ ë‚˜ëˆ\xa0ì„œ ìŠ¹ì¸ëœ ë¹„ìœ¨ í™•ì¸', '# In[44]:', '# In[45]:', '# COUSTOMER ë‹¹ ëŒ€ì¶œ ìŠ¹ì¸ ë¹„ìœ¨ ë¶„í¬í‘œ', '# In[46]:', '# PURPOSEì— ë”°ë¥¸ ìŠ¹ì¸ ë¹„ìœ¨ ë¶„ì„ ì¶”ê°€', '# In[47]:', '# ì‹œê°íšŒ', '# XNA(ëª©ì\xa0 ë°ì´í„° X), XNP(CASH LOANì´ ì•„ë‹ë•Œ)ë¥¼ ì\xa0œì™¸í•˜ê³\xa0 ELECTONIC EQUIPMENTì˜ ëª©ì\xa0ì—ì„œ ìŠ¹ì¸ ë¹„ìœ¨ì´ ë†’ìŒ', '# In[ ]:', '# SK_ID_CURR ë³„ NAME_CONTRACT_STATUSê°€ REFUSEDì¼ ê²½ìš° ëŒ€ì¶œ ì‹\xa0ì²\xad ê¸ˆì•¡', '# In[48]:', '# In[49]:', '# In[50]:', '# dataframeì„ ë§Œë“¤ì–´ì„œ ê±°ì\xa0ˆëœ ëŒ€ì¶œ ì‹\xa0ì²\xadì˜ ëŒ€ì¶œì‹\xa0ì²\xad ê¸ˆì•¡ì„ maxì™€ minì„ í†µí•´ í™•ì¸', '# In[51]:', '# In[52]:', '# mergeë¥¼ ìœ„í•´ ë‘ dataframeì— reset_index', '# In[53]:', '# merge', '# In[54]:', '# Nullê°’ì„ 0ìœ¼ë¡œ ë³€ê²½', '# In[55]:', '# í•œ ì‚¬ëžŒë‹¹ ìŠ¹ì¸ëœ ë¹„ìœ¨', '# In[56]:', '# In[57]:', '# ìŠ¹ì¸ëœ ì‹\xa0ì²\xad ê¸ˆì•¡ê³¼ ëŒ€ì¶œê¸ˆì•¡ ì°¨ì´', '# In[58]:', '# In[59]:', '# í—ˆê°€ëœ ëŒ€ì¶œ ê¸ˆì•¡ì—ì„œ ì‹\xa0ì²\xadëœ ëŒ€ì¶œ ê¸ˆì•¡ì„ ë¹¼ì–´ ë‘˜ì˜ ì°¨ì´ë¥¼ êµ¬í•¨', '# In[60]:', '# ì‹\xa0ì²\xad ê¸ˆì•¡ì—ì„œ ëª‡ % ë³€í™”ê°€ ìžˆì—ˆëŠ”ì§€', '# In[61]:', '# SK_ID_CURRì˜ MAX,MIN DIFFERENCEë¥¼ ê°€ì\xa0¸ì˜´', '# In[62]:', '# RESET_INDEXí•˜ê³\xa0 prev_refused_aggì™€ MERGE', '# In[63]:', '# Nullê°’ì„ 0ìœ¼ë¡œ ë³€ê²½', '# In[64]:', '# In[65]:', '# In[66]:', '# In[67]:', '# In[68]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©, NULLê°’ì€ LightGBM ë‚´ë¶€ì—ì„œ ì²˜ë¦¬í•˜ë„ë¡ íŠ¹ë³„í•œ ë³€ê²½í•˜ì§€ ì•ŠìŒ', '# In[69]:', '# In[70]:', '# í•™ìŠµ ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ë‹¤ì‹œ ë¶„ë¦¬', '# In[71]:', '# In[72]:', '# í•™ìŠµ ë°ì´í„°ë¥¼ ê²€ì¦ ë°ì´í„°ë¡œ ë¶„ë¦¬í•˜ê³\xa0 LGBM Classifierë¡œ í•™ìŠµ ìˆ˜í–‰', '# In[73]:', '# In[74]:', '# In[75]:', '# í•™ìŠµëœ Classifierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡í•˜ê³\xa0 ê²°ê³¼ë¥¼ Kaggleë¡œ Submit ìˆ˜í–‰', '# In[ ]:', '# In[76]:', '# In[ ]:']",166
bigdata-project-eda-fe-leejihyefinal.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# ë¼ì´ë¸ŒëŸ¬ë¦¬ ë° ë°ì´í„° ì„¸íŠ¸ ë¡œë”©', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# MERGE ì‚¬ìš©í•˜ì—¬ previousì™€ apps ì¡°ì¸', '# In[10]:', '# In[11]:', '# # 1. EDA', '#   ë°ì´í„°ì—ì„œ ì–´ë–\xa0í•œ íŠ¹ì§•ì„ ì¶”ì¶œí•˜ê¸° ì\xa0„ì— ë°ì´í„°ë¥¼ ìž˜ ì‚´íŽ´ë´ì•¼í•¨', '# ï‚– ë°ì´í„°ì˜ ë¶„í¬ ë° ê°’ì„ ê²€í†\xa0í•¨ìœ¼ë¡œì¨ ë°ì´í„°ë¥¼ ê´€ì°° ë° ì´í•´ë¥¼ í†µí•´ ìž\xa0ìž¬ì\xa0ì¸ ë¬¸ì\xa0œë¥¼ ë°œê²¬ ê°€ëŠ¥í•¨', '# ï‚– ë‹¤ì–‘í•œ ê°ë„ì—ì„œ ì‚´íŽ´ë³´ëŠ” ê³¼ì\xa0•ì—ì„œ ë‹¤ì–‘í•œ íŒ¨í„´ì„ ë°œê²¬í•\xa0 ìˆ˜ ìžˆê³\xa0, ì´ë¥¼ í†µí•´ ë¬¸ì\xa0œ í•´ê²°í•˜ê¸° ìœ„í•œ ê°€ì„¤ì„ ì„¸ìš¸ ìˆ˜ ìžˆìŒ', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', ""# #### 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3'/ ì‹\xa0ìš©í‰ê°€ì\xa0ìˆ˜, 'DAYS_BIRTH' ê°€ ë‹¤ë¥¸ ë°ì´í„°ë“¤ì— ë¹„í•´ TARGET ê°’ì— ë”°ë¼ ì°¨ì´ê°€ ì¡´ìž¬í•˜ëŠ” ê²ƒì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆìŒ."", '# In[16]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# In[17]:', '# iterate through the sources', '# In[18]:', '# TARGET ë³€ìˆ˜ì™€ EXT_SOURCEì™€ì˜ ìƒê´€ê´€ê³„ì™€ EXT_SOURCE ì„œë¡œê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´í•Œ', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '    # Rotate x-labels', '# In[25]:', '# í•¨ìˆ˜ í˜¸ì¶œ ì‹¤íŒ¨ ', '# ëŒ€ì¶œ ìƒíƒœì— ë”°ë¥¸ Target', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', ""prev_group = prev.groupby('SK_ID_CURR') # groupby ëŒ€ìƒ ì»¬ëŸ¼ëª…"", '# In[30]:', '# In[31]:', '# # 2. FEATURE ENGINEERING ', '# ë°ì´í„°ì— ëŒ€í•œ ì§€ì‹ì„ í™œìš©í•˜ì—¬ Target ì˜ˆì¸¡ ëª¨ë¸ì˜ ì\xa0•í™•ë„ë¥¼ í–¥ìƒ', '# Targetì„ ë¶„ë¥˜í•\xa0 ìˆ˜ ìžˆëŠ” í”¼ì²˜ë¥¼ ë§Œë“œëŠ” ê³¼ì\xa0•ìœ¼ë¡œ ë‹¤ì–‘í•œ ì»¬ëŸ¼(ë³€ìˆ˜) ê²°í•©, ìƒê´€ê´€ê³„, í”¼ì²˜ ë³€í™˜ ë“±', '# ', '# In[ ]:', '# In[32]:', '# Null ê°’ì„ í™•ì¸í•˜ê³\xa0 ì\xa0„ì²´ ë°ì´í„°ì—ì„œ ë¹„ìœ¨ì„ ë³´ì—¬ì£¼ëŠ” í•¨ìˆ˜', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# In[40]:', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ í”¼ì²˜ ê°€ê³µ', '# ê°€ì¡±ìˆ˜ë¥¼ ê³\xa0ë\xa0¤í•œ ê°€ì²˜ë¶„ ì†Œë“ í”¼ì²˜ ê°€ê³µ. ', '# In[41]:', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ. ', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# In[47]:', '# ê³¼ê±° ëŒ€ì¶œì´ë\xa0¥ íšŸìˆ˜ ìƒì„±', '# In[48]:', '# # ëª¨ë¸ìƒì„± ë° í•™ìŠµ', '# In[49]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©, NULLê°’ì€ LightGBM ë‚´ë¶€ì—ì„œ ì²˜ë¦¬í•˜ë„ë¡ íŠ¹ë³„í•œ ë³€ê²½í•˜ì§€ ì•ŠìŒ', '# In[ ]:', '# In[50]:', '# In[51]:', '# In[ ]:', '# í•™ìŠµë°ì´í„°ë¥¼ ê²€ì¦ë°ì´í„°ë¡œ ë¶„ë¦¬í•˜ê³\xa0 LGBM Classifierë¡œ í•™ìŠµ ìˆ˜í–‰', '# ', '# í”¼ì²˜ìš© ë°ì´í„°ì™€ íƒ€ê²Ÿ ë°ì´í„° ë¶„ë¦¬', '# ', '# í•™ìŠµìš©/ê²€ì¦ìš© ë°ì´í„° ì„¸íŠ¸ ë¶„ë¦¬', '# In[52]:', '# In[53]:', '# In[54]:', '# In[55]:', '# ### Feature importance ì‹œê°í™”', '# In[56]:', '# ### í•™ìŠµëœ classfierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„°ë¥¼ ì˜ˆì¸¡í•˜ê³\xa0 kaggleë¡œ submit', '# In[57]:', '# In[58]:', '# In[ ]:', '# In[ ]:', '# ', '# ê°ì‚¬í•©ë‹ˆë‹¤:-)', '# In[59]:', '#    learning_rate=0.02,', '#    num_le', '# In[ ]:']",117
bigdata-project-eda-fe-my.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# ### Application_trainê³¼ Application_test ë°ì´í„° read_csv', '# In[5]:', '# In[6]:', '# ## Target columnì˜ ë¶„í¬ ì‹œê°í™”', '# #### Targetë³€ìˆ˜ëŠ” 0(ì\xa0œë•Œ ëŒ€ì¶œê¸ˆ ìƒí™˜ ê°€ëŠ¥), 1(ìƒí™˜ ì–´ë\xa0¤ì›€)ì„ ì˜ˆì¸¡í•˜ëŠ” ë°˜ì‘ë³€ìˆ˜', '# In[7]:', '# In[8]:', '# #### app_trainê³¼ app_testë¥¼ í•©ì³ì„œ í•œë²ˆì— ë°ì´í„° preprocessing ìˆ˜í–‰', '# ##### ê¸°ë³¸ ë°ì´í„°ì…‹ ê·¸ëŒ€ë¡œ í™œìš©', '# In[9]:', '# In[10]:', '# In[11]:', '# #### Object feature(ë²”ì£¼í˜•ë°ì´í„°) ì²˜ë¦¬', '# ##### ë‘ê°€ì§€ ë²”ì£¼ë§Œ ê°€ì§€ëŠ” ë³€ìˆ˜->Label Encoding', '# ##### ì„¸ê°€ì§€ ì´ìƒì˜ ë²”ì£¼ë¥¼ ê°€ì§€ëŠ” ë³€ìˆ˜ -> Onehot Encoding', '# ##### ì—¬ê¸°ì—ì„œëŠ” ë¨¼ì\xa0€, Feature importanceë¥¼ ë³´ì´ê¸° ìœ„í•´ Label Encodingë§Œ í•˜ê³\xa0, ì¶”í›„ì— Onehot Encodingê¹Œì§€ í•˜ê¸°ë¡œ í•©ë‹ˆë‹¤.', '# ##### ì´ë•Œë§Œ ë”°ë¡œ ì‚¬ìš©í•\xa0 apps_trainê³¼ apps_testë°ì´í„°ë¥¼ ë§Œë“\xadë‹ˆë‹¤', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# ## EDA', '# #### train dataì— ëŒ€í•œ EDA', '# #### Nullê°’ ì¼ê´„ ë³€í™˜', '# In[16]:', '# In[17]:', '# #### í•™ìŠµë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ë‹¤ì‹œ ë¶„ë¦¬', '# In[18]:', '# In[19]:', '# #### train dataë¥¼ test dataë¡œ ë¶„ë¦¬í•˜ê³\xa0 LGBM Classifierë¡œ í•™ìŠµìˆ˜í–‰', '# ##### ftr_app=í”¼ì²˜ìš© ë°ì´í„°, target_app=íƒ€ê²Ÿ ë°ì´í„°', '# In[20]:', '# #### Feature importance ì‹œê°í™”', '# ##### ë°ì´í„°ì— íŠ¹ë³„í•œ ê°€ê³µ ì—†ëŠ” ìƒíƒœ', '# In[21]:', '# In[22]:', '# #### featureë“¤ì— ëŒ€í•´ TARGETê°’ ë¶„í¬ë„ ì‹œê°í™”', '# In[23]:', '# In[24]:', '# Feature Importances ì—ì„œ ì¤‘ìš”í•˜ê²Œ ë‚˜ì™”ë˜ ìƒìœ„ 20ê°œì˜ columns', '# #### ìƒê´€ê´€ê³„ê°€ ë†’ì•˜ë˜ 3ê°œì˜ ë³€ìˆ˜ EXT_SOURCE_1,EXT_SOURCE_2,EXT_SOURCE_3ì˜ ì‹œê°í™”', '# In[25]:', '# TARGET ë³€ìˆ˜ì™€ EXT_SOURCEì™€ì˜ ìƒê´€ê´€ê³„ì™€ EXT_SOURCE ì„œë¡œê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´í•Œ', '# In[26]:', '# In[27]:', '# iterate through the sources', '# #### ì´ 3ê°€ì§€ ë³€ìˆ˜ ì™¸ì— DAYS_BIRTH ì˜ TARGETì— ëŒ€í•œ ìƒê´€ê´€ê³„ê°€ ë†’ì€ íŽ¸ì´ì—ˆìœ¼ë¯€ë¡œ DAYS_BIRTHì˜ íŠ¹ì„±ë„ íŒŒì•…í•´ë³´ê³\xa0ìž í•©ë‹ˆë‹¤', '# In[28]:', '# In[29]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ í™•ì¸', '# In[30]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# #### Feature Engineering', '# ##### apps ì\xa0„ì²´ ë°ì´í„°ì— ëŒ€í•´ì„œ', '# ##### EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ê°€ê³µ', '# ##### AMT_CREDIT ë¹„ìœ¨ë¡œ ê°€ê³µ', '# ##### AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ê°€ê³µ', '# ##### DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ê°€ê³µ', '# In[31]:', '# In[32]:', '    # EXT_SOURCE_X FEATURE ê°€ê³µ', '    # AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ Feature ê°€ê³µ', '    # DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ', '# #### previous_application dataì™€ JOIN', '# ##### SK_ID_CURRë¡œ MERGE', '# In[33]:', '# #### TARGETìœ\xa0í˜•ì— ë”°ë¼ ìˆ«ìží˜• í”¼ì²˜ë“¤ì˜ histogram í™•ì¸', '# In[34]:', '# prev_appì™€ app_trainì„ inner ì¡°ì¸ ==> TARGET ê°’ì€ application_train(app_train) ë°ì´í„°ì—ë§Œ ìžˆìŒ', '# ==> prev_appì•ˆì— TARGET ìœ\xa0í˜•ì— ë”°ë¼ FEATURE í™•ì¸ì„ í•˜ë\xa0¤ë©´ ì¡°ì¸í•\xa0 í•„ìš”ê°€ ìžˆìŒ', ""# app_train[['SK_ID_CURR', 'TARGET']] ë‘ê°€ì§€ ì»¬ëŸ¼ë§Œ ê°–ê³\xa0 ì˜´"", ""# on='SK_ID_CURR' ì»¬ëŸ¼ ê¸°ì¤€ìœ¼ë¡œ ì¡°ì¸"", '# In[35]:', '# In[36]:', '# ìˆ«ìží˜• dtype ê°–ê³\xa0 ìžˆëŠ” ì»¬ëŸ¼ë§Œ ì¶”ì¶œ', '# In[37]:', '# In[38]:', '# In[39]:', '# AMT_ANNUITY, AMT_CREDIT, AMT_APPLICATION, AMT_CREDITëŠ” TARGET=1ì¼ ê²½ìš°ì— ì†Œì•¡ ë¹„ìœ¨ì´ ì•½ê°„ ë†’ìŒ(í° ì°¨ì´ëŠ” ì•„ë‹˜)', '# #### TARGET ìœ\xa0í˜•ì— ë”°ë¼ Category í”¼ì²˜ë“¤ì˜ Histogramì„ ë¹„êµ', '# In[40]:', '# In[41]:', '# ## prev_app dataë¥¼ ì´ìš©í•œ Feature Engineering', '# In[42]:', '# In[43]:', '# prev í”¼ì²˜ ê°€ê³µ / ëŒ€ì¶œ ì‹\xa0ì²\xadì•¡ ëŒ€ë¹„ ë‹¤ë¥¸ ê¸ˆì•¡ ì°¨ì´ ë° ë¹„ìœ¨ ìƒì„±', '# In[44]:', '# DAYS_XXX í”¼ì²˜ì˜ 365243 ì„ NULLë¡œ ë³€í™˜í•˜ê³\xa0, ì²«ë²ˆì§¸ ë§Œê¸°ì¼ê³¼ ë§ˆì§€ë§‰ ë§Œê¸°ì¼ê¹Œì§€ì˜ ê¸°ê°„ ê°€ê³µ', '# ì²«ë²ˆì§¸ ë§Œê¸°ì¼ê³¼ ë§ˆì§€ë§‰ ë§Œê¸°ì¼ê¹Œì§€ì˜ ê¸°ê°„', '# In[45]:', '# In[46]:', '# In[47]:', '     # ê¸°ì¡´ ì»¬ëŸ¼. ', '    # ê°€ê³µ ì»¬ëŸ¼', '# In[48]:', '# In[49]:', '# #### NAME_CONTRACT_STATUS = Refused ì¼ ë•Œ', '# In[50]:', '# In[51]:', '# In[52]:', '# Nullê°’ì„ 0ìœ¼ë¡œ ë³€ê²½', '# SK_ID_CURR ê°œë³„ ê±´ìˆ˜ ëŒ€ë¹„ PREV_REFUSED_COUNT ë¹„ìœ¨ ê³„ì‚°', '# In[53]:', '# ì„¸ë¶€ ë\xa0ˆë²¨ groupby ì™€ unstack()ì„ ì´ìš©í•˜ì—¬ Group by Case êµ¬í˜„ >> ì„¸ë¶€ ì¡°ê±´ì´ 2ê°œ ì´ìƒì¼ë•Œ', '# In[54]:', '# ì»¬ëŸ¼ëª… ë³€ê²½, Null ì²˜ë¦¬, ê·¸ë¦¬ê³\xa0 ê¸°ì¡´ì˜ prev_amt_aggì™€ ì¡°ì¸ í›„ ë°ì´í„° ê°€ê³µ', '# In[55]:', '# In[56]:', '# prev_amt_aggì™€ ì¡°ì¸. prev_amt_aggì™€ prev_refused_appr_agg ëª¨ë‘ SK_ID_CURRì„ INDEXë¡œ ê°€ì§€ê³\xa0 ìžˆìŒ ', '# SK_ID_CURRë³„ ê³¼ê±° ëŒ€ì¶œê±´ìˆ˜ ëŒ€ë¹„ APPROVED_COUNT ë° REFUSED_COUNT ë¹„ìœ¨ ìƒì„±', ""# 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' ì»¬ëŸ¼ drop "", '# prev_amt_aggì™€ prev_refused_appr_agg INDEXì¸ SK_ID_CURRì´ ì¡°ì¸ í›„ ì\xa0•ì‹ ì»¬ëŸ¼ìœ¼ë¡œ ìƒì„±ë¨ ', '# In[ ]:', '# #### ê°€ê³µëœ ìµœì¢… ë°ì´í„°', '# In[57]:', '# ìœ„ì—ì„œ ì´ë¯¸ ê°ì²´ë¥¼ numericìœ¼ë¡œ ë°”ê¿¨ìœ¼ë¯€ë¡œ ë‹¤ì‹œ í•œë²ˆ ë¶ˆëŸ¬ì˜µë‹ˆë‹¤', '# In[58]:', '# In[59]:', '# In[60]:', '# In[61]:', '# In[62]:', '# In[63]:', '# In[64]:', '# In[65]:', '# In[66]:', '# #### bureauë°ì´í„°ì˜ EDA', '# In[67]:', '# TARGET ê°’ì„ ê°€ì\xa0¸ì˜¤ê¸° ìœ„í•´ bureauë¥¼ appsì™€ ì¡°ì¸', '# In[68]:', '# In[69]:', '# Null ê°’ í™•ì¸ ê°€ëŠ¥í•œ ì‚¬ìš©ìž í•¨ìˆ˜ (ë°ì´í„°ì—ì„œ ë¹„ìœ¨)', '# In[70]:', '# Numerical Features(ìˆ«ìží˜• í”¼ì²˜) ê³¼ Categorical Features(ë²”ì£¼/object í”¼ì²˜) êµ¬ë¶„ í•¨ìˆ˜', '# ë‹¤ë¥¸ ë°ì´í„°ì— ì‚¬ìš© ê°€ëŠ¥í•˜ë‹ˆ, ê¸°ë§í”„ë¡œì\xa0íŠ¸ì— ì‚¬ìš©í•´ë„ ì¢‹ì€', '# In[71]:', '# ì‹œê°í™” í•¨ìˆ˜', '    # Rotate x-labels', '# #### Numerical Feature ì‹œê°í™”', '# In[72]:', '# DAYS_CREDIT: í˜„ìž¬ ëŒ€ì¶œ ì‹\xa0ì²\xad ì¼ ê¸°ì¤€ ê³¼ê±° ëŒ€ì¶œ ì‹\xa0ì²\xad ì§€ë‚œ ê¸°ê°„ ë¶„í¬ í™•ì¸', '# CREDIT_DAY_OVERDUE: ëŒ€ì¶œ ì‹\xa0ì²\xad ì‹œ CB í¬ë\xa0ˆë”§ ì—°ì²´ ì¼ìˆ˜', '# DAYS_CREDIT_UPDATE: ëŒ€ì¶œ ì‹\xa0ì²\xadì\xa0„ ë§ˆì§€ë§‰ ì\xa0•ë³´ ë°›ì€ ê¸°ê°„', '# AMT_CREDIT_SUM_LIMIT: ì‹\xa0ìš© ì¹´ë“œ í˜„ìž¬ ì‹\xa0ìš©í•œë„', '# AMT_CREDIT_SUM_DEBT: í˜„ìž¬ ì±„ë¬´ ê¸ˆì•¡ ì´ì•¡', '# AMT_CREDIT_SUM_OVERDUE: ìµœëŒ€ ì—°ì²´ê¸ˆì•¡', '# In[73]:', '# ì‹\xa0ìš©(í¬ë\xa0ˆë”§)ì´ ëª‡ ë²ˆ ì—°ìž¥ì„ í–ˆëŠ”ì§€, ì—°ìž¥ë˜ì—ˆë‹¤ë©´ ì–´ë–¤ ëŒ€ì¶œ type ì¸ì§€ ì•Œì•„ë³´ëŠ” ì‹œê°í™”', '# CNT_CREDIT_PROLONG ì‹\xa0ìš© ì—°ìž¥ íšŸìˆ˜', '# CREDIT_TYPE ëŒ€ì¶œ ìœ\xa0í˜•', '# In[74]:', '# correlated features', '# #### bureau_balance ë°ì´í„° EDA', '# In[75]:', '# In[76]:', '# In[77]:', '# Types of colors', '# Count Plot ', '# #### Bureau Feature Engineering', '# In[78]:', '# bureau_bal ë°ì´í„°ì™€ bureau ë°ì´í„°ì™€ join', '# In[79]:', '# ê³\xa0ê° ë‹¹ ê³¼ê±° ëŒ€ì¶œ ìˆ˜', '# In[80]:', '# ê³\xa0ê° ë‹¹ ê³¼ê±° ëŒ€ì¶œ ìœ\xa0í˜• ìˆ˜', '# In[81]:', '# ê³\xa0ê° ë‹¹ ìœ\xa0í˜•ë³„ í‰ê·\xa0 ê³¼ê±° ëŒ€ì¶œ ìˆ˜ = ê³\xa0ê° ë‹¹ ê³¼ê±° ëŒ€ì¶œ ìˆ˜ / ê³\xa0ê° ë‹¹ ê³¼ê±° ëŒ€ì¶œ ìœ\xa0í˜• ìˆ˜', '# --> ê³\xa0ê°ì´ ë‹¤ì–‘í•œ ìœ\xa0í˜•ì˜ ëŒ€ì¶œì„ ë°›ê±°ë‚˜ ë‹¨ì¼ ìœ\xa0í˜•ì˜ ëŒ€ì¶œì— ì§‘ì¤‘í•˜ê³\xa0 ìžˆëŠ”ì§€ í™•ì¸ê°€ëŠ¥', '# In[82]:', '# í•„ìš”ì—†ëŠ” ì»¬ëŸ¼ì€ ì‚\xadì\xa0œ', '# In[83]:', '# BUREAU ë°ì´í„°ì˜ active ëŒ€ì¶œ ë¹„ìœ¨ (CREDITì´ ACTIVE ë˜ëŠ” CLOSEDì¸ì§€)', '# Closed ì¸ ê²½ìš°ì—ëŠ” yì—ëŠ” 0, ACTIVE ì¸ê²½ìš°ì—ëŠ” Y=1 ', '# CUSTOMER ë‹¹ í™œì„± ìƒíƒœì¸ í‰ê·\xa0 ëŒ€ì¶œ ìˆ˜ ê³„ì‚°', '# ì¤‘ë³µëœ ì»¬ëŸ¼ ì‚\xadì\xa0œ', '# In[84]:', '# bureau ì±„ë¬´ ì™„ë£Œ ë‚\xa0ì§œ ë° ëŒ€ì¶œ ê¸ˆì•¡ ëŒ€ë¹„ ì±„ë¬´ ê¸ˆì•¡ ê´€ë\xa0¨ í”¼ì²˜ ê°€ê³µ', '# ì˜ˆì\xa0• ì±„ë¬´ ì‹œìž‘ ë° ì™„ë£Œì¼ê³¼ ì‹¤ì\xa0œ ì±„ë¬´ ì™„ë£Œì¼ê°„ì˜ ì°¨ì´ ë° ë‚\xa0ì§œ ë¹„ìœ¨ ê°€ê³µ.  ', '# ì±„ë¬´ ê¸ˆì•¡ ëŒ€ë¹„/ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ë° ì°¨ì´ ê°€ê³µ', '# In[85]:', '# ì‹\xa0ìš© ì—°ìž¥ í‰ê·\xa0 íšŸìˆ˜ ', '# #### í•™ìŠµëœ Classifierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡í•˜ê³\xa0 ê²°ê³¼ë¥¼ Kaggleë¡œ Submit ìˆ˜í–‰', '# In[86]:']",198
bigdata-project-eda-fe-seoyeong.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# # ì£¼ìš” ì»¬ëŸ¼ ìƒìœ„ 9ê°œì˜ plotì„ ì‚´íŽ´ë³´ìž', '# In[24]:', '# In[25]:', '# ', '# # ì¼ë¶€ íŠ¹ì„±ë³„ plot (by type of the loan -ì°¸ì¡°-)', '# In[26]:', '    # Calculate the percentage of target=1 per category value', '# In[27]:', '# In[28]:', '# In[29]:', '# previous_application ë¶„ì„', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', ""# 'AMT_CREDIT' ì¹¼ëŸ¼ìœ¼ë¡œ groupby"", '# In[35]:', '# In[36]:', ""# 'SK_ID_CURR' ì¹¼ëŸ¼ìœ¼ë¡œ groupby"", '# In[37]:', '# In[38]:', '    # EXT_SOURCE_X FEATURE ê°€ê³µ', '    # AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ Feature ê°€ê³µ', '    # DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# In[47]:']",70
bigdata-project-eda-fe-shyeon43.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# **í•„ìš”í•œ ëª¨ë“ˆ importì™€ app ë°ì´í„° ì„¸íŠ¸ ë¡œë”©**', '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# traing ë°ì´í„°', '# In[4]:', '# testing ë°ì´í„°', '# # **Application_train ì— ëŒ€í•œ EDA**', '# **ê²°ì¸¡ì§€ í™•ì¸í•˜ê¸°**', '# In[5]:', '    mis_val=df.isnull().sum() # ì\xa0„ì²´ ê²°ì¸¡ì¹˜ ê°œìˆ˜ í™•ì¸', '    mis_val_percent=100*df.isnull().sum()/len(df) # ê²°ì¸¡ë¥\xa0', '    mis_val_table=pd.concat([mis_val, mis_val_percent],axis=1) # ê²°ì¸¡ì¹˜ ê°œìˆ˜ & ê²°ì¸¡ë¥\xa0 í…Œì´ë¸” ë§Œë“¤ê¸°', ""    mis_val_table_ren_columns=mis_val_table.rename(columns={0:'Total',1:'Percent'}) # ì»¬ëŸ¼ ì´ë¦„ë°”ê¾¸ê¸°"", '    # ê²°ì¸¡ì¹˜ 0ì¸ ì»¬ëŸ¼ì€ ì\xa0œì™¸í•˜ê³\xa0 ì\xa0•ë\xa0¬', '         ""ê·¸ ì¤‘ì—ì„œ ê²°ì¸¡ì¹˜ê°€ ìžˆëŠ” ì»¬ëŸ¼ ê°œìˆ˜ëŠ” ""+str(mis_val_table_ren_columns.shape[0])+\'ê°œ ì´ë‹¤.\') # ìš”ì•½ ê²°ê³¼ print', '# In[6]:', 'mis_values = missing_values(app_train) # ê²°ì¸¡ì§€ í™•ì¸ í•¨ìˆ˜ ì‹¤í–‰', '# In[7]:', 'app_train.isnull().sum() # ì\xa0„ì²´ ì»¬ëŸ¼ ê°œìˆ˜ëŠ” 122ê°œ, ê²°ì¸¡ì§€ê°€ ìžˆëŠ” ì»¬ëŸ¼ì€ ì´ 67ê°œ', '# In[8]:', 'mis_values = missing_values(app_test) # ê²°ì¸¡ì§€ í™•ì¸ í•¨ìˆ˜ ì‹¤í–‰', '# In[9]:', 'app_test.isnull().sum() # ì\xa0„ì²´ ì»¬ëŸ¼ ê°œìˆ˜ëŠ” 121ê°œ, ê²°ì¸¡ì§€ê°€ ìžˆëŠ” ì»¬ëŸ¼ì€ ì´ 64ê°œ', '# **Target ì»¬ëŸ¼ì˜ ë¶„í¬**', '# In[10]:', ""app_train['TARGET'].value_counts() # value ê°’ count"", '# In[11]:', ""app_train['TARGET'].astype(int).plot.hist(); # ë¶ˆê·\xa0í˜• ë°ì´í„°ë¼ëŠ” ê²ƒì„ ì•Œ ìˆ˜ ìžˆìŒ"", '# **ì¹¼ëŸ¼ Types**', '# ', '# int64, float64: ìˆ˜ì¹˜í˜• ë³€ìˆ˜ & object íƒ€ìž…: ë²”ì£¼í˜• ë³€ìˆ˜', '# ', '# In[12]:', '# In[13]:', 'app_train.dtypes.value_counts() # value ê°’ count', '# In[14]:', ""app_train.select_dtypes('object').apply(pd.Series.nunique, axis = 0) # object íƒ€ìž…ì¤‘ì—ì„œ uniqueí•œ ê°œìˆ˜ í™•ì¸"", '# > name_contract_type 2ê°œ ë‚˜ì™”ìœ¼ë¯€ë¡œ uniqueí•œ ê°’ 2ê°œ', '# **ì—°ì†í˜• ìˆ«ìž featureë“¤ì— ëŒ€í•œ TARGETê°’ì´ ê°ê° 0ê³¼ 1ì¼ë•Œ Histogram ì‹œê°í™”**', '# In[15]:', ""    cond_1 = (df['TARGET'] == 1) # targetì´ 1ì¼ ë•Œ"", ""    cond_0 = (df['TARGET'] == 0) # targetì´ 0ì¼ ë•Œ"", '        fig, ax = plt.subplots(figsize=(12, 4), nrows=1, ncols=2, squeeze=False) # plot ìƒì„±', ""        sns.distplot(df[cond_1][column], label='1', color='red', ax=ax[0][1]) # target 1ì¼ ë•Œ"", ""        sns.distplot(df[cond_0][column], label='0', color='blue', ax=ax[0][1]) # target 2ì¼ ë•Œ"", '# In[16]:', '# Feature Importances ì—ì„œ ì¤‘ìš”í•˜ê²Œ ë‚˜ì™”ë˜ ì¹¼ëŸ¼ë§Œ ê°€ì\xa0¸ì˜´', '# > * EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ì¡°ê¸ˆì”© ëª¨ë‘ ì°¨ì´ê°€ ìžˆìŒ', '# > * ì´ ê°’ì„ 3ì°¨ì› ë‹¤í•\xadì‹ìœ¼ë¡œ í™•ìž¥', '# # ì¹´í…Œê³\xa0ë¦¬ í”¼ì²˜ë¥¼ TARGETì˜ ìœ\xa0í˜•ì— ë”°ë¼ ë¹„êµ', '# ì—°ì†í˜•ì€ histplotìœ¼ë¡œ ë‚˜íƒ€ë‚´ê³\xa0 ì¹´í…Œê³\xa0ë¦¬í˜•ì€ countplot ì‚¬ìš©', '# In[17]:', ""cate_col = app_train.dtypes[app_train.dtypes == 'object'].index.tolist() # object íƒ€ìž… ì»¬ëŸ¼ë§Œ ì¶”ì¶œ"", '# In[18]:', 'def show_category_by_target(df, columns): # ì‹œê°í™”ë¡œ ë³´ì—¬ì£¼ëŠ” í•¨ìˆ˜ ìƒì„±', ""        chart = sns.catplot(x=column, col='TARGET', data=df, kind='count') # ì¹¼ëŸ¼ë³„ë¡œ count"", 'show_category_by_target(app_train, cate_col) # app_train ë°ì´í„°ì—ì„œ object íƒ€ìž…ì¼ ë•Œë§Œ ì‹œê°í™”', '# **ëŒ€ì¶œ íšŸìˆ˜ ëŒ€ë¹„ ì—°ì²´ ë¹„ìœ¨ì˜ ì°¨ì´**', '# In[19]:', '# DAYS_BIRTHì˜ ì\xa0ˆëŒ€ê°’ê³¼ TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê³„ìˆ˜', '# ê³\xa0ê°ì˜ ë‚˜ì´ê°€ ë§Žì„ìˆ˜ë¡ ëŒ€ì¶œì„ ìƒí™˜í•\xa0 ê°€ëŠ¥ì„±ì´ ë†’ìŒ', '# In[20]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ í™•ì¸', '# In[21]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# * ë‚¨ì„±ì´ ì—¬ì„±ë³´ë‹¤ ë†’ìŒ', '# # ì£¼ìš” ì»¬ëŸ¼ë“¤ê³¼ TARGETì˜ ìƒê´€ë„ ë¶„ì„', '# In[22]:', ""               'DAYS_EMPLOYED','DAYS_ID_PUBLISH', 'DAYS_REGISTRATION', 'DAYS_LAST_PHONE_CHANGE', 'AMT_INCOME_TOTAL', 'TARGET'] # ì£¼ìš” ì»¬ëŸ¼ ì¶”ì¶œ"", 'Im_col = app_train[T_columns].corr() # ì£¼ìš” ì»¬ëŸ¼ë§Œ ê°€ì§€ê³\xa0 ìžˆëŠ” ë°ì´í„° ì…‹ ìƒì„±', '# In[23]:', '# ì‹œê°í™”', '# # ë°ì´í„° ë³‘í•©', '# In[24]:', '# TARGETë³€ìˆ˜ëŠ” trainë°ì´í„°ì—ë§Œ ìžˆì§€ë§Œ í•„ìš”í•œ ë³€ìˆ˜ì´ê¸°ë•Œë¬¸ì— ë‹¤ì‹œ ì¶”ê°€', '# train ë°ì´í„°ì™€ test ë°ì´í„°ì— ë‘˜ë‹¤ ìžˆëŠ” ì»¬ëŸ¼ë“¤ì˜ ê°’ë§Œ ê°€ì\xa0¸ì˜´', '# TARGETë³€ìˆ˜ ë‹¤ì‹œ ì¶”ê°€', '# # ì´ìƒì¹˜ ë°ì´í„° í™•ì¸ ë° ë³€ê²½', '# In[25]:', ""(app_train['DAYS_BIRTH'] / -365).describe() # ì´ìƒì¹˜ ì—†ìŒ"", '# In[26]:', ""app_train['DAYS_EMPLOYED'].describe() # ì´ìƒì¹˜ ìžˆìŒ"", '# In[27]:', ""plt.xlabel('Days Employment'); # ì´ìƒì¹˜ ê³\xa0ê° ë”°ë¡œ ë¹¼ì„œ ëŒ€ì¶œ ìƒí™˜ ë¹„ìœ¨ ë¶„ì„"", '# In[28]:', ""anom=app_train[app_train['DAYS_EMPLOYED']==365243] # ì´ìƒì¹˜ì¸ ê²ƒ"", ""non_anom=app_train[app_train['DAYS_EMPLOYED']!=365243] # ì´ìƒì¹˜ ì•„ë‹Œ ê²ƒ "", '# ì´ìƒì¹˜ë¡œ ë³´ì´ëŠ” ê³\xa0ê°ë“¤ì€ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í•\xa0 í™•ë¥\xa0ì´ 5.4% ë‚®ìŒ', '# In[29]:', '# ì´ìƒì¹˜(365243)ì¸ ê°’ì— ëŒ€í•´ì„œ True , Falseë¡œ êµ¬ë¶„', '# ì´ìƒì¹˜ë¥¼ nanê°’ìœ¼ë¡œ ëŒ€ì¹˜', '# In[30]:', '# test ë°ì´í„°ì—ë„ train ë°ì´í„°ì™€ ë™ì¼í•˜ê²Œ ìž‘ì—…', '# # EXT_SOURCE ë¶„ì„', '# In[31]:', '# í•„ìš” ë°ì´í„°ë§Œ ë”°ë¡œ ì¶”ì¶œ', '# In[32]:', '# ì‹œê°í™”', '# > *  EXT_SOURCEê³¼ TARGET ë³€ìˆ˜ëŠ” ìŒì˜ ê´€ê³„: EXT_SOURCEê°’ì´ ì¦ê°€í•˜ë©´ ëŒ€ì¶œ ìƒí™˜ë¥\xa0 ë†’ìŒ', '# > * source_1ê³¼ DAYS_BIRTH ì—°ê´€ì„± ë†’ìŒ', '# In[33]:', '# ì‹œê°í™”', ""sns.kdeplot(app_train.loc[app_train['TARGET']==0, 'EXT_SOURCE_1'],label='target==0') # target=0"", ""sns.kdeplot(app_train.loc[app_train['TARGET']==1, 'EXT_SOURCE_1'],label='target==1'); # target=1"", '# In[34]:', '# source_1, 2, 3 ì‹œê°í™”', '# * source_3ì´ TARGET ê°’ì— ë”°ë¼ ì°¨ì´ê°€ ê°€ìž¥ í¼', '# In[ ]:', '# # ì£¼ìš” Featureë“¤ì— ëŒ€í•œ FE1', '# In[35]:', '# null ê°’ í™•ì¸', '# In[36]:', ""app_train['EXT_SOURCE_1'].value_counts(dropna=False) # value ê°’ count & ìœ\xa0ì¼ê°’ì— NaNê°’ í¬í•¨"", '# In[37]:', ""app_train['EXT_SOURCE_2'].value_counts(dropna=False) # value ê°’ count & ìœ\xa0ì¼ê°’ì— NaNê°’ í¬í•¨"", '# In[38]:', ""app_train['EXT_SOURCE_3'].value_counts(dropna=False) # value ê°’ count & ìœ\xa0ì¼ê°’ì— NaNê°’ í¬í•¨"", '# **ë°ì´í„° ê°€ê³µ ì\xa0„ í•™ìŠµê³¼ í…ŒìŠ¤íŠ¸ìš© ë°ì´í„° ê²°í•©**', '# In[39]:', 'apps = pd.concat([app_train, app_test]) # train ë°ì´í„°ì™€ test ë°ì´í„° ê²°í•©', '# **source í”¼ì³ ê²°í•©í•˜ì—¬ ìƒˆë¡œìš´ ì»¬ëŸ¼ ìƒì„±**', '# In[40]:', '# EXT_SOURCE_X í”¼ì²˜ë“¤ì˜ í‰ê·\xa0/ìµœëŒ€/ìµœì†Œ/í‘œì¤€íŽ¸ì°¨ í™•ì¸ ', '# In[41]:', ""apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].head() # ë°ì´í„° ì…‹ í™•ì¸"", '# In[42]:', '# ìƒê´€ê´€ê³„ê°€ ë†’ì€ ê²ƒì— ëŒ€í•´ ë„ˆë¬´ ê°€ê³µí•˜ë©´ ì„±ëŠ¥ì´ ì˜¤ížˆë\xa0¤ ë–¨ì–´ì§ˆ ìˆ˜ ìžˆìœ¼ë¯€ë¡œ max, min ë§ê³\xa0  meanê³¼ std ë§Œ ì‹¤í–‰', '# In[43]:', ""apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APPS_EXT_SOURCE_STD']].head(10) # ê°€ê³µ ë°ì´í„° í™•ì¸"", '# In[44]:', ""apps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean()) # ê²°ì¸¡ê°’ ì±„ìš°ê¸°"", '# **Feature ê°€ê³µ**', '# In[45]:', '# AMT_CREDIT ìœ¼ë¡œ Feature ê°€ê³µ', '# In[46]:', '# AMT_INCOME_TOTAL ìœ¼ë¡œ Feature ê°€ê³µ', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ í”¼ì²˜ ê°€ê³µ', '# ê°€ì¡±ìˆ˜ë¥¼ ê³\xa0ë\xa0¤í•œ ê°€ì²˜ë¶„ ì†Œë“ í”¼ì²˜ ê°€ê³µ. ', '# In[47]:', '# DAYS_BIRTH, DAYS_EMPLOYED ìœ¼ë¡œ Feature ê°€ê³µ', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ. ', '# In[48]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©, NULLê°’ì€ LightGBM ë‚´ë¶€ì—ì„œ ì²˜ë¦¬í•˜ë„ë¡ íŠ¹ë³„í•œ ë³€ê²½í•˜ì§€ ì•ŠìŒ.', '# **í•™ìŠµ ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ë‹¤ì‹œ ë¶„ë¦¬**', '# In[49]:', '# **LGBM í•™ìŠµ**', '# In[50]:', '# In[51]:', '# In[52]:', '# **í•™ìŠµëœ Classifierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡í•˜ê³\xa0 ê²°ê³¼ë¥¼ Kaggleë¡œ Submit ìˆ˜í–‰**', '# In[53]:', '# In[54]:', '# In[ ]:', '# # **FE2**', '# **ì¸ì½”ë”©**', '# In[55]:', '# í•„ìš”í•œ ëª¨ë“ˆ import', '# ì»¬ëŸ¼ë³„ë¡œ iterate', '        # ë°ì´í„°íƒ€ìž…ì´ objectì´ê³\xa0 ê°’ì˜ ì¢…ë¥˜ê°€ ë‘ê°œ ì´í•˜ì¼ê²½ìš° (ìœ„ì— type ì•Œì•„ë³¼ë•Œ uniqueí•œ ê°’ 2ê°œ)', '            # trainê³¼ testì— ë™ì¼í•˜ê²Œ ë¼ë²¨ì¸ì½”ë”©ì„ í•˜ê¸°ìœ„í•´ trainê¸°ì¤€ìœ¼ë¡œ fit', '            # train-set, test-set Transform', '            # ë¼ë²¨ì¸ì½”ë”©ì„ í•œ ì»¬ëŸ¼ì´ ëª‡ê°œì¸ì§€ ì¹´ìš´íŠ¸', '# In[56]:', '# Label-encodingì\xa0ìš© ì•ˆí•œ ë‚˜ë¨¸ì§€ ë²”ì£¼í˜• ë³€ìˆ˜ì— One-hot encoding ì\xa0ìš©', '# **í•„ìš”í•œ ë°ì´í„° ì¶”ì¶œ**', '# In[57]:', '# polynomial featuresë¡œ ìƒˆë¡œìš´ ë°ì´í„° ì…‹ ìƒì„±', '# ê²°ì¸¡ì¹˜ ì²˜ë¦¬ë¥¼ ìœ„í•œ import', ""imputer = SimpleImputer(strategy='median') # ì¤‘ê°„ê°’ìœ¼ë¡œ ëŒ€ì²´"", '# target ë½‘ì•„ë‚´ê³\xa0 ì§€ìš´ ë’¤ null ë°ì´í„° imuter', '# ìƒˆë¡œìš´ ë°ì´í„°ì˜ nullê°’ ëŒ€ì²´', '# In[58]:', 'poly_ft_train # imputer ì\xa0ìš© í›„ ëª¨ìŠµ', '# In[59]:', 'poly_ft_test # imputer ì\xa0ìš© í›„ ëª¨ìŠµ', '# In[60]:', '# 3ì°¨ì› ë‹¤í•\xadì‹ìœ¼ë¡œ ë§Œë“¤ê¸°', '# In[61]:', '# trainë°ì´í„° ê¸°ì¤€ìœ¼ë¡œ fit', '# featuresë¥¼ transform', '# In[62]:', 'poly_ft_train # transform ì\xa0ìš© í›„ ëª¨ìŠµ', '# In[63]:', '# ìƒê¸´ ì¹¼ëŸ¼ ë¬´ì—‡ì¸ì§€ í™•ì¸', '# > * degreeë¥¼ 3ìœ¼ë¡œ ì„¤ì\xa0•í•˜ë©´ 1ì°¨ì›, 2ì°¨ì›, 3ì°¨ì› ë‹¤í•\xadì‹ì— ë”°ë¥¸ ê°’ì„ ì¶”ê°€í•´ì¤Œ', '# **ìƒˆë¡œìš´ featureê³¼ targetì˜ ìƒê´€ê´€ê³„ ë¶„ì„**', '# In[64]:', '# features ì˜ ë°ì´í„° í”„ë\xa0ˆìž„ ìƒì„±', '# TARGETë³€ìˆ˜ ë‹¤ì‹œ ì¶”ê°€', '# TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê´€ê³„ í™•ì¸ (corr ì‚¬ìš©)', '# ë°ì´í„°ì˜ ì•ž ë¶€ë¶„ê³¼ ë’· ë¶€ë¶„ ë³´ê¸°', '# In[65]:', '# Put test features into dataframe', '# ì›ë³¸ train ë°ì´í„°ì— ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ mergeí•´ì„œ ìƒˆë¡œìš´ ë°ì´í„°ì…‹ ë§Œë“¤ê¸°', '# ì›ë³¸ test ë°ì´í„°ì— ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ mergeí•´ì„œ ìƒˆë¡œìš´ ë°ì´í„°ì…‹ ë§Œë“¤ê¸°', '# Align the dataframes => trainë°ì´í„°ì…‹ ê¸°ì¤€ìœ¼ë¡œ align ', '# Print out the new shapes', '# In[66]:', '# ì¶”ì¶œí•œ ê°’ test ë°ì´í„°ì— merge', '# ì›ë³¸ train ë°ì´í„°ì— SK_ID_CURR ê°€ì\xa0¸ì˜¤ê³\xa0 ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ join', '# ì›ë³¸ test ë°ì´í„°ì— SK_ID_CURR ê°€ì\xa0¸ì˜¤ê³\xa0 ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ join', '# trainë°ì´í„°ì…‹ ê¸°ì¤€ìœ¼ë¡œ align ', '# shape í™•ì¸', '# In[67]:', '# í…ŒìŠ¤íŠ¸ ì‹¤í–‰í•˜ê¸° ìœ„í•´ ë³µì‚¬í•˜ì—¬ ì§„í–‰', '# trainë°ì´í„°ì— ìƒˆë¡œìš´ ë³€ìˆ˜ ì¶”ê°€', '# In[68]:', '# testë°ì´í„°ì— ìƒˆë¡œìš´ ë³€ìˆ˜ ì¶”ê°€', '# In[69]:', '# domain ê¸°ë°˜ìœ¼ë¡œ ê·¸ëž˜í”„ ìƒì„±', ""    sns.kdeplot(app_train_domain.loc[app_train_domain['TARGET']==0,feature],label='target==0') # target=0"", ""    sns.kdeplot(app_train_domain.loc[app_train_domain['TARGET']==1,feature],label='target==1') # target=1"", '# > * targetì— ë”°ë¥¸ ë³€ìˆ˜ì˜ ë¶„í¬ê°€ í° ì°¨ì´ê°€ ì—†ìŒ', '# In[ ]:', '# In[ ]:']",229
bigdata-project-eda-jisun.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# Application_traion ë°ì´í„° featureí™•ì¸', '# In[5]:', '# Testing data features í™•ì¸', '# # EDA', '# ### Examine the distribution of the target cloumns', '# In[6]:', '# In[7]:', '# ### Examing Missing Values', '# In[8]:', '# In[9]:', '# ### column type', '# In[10]:', '# In[11]:', '# object type ì¤‘ uniqueí•œ ê°œìˆ˜ íŒŒì•…', '# ### encoding categorical variables', '# In[12]:', '# ìœ\xa0ë‹ˆí¬í•œ ê°œìˆ˜ê°€ 2ê°œ ì´í•˜ì´ë©´, labelencoderë¡œ ì¸ì½”ë”©.', '# 2ê°œ ì´ˆê³¼ì´ë©´, pd.get_dummiesë¡œ one-hot-encoding', '# In[13]:', '# one-hot-encoding', '# In[14]:', '# trainê³¼ testì˜ ê°œìˆ˜ê°€ ë‹¬ë¼ì§. get_dummiesê³¼ì\xa0•ì„ ê±°ì³ì„œ ê·¸ëŸ°ë“¯.', '# In[15]:', '# ë‹¬ë¼ì§„ ì»¬ëŸ¼ í™•ì¸', '# In[16]:', '# ### Aligning Training and Test data', '# In[17]:', '# í…ŒìŠ¤íŠ¸ë¥¼ ê¸°ì¤€ìœ¼ë¡œ trainì„ ì\xa0•ë\xa0¬', ""train_labels = app_train['TARGET'] # íƒ€ê²Ÿ ë°ì´í„° ë¯¸ë¦¬ ë¹¼ë†“ê¸°"", '# In[18]:', '# ### ì´ìƒì¹˜ anomalies', '# In[19]:', '# In[20]:', '# In[21]:', ""# ëŒ€ì¶œ ìƒí™˜ê³¼ ì§ì\xa0‘ì\xa0ì¸ ê´€ë\xa0¨ì´ ìžˆì„ ê²ƒ ê°™ì€ 'DAYS_EMPLOYED'ì‚´í”¼ê¸°"", ""app_train['DAYS_EMPLOYED'].describe() # ë\xad”ê°€ ì´ìƒí•˜ë‹¤."", '# In[22]:', '# In[23]:', '# 365243ì´ë¼ëŠ” ê°’ì´ ë\xad˜ê¹Œ', '# In[24]:', '# 365243ì¸ ê°’ë“¤ë§Œ ë¹¼ì„œ targetê³¼ì˜ ì—°ê´€ì„±ì„ ë³´ì•˜ë‹¤.', '# ì´ìƒì¹˜ê°€ ìžˆëŠ” ê²½ìš° ì—†ëŠ” ê²½ìš°ë³´ë‹¤ loaní‰ê·\xa0ì´ ë” ë‚®ë‹¤. ì¦‰, ìƒí™˜ìœ¨ì´ ë” ì¢‹ë‹¤. ', '# In[25]:', '# ### ì´ìƒì¹˜ ê°’ë“¤ì„ DAYS_EMPLOYED_ANOMì»¬ëŸ¼ìœ¼ë¡œ ë”°ë¡œ ë¹¼ì£¼ê¸°', '# ì´ìƒì¹˜ê°€ ìžˆëŠ” ê²½ìš° ìƒí™˜ìœ¨ì´ ë” ì¢‹ê¸° ë•Œë¬¸ì— ìœ\xa0ì˜ë¯¸í•˜ë‹¤ê³\xa0 ëŠê»´ì§„ë‹¤.', '# In[26]:', '# In[27]:', '# 365243ì¸ ê°’ë“¤ì„np.nan(NaNê°’)ìœ¼ë¡œ ë„£ì–´ì£¼ê³\xa0 histë¥¼ ë³´ë‹ˆ ì\xa0•ìƒì\xa0ì¸ ížˆìŠ¤í†\xa0ê·¸ëž¨ ì¶œë\xa0¥', '# In[28]:', '# app_testë°ì´í„°ë„ ', '# ### ì—°ê´€ì„± correlation', '# In[29]:', '# TARGETê³¼ì˜ ì—°ê´€ì„± ë³´ê¸°', '# ê¸ì\xa0• ì—°ê´€ì„±ì—ëŠ” DAYS_BIRTH ë“±, ë¶€ì\xa0• ì—°ê´€ì„±ì—ëŠ” EXT_SOURCE_1,2,3 ë“±', '# In[30]:', '# DAYS_BIRTH', ""app_train['DAYS_BIRTH'] = abs(app_train['DAYS_BIRTH']) # ì\xa0ˆëŒ€ê°’ ì·¨í•˜ê¸°"", ""app_train['DAYS_BIRTH'].corr(app_train['TARGET']) # ì\xa0ˆëŒ€ê°’ ì·¨í•˜ê³\xa0 ë³´ë‹ˆ negative"", '# In[31]:', '# In[32]:', '# ì—°ë\xa0¹ëŒ€ë³„ ë¹ˆë„ìˆ˜ ížˆìŠ¤í†\xa0ê·¸ëž¨ìœ¼ë¡œ ë³´ê¸°', '# In[33]:', '# In[34]:', '# ì—°ë\xa0¹ëŒ€ë³„ êµ¬ê°„ ë‚˜ëˆ„ê¸° 10ê°œë¡œ', '# In[35]:', '# ì—°ë\xa0¹ëŒ€ë³„ TARGETë¹„ìœ¨', '# In[36]:', '# ì—°ë\xa0¹ëŒ€ê°€ ì–´ë¦´ìˆ˜ë¡ ìƒí™˜ì„ ëª»í•˜ëŠ” ê²½ìš°ê°€ ë§Žë‹¤!', '# In[37]:', '# EXT_SOURCE_1,2,3', '# In[38]:', '# EXT_SOURCE_1ê³¼ DAYS_BIRTHì˜ ì—°ê´€ì„±ì´ ë†’ë‹¤.', '# In[39]:', '# TARGETì— ë”°ë¥¸ EXT_SOURCE_1,2,3ì»¬ëŸ¼ ì‹œê°í™”', '# EXT_SOURCE_1,3ì´ TARGETì— ë”°ë¥¸ ëª¨ì–‘ì´ ë‹¤ë¥´ë‹¤. ì¦‰, TARGETì— ì˜í–¥ì„ ë°›ëŠ” ê²ƒ ê°™ë‹¤.', '# # bureauë°ì´í„°ë¥¼ ê°€ì§€ê³\xa0 ëª¨ë¸ ë§Œë“¤ê¸°', '# bureau.csv: ê³\xa0ê°ì´ ì´ ê³³ì—ì„œ ëŒ€ì¶œí•˜ê¸° ì\xa0„ì— ë‹¤ë¥¸ ê¸ˆìœµ ê¸°ê´€ì—ì„œ ëŒ€ì¶œí–ˆë˜ ë‚´ì—\xadì— ê´€í•œ ë°ì´í„°', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# SK_ID_CURRë¥¼ ê¸°ì¤€ìœ¼ë¡œ SK_ID_BUREAUê°’ì´ ëª‡ ë²ˆ ë‚˜ì™”ëŠ”ì§€ ë³´ê¸°', '# In[44]:', '# ì»¬ëŸ¼ëª… ë³€ê²½ ë” ì§ê´€ì\xa0ìœ¼ë¡œ.. SK_ID_BUREAU -> previous_loan_counts', '# In[45]:', '# In[46]:', '# ### seabornì˜ kdeplotì´ìš©í•˜ì—¬ í•´ë‹¹ ì»¬ëŸ¼ì˜ ë°€ë„ ë³´ê¸°', '# ##### .iloc', '# integer positionì„ í†µí•´ ê°’ì„ ì°¾ì„ ìˆ˜ ìžˆë‹¤. ë¼ë²¨X', '# ##### .loc', '# ë¼ë²¨ì„ í†µí•´, integer positionX', '# In[47]:', '# In[48]:', '# In[49]:', '# íŠ¹ë³„í•œ ê²ƒì€ ì°¾ì§€ ëª»í•¨..', '# ### Numeric ë°ì´í„° ë³´ê¸°: Aggregation Numeric Columns', '# In[50]:', ""# bureauë°ì´í„°ë¥¼ 'SK_ID_CURR'ë³„ë¡œ ë¬¶ê³\xa0 í†µê³„ê°’ì„ ë³¸ë‹¤. ê·¸ë¦¬ê³\xa0 'SK_ID_BUREAU'ëŠ” ë“œëžì‹œí‚¨ë‹¤."", '# In[51]:', '# í–‰ì´ ë‘ì¤„ë¡œ ë˜ì–´ìžˆë‹¤. -> levels[0]/ levels[1]', '# max, minë“±ì´ ë‚˜ì˜¬ ìˆ˜ ìžˆëŠ” numeric type columnsë§Œ ë‚˜ì˜´', '# In[52]:', ""# ì´ì¤‘ì»¬ëŸ¼ì€ ë¶ˆíŽ¸í•˜ê¸° ë•Œë¬¸ì— 'ê¸°ì¡´ ì»¬ëŸ¼+level1'ì´ë¼ëŠ” ì´ë¦„ìœ¼ë¡œ ì»¬ëŸ¼ëª… ì¶”ê°€"", '# In[53]:', '# In[54]:', '# In[55]:', 'bureau_agg.head() # ìƒˆë¡œìš´ ì»¬ëŸ¼ ì„¸íŒ… ì™„ë£Œ', '# In[56]:', '# trainì— í•©ì³ì£¼ê¸°', '# In[57]:', '# In[58]:', '# ìƒˆë¡\xadê²Œ ë§Œë“¤ì–´ì§„ ì»¬ëŸ¼ìœ¼ë¡œ corrê°’ ë³´ê¸°', '# In[59]:', '# In[60]:', '# ì—°ê´€ì„±ì´ ë†’ì€ ìˆœì„œëŒ€ë¡œ ì\xa0•ë\xa0¬', '# In[61]:', ""# ì—°ê´€ì„±ì´ ê°€ìž¥ ë†’ì€ 'bureau_DAYS_CREDIT_mean'ì‹œê°í™”"", '# ### Function for Numeric Aggregations', '# ìœ„ì—ì„œ í•œ ê³¼ì\xa0•ì„ í•¨ìˆ˜ë¡œ ë§Œë“¤ê¸°: ìƒˆë¡œìš´ ì»¬ëŸ¼ ì¶”ê°€', '# In[62]:', '        # colì´ group_varë„ ì•„ë‹Œë°, SK_IDë¼ëŠ” ê¸€ìžê°€ ìžˆìœ¼ë©´ drop', ""        numeric_df = df.select_dtypes('number') # dtypeì´ numberì¸ ê²ƒë§Œ ê°€ì\xa0¸ì˜¤ê¸°"", '# In[63]:', '# In[64]:', '# ë¹„êµí•´ë³´ë©´ í•¨ìˆ˜ë¡œ ì•žì„œ í•œ ë˜‘ê°™ì€ ê³¼ì\xa0•ì„ ìž˜ ë§Œë“\xa0 ê²ƒì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤. ', '# ### Correlation Function', '# ìœ„ì—ì„œí•œ ê³¼ì\xa0•ì„ í•¨ìˆ˜ë¡œ ë§Œë“¤ê¸° : corrêµ¬í•˜ê¸°', '# In[65]:', '# ### categorical ë°ì´í„° ë³´ê¸°', '# In[66]:', '# ë§Œì•½ 1ë²ˆ SK_ID_CURRìœ\xa0ì\xa0€ê°€ loan_typeì´ 3ê°œì˜ homeê³¼ 1ê°œì˜ creditì´ ìžˆë‹¤...ì´ëŸ° ê²ƒë“¤ ì¹´ìš´íŒ…í•´ì£¼ëŠ” ê²ƒ', '# In[67]:', '# In[68]:', '# ì—¬ê¸°ì„œë„ ì—´ì´ levels[0], levels[1]ë¡œ ë‚˜ë‰¨', '# In[69]:', '# In[70]:', '# ì´ì¤‘ì»¬ëŸ¼ ëŒ€ì‹\xa0 ìƒˆë¡œìš´ ì»¬ëŸ¼ ë§Œë“¤ê¸°', '# In[71]:', '# numericalê³¼ëŠ” ë‹¤ë¥´ê²Œ indexê°’ì´ SK_ID_CURRë¡œ ë“¤ì–´ê°€ìžˆì–´ right_indexì™€ left_onì„ í•´ì¤€ë‹¤.', '# In[72]:', '# í•¨ìˆ˜ë¡œ ë§Œë“¤ì–´ì£¼ê¸°', '# In[73]:', '# ### bureau_balance.csv í™œìš©', '# ë¶„í•\xa0ìƒí™˜ ë°ì´í„°', '# In[74]:', '# In[75]:', '# In[76]:', '# ì•žì„œ ë§Œë“\xa0 í•¨ìˆ˜ë¡œ bureau_balanceì— categoricalë°ì´í„°ë¥¼ ë‚˜ëˆ„ì–´ ìƒˆë¡œìš´ ì»¬ëŸ¼ìœ¼ë¡œ ì¶”ê°€ ', '# In[77]:', '# In[78]:', '# numericë°ì´í„°ë„ ì•žì„œ ë§Œë“\xa0 í•¨ìˆ˜ë¡œ ì²˜ë¦¬', '# In[79]:', '# In[80]:', '# bureau_balance_countsì™€ bureau_balance_aggí•©ì¹˜ê¸°', 'bureau_by_loan.head() # 16+6=22ê°œì˜ ì»¬ëŸ¼', '# In[81]:', '# In[82]:', '# ### ë‹¤ì‹œ ì\xa0•ë¦¬í•´ë³¸ë‹¤.', '# 1. bureau, bureau_balance ë°ì´í„° ë‹¤ì‹œ ë¶ˆëŸ¬ì„œ ì\xa0•ë¦¬í•˜ê¸°', '# 2. ìœ„ì˜ ë‚´ìš© trainì— í•©ì³ì£¼ê¸°', '# 3. missing value ì\xa0•ë¦¬í•´ì£¼ê¸°', '# 4. test data', '# 5. ê²°ê³¼ì˜ˆì¸¡', '# In[83]:', '# In[84]:', '# In[85]:', '# In[86]:', '# ## trainì— í•©ì³ì£¼ê¸°', '# In[87]:', '# In[88]:', '# In[89]:', '# In[90]:', '# In[91]:', '# ### Missing Values ì²˜ë¦¬', '# In[92]:', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[93]:', '# In[94]:', '# ### Test data ', '# In[95]:', '# Read in the test dataframe', '# Merge with the value counts of bureau', '# Merge with the stats of bureau', '# In[96]:', '# In[97]:', ""# Align the dataframes, this will remove the 'TARGET' column"", '# In[98]:', '# In[99]:', '# In[100]:', '# In[101]:', '# In[102]:', '# Drop the missing columns', '# In[103]:', '# In[104]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©', '# In[105]:', '# In[106]:', '# In[107]:', '# In[108]:', '# In[109]:', '# In[110]:', '# In[111]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",226
blend-boosting-for-home-credit-default-risk (1).py,"['# coding: utf-8', '# ## an Empirical Blend Boosting Study for Home Credit Default Risk ', '# ### **(as my first notebook share on Kaggle)', '# ', '# During Jan-Apr of 2021 I have attended an intense bootcamp program focusing mainly on Data Science and Machine Learning. The bootcamp is organized by VBO (https://www.veribilimiokulu.com/), and I would like to thanks to the VBO Team (especially Mustafa Vahit Keskin, Attilla Yardimci and my group members).', '# ', '# The Home Credit Default Risk dataset on the Kaggle is subjected as final project of the bootcamp, and I have spent a period of three weeks on this project personally and also with my sub-team members. I developed various models and quite a large number of them having AUC scores better than 0.8 ( highest one 0.8034). Unfortunately, I could not run any full version of my models on Kaggle because of insufficient RAM issue even though datasets are zipped to almost 4 times by integer/float dtype conversion on my datasets.  ', '# ', '# After a while I recognize that some Kagglers had already shared their distinctly combined blending performances on a bunch of submitted results from their different type of models. Thanks to their inspiration about this approach, which is completely associate to boosting strategy: ""weaker predictors turns to be much stronger one"". Therefore, I titled this study as ""an Empirical Blend Boosting"" **(a quite unique naming :)**. Here I would like to share you my boosted blending performance based on my +20 results having better than 0.802 AUC score and other +30 results having AUC score between 0.802 and 0.800. However, I do not used yet the second set of my submission results because just ~25 of them is enough to achieve the best result on the Kaggle :), and also it is a quite boring stuff to try possible linear combinations. On the other hand, I can aggressively enhance my AUC score, but I could not convince myself yet that blending is a meaningful thing for data science philosophy.   ', '# ', '# Mostly I use Colab Pro to compute LigthGBM calculations with 5-fold CV on GPUs. My models have 900-1800 features. I am also developing a micro model having less than 200 features with a 0.800 AUC score (as a future mission for me). Soon I will share my micro model on the Kaggle, there should be no problem about RAM usage :-).  ', '# ', '# I have a limited knowledge about the credit finance, therefore, I combined many Kaggle notebooks for expending number of features as much as I desire and/or acceptance of my LigthGBM models harvesting further enhance scores. I would like to thank these contributors. ', '# ', '# Some of them are listed here (sorry for missings): ', '# * https://www.kaggle.com/jsaguiar/lightgbm-with-simple-features <=-- my models are based on this study', '# * https://www.kaggle.com/jsaguiar/lightgbm-7th-place-solution', '# * https://www.kaggle.com/sangseoseo/oof-all-home-credit-default-risk <=-- in most cases these hyperparameters are used', '# * https://www.kaggle.com/ashishpatel26/different-basic-blends-possible <=-- thank for blending idea', '# * https://www.kaggle.com/mathchi/home-credit-risk-with-detailed-feature-engineering', '# * https://www.kaggle.com/windofdl/kernelf68f763785', '# * https://www.kaggle.com/meraxes10/lgbm-credit-default-prediction', '# * https://www.kaggle.com/luudactam/hc-v500', '# * https://www.kaggle.com/aantonova/aggregating-all-tables-in-one-dataset', '# * https://www.kaggle.com/wanakon/kernel24647bb75c', '# ', '# In[1]:', '# import libraries', '# load submitted 22 results having my best AUC scores better than 0.802 ', '# In[2]:', '# check correlation map between these 22 best AUC scores', '# #### From correlation map there it is clear that there are 3 subgroups. We should firstly scale these groups their inner side, and then among of themselves.    ', '# In[3]:', '# create a submission dataset', '# create a linear combination between 22 individual results ', '# coefficients determine empirically and based on correlational interactions ', '# In[4]:', '# create the submission file with my first blend result: 0.80602 AUC score', '# In[5]:', '# In[6]:', '# create the submission file with my first blend result: AUC score is better than 0.811']",41
bnu-dataming.py,"['# coding: utf-8', '# ### Home Credit Default Risk', '# ### BNU_Datamining', '# In[1]:', '# numpy and pandas for data manipulation', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[2]:', '# data', '# In[3]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[4]:', '# one-hot encoding of categorical variables', '# In[5]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# In[6]:', '# In[7]:', '# In[8]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[9]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[10]:', '# Make predictions', '# Make sure to select the second column only', '# In[11]:', '# Submission dataframe', '# In[12]:', '# Make the random forest classifier', '# In[13]:', '# In[14]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[15]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# In[16]:', '# In[17]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', 'data_train = xgb.DMatrix(X_train, y_train)  # ä½¿ç”¨XGBoostçš„åŽŸç”Ÿç‰ˆæœ¬éœ€è¦å¯¹æ•°æ®è¿›è¡Œè½¬åŒ–', '# è®¡ç®—é”™è¯¯çŽ‡', '# In[22]:', '# è®¡ç®—é”™è¯¯çŽ‡', '# In[23]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[24]:']",106
catboostarter.py,[],0
catboost_comparison.py,"['    # # Add new features', '    # Amount loaned relative to salary', '    # Number of overall payments (I think!)', '    # Social features', '    # A lot of the continuous days variables have integers as missing value indicators.', '    # # Aggregate and merge supplementary datasets', '    # Previous applications', '    # Average the rest of the previous app data', '    # Max and min the previous app data', '    # Previous app categorical features', '    # Credit card data - numerical features', '    # Credit card data - categorical features', '    # Credit bureau data - numerical features', '    # Bureau balance data', '    # Pos cash data - weight values by recency when averaging', '    # Pos cash data data - categorical features', '    # Installments data', '    # Add more value counts', '    # Label encode categoricals', '# Merge the datasets into a single one for training', '# Separate metadata', '# Process the data set.', '# Capture other categorical features not as object data types:', '# Re-separate into train and test', '# Extract target', '# Define the categorical feats and CatBoost params', ""    # 'learning_rate': 0.1,"", '# Estimate LB score through CV', '# Fit final model']",29
cat_and_lgb_ensemble.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# print(os.listdir(""../input""))', '# print(catboost_result)', '# print(lgb_result)', '# Any results you write to the current directory are saved as output.']",11
classification-using-random-search-xgboost.py,"['# coding: utf-8', '# In[ ]:', '# Data manipulation', '# Modeling', '# Splitting data', '# In[ ]:', '# Sample 17000 rows (10000 for training, 7000 for testing)', '# Only numeric features', '# Extract the labels', '# Split into training and testing data', '# In[ ]:', '# In[ ]:', '# Create a training and testing dataset', '# In[ ]:', '# Get default hyperparameters', '# Remove the number of estimators because we set this to 10000 in the cv call', '# Cross validation with early stopping', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Optimal number of esimators found in cv', '# Train and make predicions with model', '# In[ ]:', '    # Number of estimators will be found using early stopping', '     # Perform n_folds cross validation', '    # results to retun', '# In[ ]:', '# In[ ]:', '# Create a default model', '# In[ ]:', '# Hyperparameter grid', '# In[ ]:', '# Randomly sample a boosting type', '# Set subsample depending on boosting type', '# In[ ]:', '# Learning rate histogram', '# In[ ]:', '# Check number of values in each category', '    # Check values', '# As an example of a simple domain, the `num_leaves` is a uniform distribution. This means values are evenly spaced on a linear scale.', '# In[ ]:', '# number of leaves domain', '# In[ ]:', '# Dataframes for random and grid search', '# In[ ]:', '# In[ ]:', '# In[ ]:', '    # Dataframe to store results', '    # https://codereview.stackexchange.com/questions/171173/list-all-possible-permutations-from-a-python-dictionary-of-lists', '    # Iterate through every possible combination of hyperparameters', '        # Create a hyperparameter dictionary', '        # Set the subsample ratio accounting for boosting type', '        # Evalute the hyperparameters', '        # Normally would not limit iterations', '    # Sort with best score on top', '# In[ ]:', '# In[ ]:', '# Get the best parameters', '# Create, train, test model', '# In[ ]:', '# In[ ]:', '# Randomly sample from dictionary', '# Deal with subsample ratio', '# In[ ]:', '    # Dataframe for results', '    # Keep searching until reach max evaluations', '        # Choose random hyperparameters', '        # Evaluate randomly selected hyperparameters', '    # Sort with best score on top', '# In[ ]:', '# In[ ]:', '# Get the best parameters', '# Create, train, test model', '# In[ ]:', '# In[ ]:', '# Create file and open connection', '# Write column names', '# In[ ]:', '    # Dataframe for results', '        # Choose random hyperparameters', '        # Evaluate randomly selected hyperparameters', '        # open connection (append option) and write results', '        # make sure to close connection', '    # Sort with best score on top', '# In[ ]:', '    # Dataframe to store results', '    # https://codereview.stackexchange.com/questions/171173/list-all-possible-permutations-from-a-python-dictionary-of-lists', '    # Iterate through every possible combination of hyperparameters', '        # Select the hyperparameters', '        # Set the subsample ratio accounting for boosting type', '        # Evalute the hyperparameters', '        # open connection (append option) and write results', '        # make sure to close connection', '        # Normally would not limit iterations', '    # Sort with best score on top', '# In[ ]:', '# MAX_EVALS = 1000', '# # Create file and open connection', ""# out_file = 'grid_search_trials_1000.csv'"", ""# of_connection = open(out_file, 'w')"", '# writer = csv.writer(of_connection)', '# # Write column names', ""# headers = ['score', 'hyperparameters', 'iteration']"", '# writer.writerow(headers)', '# of_connection.close()', '# grid_results = grid_search(param_grid, out_file)', '# # Create file and open connection', ""# out_file = 'random_search_trials_1000.csv'"", ""# of_connection = open(out_file, 'w')"", '# writer = csv.writer(of_connection)', '# # Write column names', ""# headers = ['score', 'hyperparameters', 'iteration']"", '# writer.writerow(headers)', '# of_connection.close()', '# random_results = random_search(param_grid, out_file)', '# In[ ]:', '# In[ ]:', '# Convert strings to dictionaries', '# In[ ]:', '    # Sort with best values on top', '    # Print out cross validation high score', '    # Use best hyperparameters to create a model', '    # Train and make predictions', '    # Create dataframe of hyperparameters', '    # Iterate through each set of hyperparameters that were evaluated', '    # Put the iteration and score in the hyperparameter dataframe', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Combine results into one dataframe', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Plot of scores over the course of searching', '# In[ ]:', '# In[ ]:', '# Create bar chart', '# Add text for labels', '# Display', '# In[ ]:', '# Bar plots of boosting type', '# In[ ]:', '# In[ ]:', '# Density plots of the learning rate distributions ', '# In[ ]:', '# Iterate through each hyperparameter', '        # Plot the random search distribution and the sampling distribution', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# In[ ]:', '# Scatterplot of next four hyperparameters', '# ## Score versus Hyperparameters', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# Scatterplot of next four hyperparameters', '# In[ ]:', '# Read in full dataset', '# Extract the test ids and train labels', '# In[ ]:', '# Cross validation with n_folds and early stopping', '# In[ ]:', '# In[ ]:', '# Train the model with the optimal number of estimators from early stopping', '# Predictions on the test data', '# In[ ]:', '# In[ ]:', '# Fit the models', '# In[ ]:', '# In[ ]:']",172
clean-manual-feature-engineering.py,"['# coding: utf-8', '# # Clean Manual Feature Engineering', '# ', '# The purpose of this notebook is to clean up the manual feature engineering I had scattered over several other kernels. We will implement the complete manual feature engineering and then test the results.', '# ', '# Update August 7: __After some modifications, this can now run in a kernel!__ The features themselves are available at https://www.kaggle.com/willkoehrsen/home-credit-manual-engineered-features under `clean_manual.csv`. The feature importances for these features in a gradient boosting model are also available at the same link with the name `fi_clean_manual.csv`. ', '# ', '# ### Roadmap', '# ', '# Our plan of action is as follows.We have to be very careful about memory usage in the kernels, which affects the order of operations:', '# ', '# 1. Define functions:', '#     * `agg_numeric`', '#     * `agg_categorical`', '#     * `agg_child` ', '#     * `agg_grandchild`', '#  2. Add in domain knowledge features to `app`', '#  3. Work through the `bureau` and `bureau_balance` data', '#      * Add in hand built features', '#      * Aggregate both using the appropriate functions', '#      * Merge with `app` and delete the dataframes', '# 4. Work through `previous`, `installments`, `cash`, and `credit`', '#     * Add in hand built features', '#     * Aggregate using the appropriate functions', '#     * Merge with `app` and delete the dataframes', '# 5. Modeling using a Gradient Boosting Machine', '#     * Train model on training data using best hyperparameters from random search notebook', '#     * Make predictions and submit', '# ', '# ', '# ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Read in the datasets and replace the anomalous values', '# # Numeric Aggregation Function', '# ', '# The following function aggregates all the numeric variables in a child dataframe at the parent level. That is, for each parent, gather together (group) all of their children, and calculate the aggregations statistics across the children. The function also removes any columns that share the exact same values (which might happen using `count`). ', '# In[ ]:', '    # Remove id variables other than grouping variable', '    # Only want the numeric variables', '    # Group by the specified variable and calculate the statistics', '    # Need to create new column names', '    # Iterate through the variables names', '            # Iterate through the stat names', '                # Make a new column name for the variable and stat', '    # Remove the columns with all redundant values', '# # Categorical Aggregation Function', '# ', '# Much like the numerical aggregation function, the `agg_categorical` function works on a child dataframe to aggregate statistics at the parent level. This can work with any child of `app` and might even be extensible to other problems with only minor changes in syntax.', '# In[ ]:', '    # Select the categorical columns', '    # Make sure to put the identifying id on the column', '    # Groupby the group var and calculate the sum and mean', '    # Iterate through the columns in level 0', '        # Iterate through the stats in level 1', '            # Make a new column name', '    # Remove duplicate columns by values', '# # Combined Aggregation Function', '# ', '# We can put these steps together into a function that will handle a child dataframe. The function will take care of both the numeric and categorical variables and will return the result of merging the two dataframes. ', '# In[ ]:', '    # Numeric and then categorical', '    # Merge on the parent variable', '    # Remove any columns with duplicate values', '    # memory management', '# This function can be applied to both `bureau` and `previous` because these are direct children of `app`. For the children of the children, we will need to take an additional aggregation step. ', '# # Aggregate Grandchild Data Tables', '# ', '# Several of the tables (`bureau_balance, cash, credit_card`, and `installments`) are children of the child dataframes. In other words, these are grandchildren of the main `app` data table. To aggregate these tables, they must first be aggregated at the parent level (which is on a per loan basis) and then at the grandparent level (which is on the client basis). For example, in the `bureau_balance` dataframe, there is monthly information on the loans in `bureau`. To get this data into the `app` dataframe will first require grouping the monthly information for each loan and then grouping the loans for each client. ', '# ', ""# Hopefully, the nomenclature does not get too confusing, but here's a rounddown:"", '# ', '# * __grandchild__: the child of a child data table, for instance, `bureau_balance`. For every row in the child table, there can be multiple rows in the grandchild. ', '# * __parent__: the parent table of the grandchild that links the grandchild to the grandparent. For example, the `bureau` dataframe is the parent of the `bureau_balance` dataframe in this situation. `bureau` is in turn the child of the `app` dataframe. `bureau_balance` can be connected to `app` through `bureau`.', '# * __grandparent__: the parent of the parent of the grandchild, in this problem the `app` dataframe. The end goal is to aggregate the information in the grandchild into the grandparent. This will be done in two stages: first at the parent (loan) level and then at the grandparent (client) level', '# * __parent variable__: the variable linking the grandchild to the parent. For the `bureau` and `bureau_balance` data this is `SK_ID_BUREAU` which uniquely identifies each previous loan', '# * __grandparent variable__: the variable linking the parent to the grandparent. This is `SK_ID_CURR` which uniquely identifies each client in `app`.', '# ', '# ### Aggregating Grandchildren Function', '# ', '# We can take the individual steps required for aggregating a grandchild dataframe at the grandparent level in a function. These are:', '# ', '# 1. Aggregate the numeric variables at the parent (the loan, `SK_ID_BUREAU` or `SK_ID_PREV`) level.', '# 2. Merge with the parent of the grandchild to get the grandparent variable in the data (for example `SK_ID_CURR`)', '# 3. Aggregate the numeric variables at the grandparent (the client, `SK_ID_CURR`) level. ', '# 4. Aggregate the categorical variables at the parent level.', '# 5. Merge the aggregated data with the parent to get the grandparent variable', '# 6. Aggregate the categorical variables at the grandparent level', '# 7. Merge the numeric and categorical dataframes on the grandparent varible', '# 8. Remove the columns with all duplicated values.', '# 9. The resulting dataframe should now have one row for every grandparent (client) observation', '# 10. Merge with the main dataframe (`app`) on the grandparent variable (`SK_ID_CURR`). ', '# ', '# This function can be applied to __all 4 grandchildren__ without the need for hard-coding in specific variables. ', '# In[ ]:', '    # set the parent_var as the index of the parent_df for faster merges', '    # Aggregate the numeric variables at the parent level', '    # Merge to get the grandparent variable in the data', '    # Aggregate the numeric variables at the grandparent level', '    # Can only apply one-hot encoding to categorical variables', '        # Aggregate the categorical variables at the parent level', '        # Aggregate the categorical variables at the grandparent level', '    # If there are no categorical variables, then we only need the numeric aggregations', '    # Drop the columns with all duplicated values', '# # Putting it Together', '# ', '# Now that we have the individual pieces of semi-automated feature engineering, we need to put them together. There are two functions that can handle the children and the grandchildren data tables:', '# ', '# 1. `agg_child(df, parent_var, df_name)`: aggregate the numeric and categorical variables of a child dataframe at the parent level. For example, the `previous` dataframe is a child of the `app` dataframe that must be aggregated for each client. ', '# 2. `agg_grandchild(df, parent_df, parent_var, grandparent_var, df_name)`: aggregate the numeric and categorical variables of a grandchild dataframe at the grandparent level. For example, the `bureau_balance` dataframe is the grandchild of the `app` dataframe with `bureau` as the parent. ', '# ', '# For each of the children dataframes of `app`, (`previous` and `bureau`), we will use the first function and merge the result into the `app` on the parent variable, `SK_ID_CURR`. For the four grandchild dataframes, we will use the second function, which returns a single dataframe that can then be merged into app on `SK_ID_CURR`. ', '# ## Hand-Built Features', '# ', '# Along the way, we will add in hand-built features to the datasets. These have come from my own ideas (probably not very optimal) and from the community.', '# ', '# First we will add in ""domain knowledge"" features to the `app` dataframe. These were developed based on work done in other kernels (both from the community and my own work)', '# In[ ]:', '# Add domain features to base dataframe', '# ### Hand-Built Features for other Dataframes', '# ', '# We can also add in hand built features for the other dataframes. Since these are not the main dataframe, these features will end up being aggregated in different ways. These will be added as we go through the tables.', '# #### Aggregate the bureau data', '# ', '# First add the loan rate for previous loans at other institutions.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# #### Aggregate the bureau balance', '# ', '# Now we turn to the `bureau_balance` dataframe. We will make a column indicating whether a loan was past due for the month or whether the payment was on time.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Merge with the main dataframe', '# ', ""# The individual dataframes can all be merged into the main `app` dataframe. Merging is much quicker if done on any index, so it's good practice to first set the index to the variable on which we will merge. In each case, we use a `left` join so that all the observations in `app` are kept even if they are not present in the other dataframes (which occurs because not every client has previous records at Home Bureau or other credit institutions). After each step of mergning, we remove the dataframe from memory in order to hopefully let the kernel continue to run."", '# ', '# The final result is one dataframe with a single row for each client that can be used for training a machine learning model. ', '# In[ ]:', '# In[ ]:', '# #### Aggregate previous loans at Home Credit', '# ', '# We will add in two domain features, first the loan rate and then the difference between the amount applied for and the amount awarded.', '# In[ ]:', '# `AMT_DIFFERENCE` is the difference between what was given to the client and what the client requested on previous loans at Home Credit.', '# In[ ]:', '# In[ ]:', '# #### Aggregate Installments Data', '# ', '# The installments table has each installment (payment) for previous loans at Home Credit. We can create a column indicating whether or not a loan was late.', '# In[ ]:', '# `LOW_PAYMENT` represents a payment that was less than the prescribed amount. ', '# In[ ]:', '# In[ ]:', '# #### Aggregate Cash previous loans', '# ', '# The next dataframe is the `cash` which has monthly information on previous cash loans at Home Credit. We can create a column indicating if the loan was overdue for the month. ', '# In[ ]:', '# `INSTALLMENTS_PAID` is meant to represent the number of already paid (or I guess missed) installments by subtracting the future installments from the total installments.', '# In[ ]:', '# In[ ]:', '# #### Aggregate Credit previous loans', '# ', '# The last dataframe is `credit` which has previous credit card loans at Home Credit. We can make a column indicating whether the balance is greater than the credit limit, a column showing whether or not the balance was cleared (equal to 0), whether or not the payment was below the prescribed amount, and whether or not the payment was behind. Then we aggregate as with the other grandchildren.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# __This is usually the point at which the kernel fails.__ To try and alleviate the problem, I have added a pause of 10 minutes.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# __Update August 7__: The kernel can now run!', '# In[ ]:', '# Check for columns with duplicated values', '# _, idx = np.unique(app, axis = 1, return_index = True)', ""# print('There are {} columns with all duplicated values.'.format(app.shape[1] - len(idx)))"", '# In[ ]:', '# # Modeling', '# ', '# After all the hard work, now we get to test our features! We will use a model with the hyperparameters from random search that are documented in another notebook. ', '# ', '# The final model scores __0.792__ when uploaded to the competition.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Feature Importances', '# ', '# Now we can see if all that time was worth it! In the code below, we find the most important features and show them in a plot and dataframe.', '# In[ ]:', '# In[ ]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Bar plot of n most important features', '        # Cumulative importance plot', '        # Number of features needed for threshold cumulative importance', '        # Add vertical line to plot', '# In[ ]:', '# # Conclusions', '# ', '# This code is a little too much to run in the Kaggle kernels. However, the features themselves are available at https://www.kaggle.com/willkoehrsen/home-credit-manual-engineered-features under `clean_manual.csv`. The feature importances for these features in a gradient boosting model are also available at the same link with the name `fi_clean_manual.csv`. ', '# ', ""# This notebook is meant to serve as a clean version of the manual feature engineering I had scattered across several other notebooks. We were able to build a complete set of __ features that scored 0.792 on the public leaderboard__. Further hyperparameter tuning might improve the performance. For additional feature engineering, we will probably want to turn to more technical operations such as treating this as a time-series problem. Since we have relative time information (relative to the current loan at Home Credit), it's possible to find the most recent information and also trends over time. These can be useful because changes in behavior might inform us as to whether or not a client will be able to repay a loan! "", '# ', ""# Thanks for reading and as always, I welcome feedback and constructive criticism. I'll see you in the next notebook."", '# ', '# Best,', '# ', '# Will', '# In[ ]:']",214
credit-skeleton.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# In[ ]:', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '        # For best performance 10000 estimators, use fewer to speed up prediction time', '    # Write submission file and plot feature importance', '# In[ ]:', '# In[ ]:', '# In[ ]:']",21
creditriskpipeline.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# **BUREAU**', '# In[8]:', '# Read in bureau', '# **Bureau Balance**', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# **MERGE WITH BUREAU**', '# In[13]:', '# **MERGE WITH app_train**', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# **Pipelines**', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# dummies', '# ordinal encoder', '# standard scaler', '# Polynomial Features', '# In[23]:', '# column transformer', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# pipeline_modelo = Pipeline(steps=[', '#     (""preprocessamento"", classe_pipeline.preprocessamento),', '#     (""modelo"", classe_pipeline.modelo)', '# ])', '# pipeline_modelo.predict(X_teste)', '# In[32]:', '# In[33]:', '# In[34]:']",51
cse445.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '    # Calculate rate for each category with decay', '    # Min, Max, Count and mean duration of payments (months)', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '    # Engineered features', '    # Engineered features', '    # Engineered features', '    # Engineered features', '    # Engineered features', '    # The following features are only for approved applications', '    # Engineered features', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# In[47]:', '# In[48]:', '# In[49]:', '# In[50]:', '# In[51]:', '# In[52]:', '# In[53]:', '# In[54]:', '# In[55]:', '# In[56]:', '# In[57]:', '# Ref: https://pranaysite.netlify.app/lightgbm/', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# In[58]:', '# In[59]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[60]:', '# In[61]:', '# In[62]:', '# In[63]:', '# In[64]:', '# In[65]:']",119
dic-as-13.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# Clear value with missing value > 0', '# Remove the FLAG_DOCUMENT_* columns and SK_ID_CURR (since its represent the ID No. only)', '# In[5]:', '# Plot the target proportion', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# Get the correlation', '# In[11]:', '# In[12]:', '# Extract the data', '# In[13]:', '# In[14]:', '# Get the name of selected features', '# In[15]:', '# In[16]:', '# Normalized the data', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# Predict with application_train.csv', '# In[25]:', '# In[26]:', '# Normalized the data', '# In[27]:', '# In[28]:', '# In[29]:', '# In[ ]:']",49
dic-as-14.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# Select 2 variables as in the pre-assignment', '# In[5]:', '# In[6]:', '# Normalized the data', '# In[7]:', '# Choose LogisticRegression with C = 0.0001 for estimating results.', '# In[8]:', '# Predict with application_train.csv', '# In[9]:', '# In[10]:', '# Normalized the data', '# In[11]:', '# In[12]:', '# In[13]:', '# In[ ]:']",29
different-basic-blends-possible (1).py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# ## Blend with one rank weighted submission [0.8 LB]', '# In[ ]:', '# In[ ]:', '# Function for merging dataframes efficiently ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Diversified blend [0.803 LB]', '# ', '# ', '# **The blending ingredients are taken from three different type of models.**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Blending lowest correlated models', '# In[ ]:', 'print(Corr_Mat) # Correlation matrix of five submission files', '# In[ ]:', '# In[ ]:', '# **This is my first try towards blending. Do upvote if you like it and also if you have any ideas do share in the comment section below.**', '# ', '# **To be Continued**', '# In[ ]:']",35
different-basic-blends-possible (2).py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# ## Blend with one rank weighted submission [0.8 LB]', '# In[ ]:', '# In[ ]:', '# Function for merging dataframes efficiently ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Diversified blend [0.799 LB]', '# ', '# ', '# **The blending ingredients are taken from three different type of models.**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Blending lowest correlated models', '# In[ ]:', 'print(Corr_Mat) # Correlation matrix of five submission files', '# In[ ]:', '# In[ ]:', '# **This is my first try towards blending. Do upvote if you like it and also if you have any ideas do share in the comment section below.**', '# ', '# **To be Continued**', '# In[ ]:']",35
eda-and-feature-engineering-for-beginner.py,"['# coding: utf-8', '# ## EDAì™€ Feature-engineeringì„ í†µí•œ ëŒ€ì¶œ ìƒí™˜ì—¬ë¶€ ì˜ˆì¸¡', '# ', '# #### reference', '# * Home Credit Default Risk - A Gentle Introduction ', '# ', '# https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction ', '# https://bkshin.tistory.com/entry/ìºê¸€-5-Home-Credit-Default-Risk', '# ', '# ### ëŒ€íšŒ ì„¤ëª…', '# ê° ê³\xa0ê°ì˜ ì\xa0•ë³´ë¥¼ ê¸°ë°˜ìœ¼ë¡œ í•´ë‹¹ ê³\xa0ê°ì´ ëŒ€ì¶œí•œ ëˆì„ ê°šì„ ìˆ˜ ìžˆì„ì§€ ì—†ì„ì§€ì— ëŒ€í•œ í™•ë¥\xa0ì„ ì˜ˆì¸¡í•˜ëŠ” ëŒ€íšŒ ', '# (supervised classification task)', '# > * 0 ì´ë©´ ëŒ€ì¶œìƒí™˜ ê°€ëŠ¥, 1ì´ë©´ ëŒ€ì¶œìƒí™˜ ì–´ë\xa0¤ì›€', '# * ì£¼ì–´ì§„ ì—¬ëŸ¬ ë°ì´í„° í…Œì´ë¸”ì´ ìžˆì§€ë§Œ, ì´ ë…¸íŠ¸ë¶ì—ì„œëŠ” ë©”ì¸ í…Œì´ë¸” application_train, application_testë§Œ ì‚¬ìš©í•\xa0 ì˜ˆì\xa0•', '# ### Metric : ROC AUC', '# AUC-ROC ê³¡ì„\xa0ì€ ë‹¤ì–‘í•œ ìž„ê³„ê°’ì—ì„œ ëª¨ë¸ì˜ ë¶„ë¥˜ ì„±ëŠ¥ì— ëŒ€í•œ ì¸¡ì\xa0• ê·¸ëž˜í”„', '# * ROC = ëª¨ë“\xa0 ìž„ê³„ê°’ì—ì„œ ë¶„ë¥˜ ëª¨ë¸ì˜ ì„±ëŠ¥ì„ ë³´ì—¬ì£¼ëŠ” ê·¸ëž˜í”„', '# * AUC(Area Under the Curve) = ROCê³¡ì„\xa0ì•„ëž˜ì˜ì—\xad', '#     * ìš°ìˆ˜í•œ ë¶„ë¥˜ëª¨ë¸ì€ AUCê°’ì´ 1ì— ê°€ê¹ê³\xa0, í´ëž˜ìŠ¤ë¥¼ ë¶„ë¥˜í•˜ëŠ” ì„±ëŠ¥ì´ ë›°ì–´ë‚¨ì„ ì˜ë¯¸', '#     * AUC ìµœì†Œê°’ì€ 0.5ìœ¼ë¡œ, ì´ ê²½ìš° ëª¨ë¸ì˜ í´ëž˜ìŠ¤ ë¶„ë¦¬ ëŠ¥ë\xa0¥ì´ ì\xa0„í˜€ ì—†ìŒì„ ëœ»í•¨', '#     ', '#     > AUCí•´ì„', '#       * AUC=0.7ì´ë©´, í•´ë‹¹ ë¶„ë¥˜ ëª¨ë¸ì´ ì–‘ì„± í´ëž˜ìŠ¤ì™€ ìŒì„± í´ëž˜ìŠ¤ë¥¼ êµ¬ë³„í•\xa0 ìˆ˜ ìžˆëŠ” í™•ë¥\xa0ì€ 70%', '#     ', '# #### ROC-curveì—ì„œì˜ ìˆ˜ì‹', '# * True positive rates(=recall, sensitivity)', '#     * TPR = R = TP / (TP+FN)', '#         * ì‹¤ì\xa0œ ì•” í™˜ìž ì¤‘ì—ì„œ ì•”í™˜ìžë¼ê³\xa0 ë§žì¶˜ í™•ë¥\xa0', '# * True negative rates(=specificity)', '#     * TNR = TN / (TN+FP)', '#         * ì‹¤ì\xa0œ ì\xa0•ìƒì¸ í™˜ìž ì¤‘ì—ì„œ ì\xa0•ìƒì´ë¼ê³\xa0 ë§žì¶˜ í™•ë¥\xa0', '# * ROC-curveì—ì„œ xì¶•, yì¶•', '#     * yì¶• : TPR(=Recall)', '#     * xì¶• : 1-(TNR)', '# ', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# numpy and pandas for data manipulation', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# List files available', '# In[4]:', '# Training data', '# In[5]:', '# Testing data features', '# --------------------------------------------------------', '# ## Exploratory Data Analysis', '# ## 1) Target ì»¬ëŸ¼ì˜ ë¶„í¬ë¥¼ ì‚´íŽ´ë³´ìž', '# Targetì€ ìš°ë¦¬ê°€ ì˜ˆì¸¡í•´ì•¼í•˜ëŠ” ê°’ì´ë‹¤. 0ì´ë©´ ì\xa0œë•Œ ëŒ€ì¶œê¸ˆ ìƒí™˜ ê°€ëŠ¥í•œê²ƒ, 1ì´ë©´ ìƒí™©ì´ ì–´ë\xa0¤ìš´ê²ƒì„ ì˜ë¯¸í•œë‹¤. ', '# In[6]:', '# In[7]:', '# * ëŒ€ì¶œì„ ìƒí™˜í•\xa0 ìˆ˜ ìžˆëŠ” 0ê°’ì´ 1ë³´ë‹¤ í›¨ì”¬ ë§Žì€ imbalanced dataì´ë‹¤.', '# ## 2) ê²°ì¸¡ì¹˜ í™•ì¸', '# ê° ì»¬ëŸ¼ë³„ ê²°ì¸¡ì¹˜ ê°œìˆ˜ ë° ë¹„ì¤‘ í™•ì¸', '# In[8]:', '    # ì\xa0„ì²´ ê²°ì¸¡ì¹˜ ê°œìˆ˜ í™•ì¸', '    # ê²°ì¸¡ì¹˜ ë¹„ì¤‘ í™•ì¸', '    # ê²°ì¸¡ì¹˜ ê°œìˆ˜ , ê²°ì¸¡ì¹˜ ë¹„ì¤‘ í…Œì´ë¸” ë§Œë“¤ê¸°', '    # ì»¬ëŸ¼ ì´ë¦„ë°”ê¾¸ê¸°', '    # ê²°ì¸¡ì¹˜ 0ì¸ ì»¬ëŸ¼ì€ ì\xa0œì™¸í•˜ê³\xa0 ì\xa0•ë\xa0¬', '    # ìš”ì•½ ê²°ê³¼ print', '# In[9]:', '# * ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì„ ë§Œë“œë\xa0¤ë©´, ìœ„ì˜ ê²°ì¸¡ì¹˜ë“¤ì„ ì±„ì›Œì•¼í•œë‹¤.(imputation)', '# * ë’·ë¶€ë¶„ì—ì„œ imputationì—†ì´ ê²°ì¸¡ì¹˜ë¥¼ ì±„ìš¸ ìˆ˜ ìžˆëŠ” XGBoost ëª¨ë¸ì„ ì‚¬ìš©í•\xa0ê²ƒì´ë‹¤.', '# * ë˜ ë‹¤ë¥¸ ë°©ë²•ìœ¼ë¡œëŠ” ê²°ì¸¡ì¹˜ê°€ ë„ˆë¬´ ë§Žì€ ì»¬ëŸ¼ì€ ì‚\xadì\xa0œí•\xa0ìˆ˜ë„ìžˆì§€ë§Œ, í•´ë‹¹ ì»¬ëŸ¼ì´ ëª¨ë¸ ì„±ëŠ¥ì— ë„ì›€ì´ ë\xa0ìˆ˜ë„ ìžˆê¸° ë•Œë¬¸ì— ìš°ì„\xa0 ìœ\xa0ì§€í•˜ê¸°ë¡œí•œë‹¤.', '# ## 3) Column Types', '# int64, float64 íƒ€ìž…ì€ ìˆ˜ì¹˜í˜•ë³€ìˆ˜ì´ê³\xa0 object íƒ€ìž…ì€ ë²”ì£¼í˜• ë³€ìˆ˜', '# In[10]:', '# In[11]:', '# ë²”ì£¼í˜• ë³€ìˆ˜ì—ì„œ ìœ\xa0ë‹ˆí¬í•œ ê°’ì˜ ê°œìˆ˜ë¥¼ ì‚´íŽ´ë³´ìž', ""# app_train.select_dtypes('object').apply(pd.Series.nunique)"", ""app_train.select_dtypes('object').nunique()   # applyí•¨ìˆ˜ ì—†ì´ ê°€ëŠ¥"", '# * ëŒ€ë¶€ë¶„ì˜ ë²”ì£¼í˜• ë³€ìˆ˜ëŠ” ìœ\xa0ë‹ˆí¬í•œ ê°’ì´ ì\xa0ì€ê²ƒìœ¼ë¡œ ë³´ì¸ë‹¤.', '#     * ORGANIZATION_TYPE ì™€ OCCUPATION_TYPE ëŠ” ì˜ˆì™¸', '# ## 4) ë²”ì£¼í˜• ë³€ìˆ˜ Encoding', '# LightGBMê°™ì€ ëª¨ë¸ì„ ì\xa0œì™¸í•˜ê³\xa0 ëŒ€ë¶€ë¶„ì˜ ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì€ ë²”ì£¼í˜• ë³€ìˆ˜ë¥¼ ë‹¤ë£° ìˆ˜ ì—†ê¸° ë•Œë¬¸ì—, ì´ëŸ¬í•œ ë²”ì£¼í˜• ë³€ìˆ˜ë¥¼ encodeí•´ì¤˜ì•¼ í•œë‹¤. ê·¸ ë°©ë²•ìœ¼ë¡œëŠ” ì•„ëž˜ ë‘ê°€ì§€ê°€ ìžˆìŒ', '# * 1) Label encoding :', '#     * ë²”ì£¼í˜• ë³€ìˆ˜ì˜ ê°œë³„ê°’ì„ ìˆ«ìžë¡œ ë°”ê¿”ì£¼ëŠ” ë°©ë²•. ì»¬ëŸ¼ì„ ìƒˆë¡œ ìƒì„±í•˜ì§€ ì•ŠìŒ', '#     * ì—¬ì„±/ë‚¨ì„± ì²˜ëŸ¼ ë²”ì£¼í˜• ë³€ìˆ˜ì˜ ê°’ì´ ë‘ê°œì¼ê²½ìš°ëŠ” Label encodingì„ ì‚¬ìš©í•´ë„ ë¬´ê´€í•˜ì§€ë§Œ, ê·¸ ì´ìƒì¼ê²½ìš°ëŠ” One-hot encodingì„ ì‚¬ìš©í•˜ëŠ”ê²ƒì´ ì¢‹ìŒ', '# * 2) One-hot encoding :', '#     * í”¼ì²˜ ê°’ì˜ ìœ\xa0í˜•ì— ë”°ë¼ ìƒˆë¡œìš´ í”¼ì²˜ë¥¼ ì¶”ê°€í•´ ê³\xa0ìœ\xa0 ê°’ì— í•´ë‹¹í•˜ëŠ” ì¹¼ëŸ¼ì—ë§Œ 1ì„ í‘œì‹œí•˜ê³\xa0 ë‚˜ë¨¸ì§€ ì¹¼ëŸ¼ì—ëŠ” 0ì„ í‘œì‹œí•˜ëŠ” ë°©ë²•', '#     * One-hot encodingì˜ ê²½ìš° ë²”ì£¼í˜• ë³€ìˆ˜ì˜ ìœ\xa0ë‹ˆí¬í•œê°’ì˜ ê°œìˆ˜ë§Œí¼ ì»¬ëŸ¼ì´ ëŠ˜ì–´ë‚œë‹¤ëŠ”ê²ƒ', '#         * ì´ë¥¼ ë³´ì™„í•˜ê¸° ìœ„í•´ PCAê°™ì€ ì°¨ì›ì¶•ì†Œ ë°©ë²•ì„ ì‚¬ìš©í•\xa0ìˆ˜ë„ìžˆìŒ', '#         ', '# > ì´ ë…¸íŠ¸ë¶ì—ì„œëŠ” ë²”ì£¼í˜•ë³€ìˆ˜ì˜ ìœ\xa0ë‹ˆí¬í•œ ê°’ì´ 2ê°œì¼ê²½ìš° Label encodingì„ ì‚¬ìš©í•˜ê³\xa0 ê·¸ ì´ìƒì¼ ê²½ìš° One-hot encodingì„ ì‚¬ìš©í•\xa0ê²ƒë‹¤.', '# ### Label Encoding and One-Hot Encoding', '# * LabelEncoder(), get_dummies() í™œìš©', '# In[12]:', '# ì»¬ëŸ¼ë³„ë¡œ iterate ëŒê¸°', '        # ë°ì´í„°íƒ€ìž…ì´ objectì´ê³\xa0 ê°’ì˜ ì¢…ë¥˜ê°€ ë‘ê°œ ì´í•˜ì¼ê²½ìš°,', '            # trainê³¼ testì— ë™ì¼í•˜ê²Œ ë¼ë²¨ì¸ì½”ë”©ì„ í•˜ê¸°ìœ„í•´ trainê¸°ì¤€ìœ¼ë¡œ fití•œê°’ì„ train,testì— ë™ì¼í•˜ê²Œ transformí•´ì¤Œ', '            # train-set, test-set ë‘˜ë‹¤ Transform', '            # ë¼ë²¨ì¸ì½”ë”©ì„ í•œ ì»¬ëŸ¼ì´ ëª‡ê°œì¸ì§€ ì¹´ìš´íŠ¸', '# In[13]:', '# ìœ„ì—ì„œ Label-encodingì\xa0ìš© ì•ˆí•œ ë‚˜ë¨¸ì§€ ë²”ì£¼í˜• ë³€ìˆ˜ì— One-hot encoding ì\xa0ìš©', '# ## 5) Trainë°ì´í„°ì™€ Testë°ì´í„° ì»¬ëŸ¼ ë§žì¶°ì£¼ê¸°', '# train ë°ì´í„°ì™€ test ë°ì´í„°ì—ëŠ” ë™ì¼í•œ featureê°€ ìžˆì–´ì•¼ í•œë‹¤. ', '# train ë°ì´í„°ì— ìžˆëŠ” ì¹´í…Œê³\xa0ë¦¬ë³€ìˆ˜ì˜ ìœ\xa0ë‹ˆí¬í•œ ê°’ ê°œìˆ˜ì™€ test ë°ì´í„°ì— ìžˆëŠ” ì¹´í…Œê³\xa0ë¦¬ ë³€ìˆ˜ì˜ ìœ\xa0ë‹ˆí¬í•œ ê°’ ê°œìˆ˜ê°€ ë‹¤ë¥¸ ë³€ìˆ˜ë“¤ì´ ìžˆì–´ì„œ one-hot-encodingì„ í–ˆë”ë‹ˆ, trainì—ëŠ” ìžˆëŠ”ë° testì— ì—†ëŠ” ì»¬ëŸ¼ë“¤ì´ ìƒê²¨ë²„ë¦¼.', '# ', '# ë”°ë¼ì„œ test ë°ì´í„°ì— ì—†ê³\xa0 trainì—ë§Œ ìžˆëŠ” ì»¬ëŸ¼ì„ ì‚\xadì\xa0œí•´ì•¼ë¨. ', '# > ìš°ì„\xa0, train ë°ì´í„°ì—ì„œ TARGET ì»¬ëŸ¼ì„ ë½‘ì•„ë‚¸ë‹¤. ', '#     * TARGET ì»¬ëŸ¼ì€ testë°ì´í„°ì— ì—†ì–´ë„ train ë°ì´í„°ì—ëŠ” ë°˜ë“œì‹œ ìžˆì–´ì•¼í•˜ê¸° ë•Œë¬¸ì—', '# ', '# > align() í•¨ìˆ˜ì˜ joinë©”ì†Œë“œë¥¼ innerë¡œ ì\xa0ìš©í•´ì„œ êµì§‘í•©ìœ¼ë¡œ ìžˆëŠ” ë³€ìˆ˜ë§Œ ì¶”ë¦°ë‹¤.', '# #### Python align() í•¨ìˆ˜', '# * ë‘ ë°ì´í„° í”„ë\xa0ˆìž„ì— í¬í•¨ ëœ ë°ì´í„°ë¥¼ ë³€ê²½í•˜ì§€ ì•Šê³\xa0 ë‘ ë°ì´í„° í”„ë\xa0ˆìž„ê°„ì— í–‰ ë° / ë˜ëŠ” ì—´ì˜ ë°°ì—´ì´ ë™ì¼í•œ ì§€ í™•ì¸í•\xa0ë•Œ ì‚¬ìš©', '# In[14]:', '# ì˜ˆì‹œ', '# In[15]:', '# In[16]:', '# In[17]:', '# ë‘ ë°ì´í„°í”„ë\xa0ˆìž„ì— ë‘˜ë‹¤ í¬í•¨ë˜ì–´ìžˆëŠ” D,B,A ì»¬ëŸ¼ë§Œ ë‚¨ê¹€', '# In[18]:', '# TARGETë³€ìˆ˜ëŠ” trainë°ì´í„°ì—ë§Œ ìžˆì§€ë§Œ í•„ìš”í•œ ë³€ìˆ˜ì´ê¸°ë•Œë¬¸ì— ë”°ë¡œ ë¹¼ë‘ê³\xa0ë‚˜ì„œ ë‹¤ì‹œì¶”ê°€í•\xa0ê²ƒ', '# TARGETë³€ìˆ˜ ë‹¤ì‹œ ì¶”ê°€', '# ## 6) Back to Exploratory Data Analysis', '# ', '# ### 6-1) ì´ìƒì¹˜ (Anomalies)', '# * ì´ìƒì¹˜ë¥¼ ë°œê²¬í•\xa0 ìˆ˜ ìžˆëŠ” ë°©ë²•ì¤‘ í•˜ë‚˜ëŠ” describe()ë©”ì†Œë“œë¡œ ì»¬ëŸ¼ì˜ í†µê³„ê°’ë“¤ì„ ë³´ëŠ”ê²ƒì´ë‹¤.', '# In[19]:', '# DAYS_BIRTH ì»¬ëŸ¼ì—ì„œëŠ” ì´ìƒì¹˜ ì—†ì–´ë³´ìž„', '# In[20]:', '# DAYS_EMPLOYEDëŠ” ì´ìƒì¹˜..', '# In[21]:', '# ì´ìƒì¹˜ì¸ê²ƒ ê°™ì€ ê³\xa0ê°ë“¤ì€ ë”°ë¡œ ë¹¼ì„œ ê·¸ë“¤ì˜ ëŒ€ì¶œìƒí™˜ ë¹„ìœ¨ì´ ê·¸ì™¸ì˜ ê³\xa0ê°ë“¤ì—ë¹„í•´ ë†’ê±°ë‚˜ ë‚®ì€ ê²½í–¥ì´ ìžˆëŠ”ì§€ íŒŒì•…í•´ë³´ìž', '# ', '# In[22]:', '# ì´ìƒì¹˜', '# ì´ìƒì¹˜ ì™¸', '# * ì´ìƒì¹˜ë¡œ ë³´ì´ëŠ” ê³\xa0ê°ë“¤ì´ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•\xa0 í™•ë¥\xa0ì´ 5.4%ë¡œ ë” ë‚®ìŒ.', '# * ì´ìƒì¹˜ë¥¼ ë‹¤ë£¨ëŠ” ê°€ìž¥ ì•ˆì\xa0„í•œ ë°©ë²•ì€ ê²°ì¸¡ì¹˜ ì±„ìš°ë“¯ì´ ì±„ìš°ëŠ” ë°©ë²•', '# * ì´ ê²½ìš° ëª¨ë“\xa0 ì´ìƒì¹˜ë“¤ì´ ê°™ì€ê°’ì„ ê°–ê³\xa0 ìžˆìœ¼ë¯€ë¡œ, ë‹¤ ê°™ì€ ê°’ìœ¼ë¡œ ì±„ìš¸ê²ƒì´ë‹¤.', '# * ì´ìƒê°’ë“¤ì´ ì¤‘ìš”í•´ë³´ì´ë‹ˆ, ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì— ì´ ì´ìƒê°’ë“¤ì„ ìž„ì˜ë¡œ ì±„ìš´ê²ƒì—ëŒ€í•´ ì•Œë\xa0¤ì¤„ê²ƒì´ë‹¤.', '# ', '# > ê²°ë¡\xa0ì\xa0ìœ¼ë¡œ', '#     * ì´ìƒê°’ì„ ìˆ«ìžë¡œ ì±„ìš°ì§€ ì•Šê³\xa0, ìƒˆë¡œìš´ boolean ì»¬ëŸ¼ì„ ë§Œë“¤ì–´ì„œ ì´ìƒê°’ì¸ì§€ ì•„ë‹Œì§€ë¥¼ êµ¬ë¶„í•\xa0ê²ƒì´ë‹¤.', '# In[23]:', '# Create an anomalous flag column', '# ì´ìƒì¹˜ë¥¼ nanê°’ìœ¼ë¡œ ëŒ€ì¹˜', '# In[24]:', '# test ë°ì´í„°ì—ë„ train ë°ì´í„°ì™€ ë™ì¼í•˜ê²Œ ìž‘ì—…', '# True, Falseë¡œ ë˜ì–´ìžˆëŠ” ë°ì´í„° sumí•˜ë©´ Trueì¸ê²ƒ ê°œìˆ˜ ì¹´ìš´íŒ…ë¨.', '# ### 6-2) Correlations', '# ì´ì\xa0œ ì¹´í…Œê³\xa0ë¦¬í˜• ë³€ìˆ˜ì™€ outlierë¥¼ ë‹¤ë¤„ë³´ìž. ', '# ë°ì´í„°ë¥¼ ì´í•´í•˜ëŠ” ë°©ë²•ì¤‘ í•˜ë‚˜ëŠ” ë³€ìˆ˜ê°„, ê·¸ë¦¬ê³\xa0 targetê³¼ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ëŠ”ê²ƒì´ë‹¤. ', '# .corr()ë¥¼ ì‚¬ìš©í•´ì„œ ë³€ìˆ˜ê°„, ê·¸ë¦¬ê³\xa0 targetë³€ìˆ˜ì™€ì˜ Pearson ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ìž.', '# In[25]:', '# TARGET ë³€ìˆ˜ì™€ì˜ ìƒê´€ê´€ê³„', '# * DAYS_BIRTH ì»¬ëŸ¼ì´ ê°€ìž¥ ì–‘ì˜ ìƒê´€ì„±ì´ ë†’ë‹¤. ì–‘ì˜ ìƒê´€ì„ ë„ì§€ë§Œ, ì´ ë³€ìˆ˜ì˜ ê°’ë“¤ì€ ì‹¤ì\xa0œë¡œ ìŒìˆ˜ì´ë‹¤. ', '#     * ì´ ì˜ë¯¸ëŠ” ê³\xa0ê° ë‚˜ì´ê°€ ë§Žì„ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜í•\xa0 ê°€ëŠ¥ì„±ì´ ì\xa0ë‹¤? ë¼ëŠ” í•´ì„ì´ ë‚˜ì˜¤ëŠ”ë° DAYS_BIRTHê°€ ìŒìˆ˜ì—¬ì„œ ê·¸ë\xa0‡ê²Œ ë‚˜íƒ€ë‚œê²ƒìœ¼ë¡œ ë³´ìž„. ë”°ë¼ì„œ, DAYS_BIRTHì— ì\xa0ˆëŒ“ê°’ì„ ì·¨í•´ì„œ ë‹¤ì‹œ ìƒê´€ê´€ê³„ë¥¼ ë³´ë\xa0¤ê³\xa0 í•¨.', '# ### 6-3) Effect of Age on Repayment', '# In[26]:', '# DAYS_BIRTHì˜ ì\xa0ˆëŒ€ê°’ê³¼ TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê³„ìˆ˜', '# * ì\xa0ˆëŒ€ê°’ì„ ì·¨í•´ì„œ ë‹¤ì‹œ TARGETê³¼ì˜ ìƒê´€ê³„ìˆ˜ë¥¼ ë³´ë‹ˆ ê³\xa0ê°ì˜ ë‚˜ì´ê°€ ë§Žì„ìˆ˜ë¡, ëŒ€ì¶œì„ ì\xa0œë•Œ ìƒí™˜í•\xa0 ê°€ëŠ¥ì„±ì´ ë†’ë‹¤ê³\xa0 ë‚˜ì˜´.', '# In[27]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ í™•ì¸', '# * ìœ„ì˜ ë¶„í¬ë¥¼ ì‚´íŽ´ë³´ë‹ˆ outlierì—†ì´ ë‚˜ì´ê°€ ê³\xa0ë¥´ê²Œ ë¶„í¬ë˜ì–´ìžˆëŠ” íŽ¸. ', '# * ì´ì\xa0œ ë‚˜ì´ê°€ TARGETì— ë¯¸ì¹˜ëŠ” ì˜í–¥ì„ ì‹œê°í™”í•´ì„œ ë³´ê¸°ìœ„í•´ KDE plotì„ ê·¸ë\xa0¤ë³¼ê²ƒì´ë‹¤.', '# ', '# > KDE plotì„ ì‚¬ìš©í•˜ëŠ” ì´ìœ\xa0', '# * ë³´í†µ ë¶„í¬ë¥¼ í™•ì¸í•\xa0 ë•Œ ížˆìŠ¤í†\xa0ê·¸ëž¨ì„ ë§Žì´ í™œìš©í•œë‹¤. ê·¸ëŸ°ë° ížˆìŠ¤í†\xa0ê·¸ëž¨ì€ êµ¬ê°„ì„ ì–´ë–»ê²Œ ì„¤ì\xa0•í•˜ëƒì— ë”°ë¼ ê²°ê³¼ë¬¼ì´ ë§¤ìš° ë‹¬ë¼ì\xa0¸ì„œ ì—‰ëš±í•œ ê²°ë¡\xa0ê³¼ í•´ì„ì„ ë‚´ë¦´ ìˆ˜ ìžˆìŒ.', '# * ê·¸ëž˜ì„œ ê·¸ ëŒ€ì•ˆìœ¼ë¡œ ì»¤ë„ ë°€ë„ ì¶”ì\xa0•(KDE) ê·¸ëž˜í”„ë¥¼ ë§Žì´ ì‚¬ìš©í•¨.', '#     * ížˆìŠ¤í†\xa0ê·¸ëž¨ ê°™ì€ ë¶„í¬ë¥¼ ê³¡ì„\xa0í™”í•´ì„œ ë‚˜íƒ€ë‚¸ ê·¸ëž˜í”„', '# In[28]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# * target==1(ë¹¨ê°„ìƒ‰) ì˜ ë¶„í¬ë¥¼ ë³´ë©´ 20-30ëŒ€ì— ê¸°ìš¸ì–´ ìžˆëŠ”ê²ƒì„ ë³¼ ìˆ˜ ìžˆë‹¤. ì´ëŠ” ì\xa0Šì€ ì¸µì¼ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜ì„ ëª»í•\xa0 í™•ë¥\xa0ì´ ë†’ë‹¤ê³\xa0 ìœ\xa0ì¶”í•\xa0 ìˆ˜ ìžˆìŒ.', '# * target==0ì¼ë•Œì™€ 1ì¼ë•Œì˜ TARGETê³¼ì˜ ë¶„í¬ê°€ ìƒì´í•œê²ƒìœ¼ë¡œ ë³´ì•„ ì´ ë³€ìˆ˜ëŠ” ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì— ìœ\xa0ìš©í•˜ê²Œ í™œìš©ë\xa0 ê²ƒìœ¼ë¡œ ë³´ì¸ë‹¤.', '# * ê·¸ëŸ¼ì´ì\xa0œ ë‚˜ì´ë¥¼ ë‚˜ì´ëŒ€ ë³„ë¡œ ê·¸ë£¹ì„ ë‚˜ëˆ\xa0ì„œ target=1(ëŒ€ì¶œ ìƒí™˜ì´ ì–´ë\xa0¤ìš´) ì˜ í‰ê·\xa0ê°’ì„ ì‚´íŽ´ë³´ìž.', '# In[29]:', '# ìµœì†Œ 20 ìµœëŒ€ 70ìœ¼ë¡œí•´ì„œ ì´ 10ê°œë¡œ ê·¸ë£¹í•‘', '# In[30]:', '# Bin the age data', '# In[31]:', '# Group by the bin and calculate averages', '# In[32]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# * ì\xa0Šì€ì¸µì¼ìˆ˜ë¡ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í•˜ëŠ” ê²ƒìœ¼ë¡œ ë‚˜íƒ€ë‚¨', '# * 20-25ì„¸, 25-30ì„¸ 30-35ì„¸ëŠ” ê°ê° ì•½10% ì´ìƒ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í–ˆê³\xa0, 55-60ì„¸, 60-65ì„¸, 65-70ì„¸ëŠ” 5%ì´í•˜ë¡œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í–ˆìŒ.', '# ### 6-4) Exterior Sources', '# * ìŒì˜ ìƒê´€ì´ ê°€ìž¥ ë†’ì•˜ë˜ 3ê°œì˜ ë³€ìˆ˜ EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ì´ë‹¤.', '#     * ì´ ë³€ìˆ˜ë“¤ì€ ì™¸ë¶€ì—ì„œ ê°€ì\xa0¸ì˜¨ ì\xa0•ê·œí™”ëœ scoreë¥¼ ë‚˜íƒ€ë‚¸ë‹¤.', '# * ê·¸ëŸ¼, ì´ì\xa0œ TARGET ë³€ìˆ˜ì™€ EXT_SOURCEì™€ì˜ ìƒê´€ê´€ê³„ì™€ EXT_SOURCE ì„œë¡œê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´íŽ´ë³´ìž', '# In[33]:', '# In[34]:', '# * EXT_SOURCEì™€ TARGET ë³€ìˆ˜ëŠ” ìŒì˜ ìƒê´€ì„±ì„ ë„ë¯€ë¡œ, EXT_SOURCEê°’ì´ ì¦ê°€í•\xa0ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜ì„ ìž˜í•œë‹¤ëŠ” ì˜ë¯¸ë¡œ í•´ì„ê°€ëŠ¥.', '# * ë˜í•œ, DAYS_BIRTH ë³€ìˆ˜ëŠ” EXT_SOURCE_1 ë³€ìˆ˜ì™€ ì–‘ì˜ ìƒê´€ì„±ì´ ë†’ì€ê²ƒìœ¼ë¡œ ë³´ì•„ ì´ scoreì¤‘ í•˜ë‚˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ì¼ê²ƒìœ¼ë¡œ ì¶”ì\xa0•ëœë‹¤.', '# * ê·¸ ë‹¤ìŒì€ ê° EXT_SOURCE ë¥¼ TARGETê°’ ë³„ë¡œ ë‚˜ëˆ\xa0ì„œ ë¶„í¬ë¥¼ ì‚´íŽ´ë³´ìž.', '# In[35]:', '# In[36]:', '# iterate through the sources', '# * EXT_SOURCE_3 ë³€ìˆ˜ëŠ” targetê°’ì— ë”°ë¼ ì°¨ì´ê°€ ê°€ìž¥ í°ê²ƒìœ¼ë¡œ ë³´ì¸ë‹¤.', '# * target ê³¼ì˜ ìƒê´€ê³„ìˆ˜ê°€ ê·¸ë¦¬ ë†’ì§€ëŠ” ì•Šì§€ë§Œ, targetì´ 0ì¸ì§€ 1ì¸ì§€ì— ë”°ë¼ ê°’ì´ ë‹¤ë¥¸ê²ƒìœ¼ë¡œ ë³´ì•„ ëª¨ë¸ì— ì˜í–¥ì„ ì£¼ëŠ” ì£¼ìš” ë³€ìˆ˜ë¼ê³\xa0 íŒë‹¨í•\xa0 ìˆ˜ ìžˆìŒ.', '# ### 6-5) Pairs Plot', '# * EXT_SOURCE ì™€ DAYS_BIRTH ë³€ìˆ˜ê°„ì˜ pair plotì„ ê·¸ë\xa0¤ë³´ìž. ', '# * pair plotì€ ê°ê°ì˜ ë¶„í¬ë¥¼ ë³´ì—¬ì¤„ ë¿ë§Œ ì•„ë‹ˆë¼, ì—¬ëŸ¬ ë³€ìˆ˜ê°„ì˜ ê´€ê³„ë„ ë³´ì—¬ì£¼ëŠ” ì¢‹ì€ ì‹œê°í™”ì´ë‹¤.', '# In[37]:', '# Copy the data for plotting', '# ê³\xa0ê° ë‚˜ì´ ì»¬ëŸ¼ ì¶”ê°€', '# ê²°ì¸¡ì¹˜ drop', '# ë‘ ì»¬ëŸ¼ ê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ê³„ì‚°í•˜ëŠ” í•¨ìˆ˜ ìž‘ì„±', '# Create the pairgrid object', '# ì‚¼ê°í˜• ìœ„ìª½ ì˜ì—\xadì€ ì‚°ì\xa0ë„', '# ëŒ€ê°ì„\xa0ì€ ížˆìŠ¤í†\xa0ê·¸ëž¨', '# ì‚¼ê°í˜• í•˜ë‹¨ì€ density plot', '# * ìœ„ì˜ ê²°ê³¼ì—ì„œ ë¹¨ê°„ìƒ‰ì€ ëŒ€ì¶œ ìƒí™˜ì„ ëª»í•˜ëŠ”ê²½ìš°, íŒŒëž€ìƒ‰ì€ ëŒ€ì¶œ ìƒí™˜í•˜ëŠ” ê²½ìš°ë¥¼ ë‚˜íƒ€ëƒ„.', '# * EXT_SOURCE_1ê³¼ YEARS_BIRTH ê°„ì˜ ì–‘ì˜ ì„\xa0í˜•ê´€ê³„ê°€ ë‚˜íƒ€ë‚œë‹¤.', '# ', '# ## 7) Feature Engineering', '# * ê¸°ì¡´ ë°ì´í„°ë¥¼ í™œìš©í•´ì„œ ìƒˆë¡œ featureë¥¼ ì¶”ê°€í•œë‹¤ê±°ë‚˜, ì¤‘ìš”í•œ ë³€ìˆ˜ë§Œ ê³\xa0ë¥¸ë‹¤ê±°ë‚˜, ì°¨ì›ì„ ì¤„ì´ëŠ” ë°©ì‹ ë“± ì—¬ëŸ¬ê°€ì§€ feature engineering ë°©ë²•ì´ ìžˆìŒ.', '# ì´ ë…¸íŠ¸ë¶ì—ì„œëŠ” ì•„ëž˜ ë‘ê°€ì§€ ë°©ë²•ì˜ feature engineeringì„ í•´ë³¼ê²ƒì´ë‹¤.', '# ', '# ### 7-1) Polynomial Features', '# > ê³¡ì„\xa0 í˜•íƒœë¥¼ ë„ëŠ” ë°ì´í„°ë¥¼ ì\xa0œê³±, ì„¸ì\xa0œê³±ì˜ ê°’ìœ¼ë¡œ ë§Œë“¤ì–´ì„œ ì¼ì°¨ë°©ì\xa0•ì‹ì´ ë˜ë„ë¡ í•\xa0 ìˆ˜ ìžˆìŒ. ì´ë\xa0‡ê²Œ datasetì˜ featureë¥¼ ì¡°ì\xa0•í•˜ì—¬ ë‹¤í•\xadì‹ì„ ì¼ì°¨ë°©ì\xa0•ì‹ìœ¼ë¡œ ë§Œë“¤ë©´ Gradient Descent ê°™ì€ ì•Œê³\xa0ë¦¬ì¦˜ì„ ì‚¬ìš©í•´ì„œ í•™ìŠµì‹œí‚¬ìˆ˜ ìžˆìŒ.', '# ', '# * ì—¬ê¸°ì—ì„œëŠ” EXT_SOURCE_1ë¥¼ ì\xa0œê³±í•œê°’ê³¼ EXT_SOURCE_2ë¥¼ ì\xa0œê³±í•œ ê°’, ê·¸ë¦¬ê³\xa0 EXT_SOURCE_1 x EXT_SOURCE_2 ì™€ EXT_SOURCE_1 x EXT_SOURCE_2^2 ê°™ì€ ë‘ ë³€ìˆ˜ê°„ì˜ ê³±ì„ ìƒˆë¡œìš´ ë³€ìˆ˜ë¡œ ë§Œë“¤ ìˆ˜ ìžˆë‹¤.ì´ëŸ¬í•œ ë³€ìˆ˜ë¥¼ ìƒí˜¸ìž‘ìš©í•\xad ì´ë¼ê³\xa0 í•œë‹¤.', '# ', '# * ì–´ë–¤ ë³€ìˆ˜ ê°ê°ì€ targetë³€ìˆ˜ì— ì˜í–¥ì„ ë¯¸ì¹˜ì§€ ì•Šì„ ìˆ˜ ìžˆì§€ë§Œ, ì´ ë‘ ë³€ìˆ˜ë¥¼ ê²°í•©í–ˆì„ë•Œ targetë³€ìˆ˜ì— ì˜í–¥ì„ ë¯¸ì¹\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# * ìƒí˜¸ìž‘ìš©í•\xadì€ í†µê³„ëª¨ë¸ì—ì„œ ë‹¤ìˆ˜ì˜ ë³€ìˆ˜ë“¤ì˜ íš¨ê³¼ë¥¼ íŒŒì•…í•˜ê¸°ìœ„í•´ ì‚¬ìš©ë˜ê³¤í•œë‹¤. í•˜ì§€ë§Œ ë¨¸ì‹\xa0ëŸ¬ë‹ì—ëŠ” ìžì£¼ ì‚¬ìš©ë˜ëŠ”ê²ƒì„ ë³´ì§€ëŠ” ëª»í–ˆë‹¤. ê·¸ëž˜ì„œ í•œë²ˆ ì´ ìƒí˜¸ìž‘ìš©í•\xadì´ ëª¨ë¸ì˜ˆì¸¡ë\xa0¥ì— ë„ì›€ì´ ë˜ëŠ”ì§€ ì²´í¬í•´ë³¼ê²ƒì´ë‹¤.', '# ', '# * ì•„ëž˜ ì½”ë“œì—ì„œ EXT_SOURCE, DAYS_BIRTH ë³€ìˆ˜ë¥¼ ì‚¬ìš©í•´ì„œ polynomial featureë¥¼ ë§Œë“¤ì–´ë³¼ê²ƒì´ë‹¤.', '# ', '# In[38]:', '# Make a new dataframe for polynomial features', '# ê²°ì¸¡ì¹˜ ì²˜ë¦¬ë¥¼ ìœ„í•´ imputer í˜¸ì¶œ', '# targetê°’ ë”°ë¡œ ì\xa0€ìž¥', '# targetê°’ ì\xa0œì™¸í•œ ë‚˜ë¨¸ì§€ ë³€ìˆ˜ ì\xa0€ìž¥ ', '# ê²°ì¸¡ì¹˜ imputeë¡œ ë©”ê¾¸ê¸° (train ë°ì´í„° ê¸°ì¤€ìœ¼ë¡œ fití•˜ê³\xa0, trainê³¼ testì— ë‘˜ë‹¤ transform ì\xa0ìš©)', '# In[39]:', '# imputer ì\xa0ìš© í›„', '# In[40]:', '# In[41]:', '# Create the polynomial object with specified degree', '# In[42]:', '# Train the polynomial features (trainë°ì´í„° ê¸°ì¤€ìœ¼ë¡œ fit)', '# Transform the features', '# * get_feature_names ë©”ì†Œë“œë¥¼ ì‚¬ìš©í•´ì„œ ë‹¤í•\xadì‹ ì\xa0ìš©í•œ ë³€ìˆ˜ì´ë¦„ í™•ì¸', '# In[43]:', '# * 35ê°œì˜ featureê°€ ë§Œë“¤ì–´ì§„ê²ƒì„ í™•ì¸.ì´ì\xa0œ ì´ ìƒˆë¡œìš´ Featureë“¤ì´ targetê³¼ ìƒê´€ê´€ê³„ê°€ ìžˆëŠ”ì§€ í™•ì¸í•´ë³´ìž', '# In[44]:', '# Create a dataframe of the features ', '# dropí–ˆë˜ TARGETë³€ìˆ˜ ë‹¤ì‹œ ì¶”ê°€', '# TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê´€ê³„ í™•ì¸', '# Display most negative and most positive', '# * ë‹¤í•\xadì‹ìœ¼ë¡œ ë§Œë“¤ì–´ì§„ ëª‡ëª‡ ìƒˆë¡œìš´ ë³€ìˆ˜ë“¤ì€ ê¸°ì¡´ ë³€ìˆ˜ë³´ë‹¤ ìƒê´€ê´€ê³„ê°€ ë” ë†’ë‹¤.', '# (ìœ„ì—ì„œ ê¸°ì¡´ ë³€ìˆ˜ì™€ TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê´€ê³„ì¤‘ ê°€ìž¥ ë†’ì•˜ë˜ ê°’ì´ EXT_SOURCE_3 ë³€ìˆ˜ê°€ -0.18ì´ì—ˆëŠ”ë°, ë‘ ë³€ìˆ˜ EXT_SOURCE_2 EXT_SOURCE_3 ë¥¼ ì¡°í•©í•œ ë³€ìˆ˜ëŠ” -0.19ë¡œ ë”í¼)', '# ', '# * ì‹¤ì\xa0œ ì´ ë³€ìˆ˜ê°€ ëª¨ë¸ì— ì˜í–¥ì´ ìžˆëŠ”ì§€ëŠ” ì´ ë³€ìˆ˜ë¥¼ ë„£ì—ˆì„ë•Œì™€ ëºì„ë•Œ ë‘˜ë‹¤ í…ŒìŠ¤íŠ¸í•´ë³´ë©´ëœë‹¤.', '# ', '# In[45]:', '# Put test features into dataframe', '# ì›ë³¸ train ë°ì´í„°ì— ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ mergeí•´ì„œ ìƒˆë¡œìš´ ë°ì´í„°ì…‹ ë§Œë“¤ê¸°', '# ì›ë³¸ test ë°ì´í„°ì— ìƒˆë¡œ ë§Œë“\xa0 ë‹¤í•\xadë³€ìˆ˜ë¥¼ mergeí•´ì„œ ìƒˆë¡œìš´ ë°ì´í„°ì…‹ ë§Œë“¤ê¸°', '# Align the dataframes => trainë°ì´í„°ì…‹ ê¸°ì¤€ìœ¼ë¡œ align ', '# Print out the new shapes', '# ### 7-2) Domain Knowledge Features', ""# * CREDIT_INCOME_PERCENT: the percentage of the credit amount relative to a client's income"", ""# * ANNUITY_INCOME_PERCENT: the percentage of the loan annuity relative to a client's income"", '# * CREDIT_TERM: the length of the payment in months (since the annuity is the monthly amount due', ""# * DAYS_EMPLOYED_PERCENT: the percentage of the days employed relative to the client's age"", '# In[46]:', '# trainë°ì´í„°ì— ìƒˆë¡œìš´ ë³€ìˆ˜ ì¶”ê°€', '# In[47]:', '# testë°ì´í„°ì— ìƒˆë¡œìš´ ë³€ìˆ˜ ì¶”ê°€', '# * domainê¸°ë°˜ìœ¼ë¡œ ìƒˆë¡œ ë§Œë“\xa0 ë³€ìˆ˜ë¥¼ TARGETë³„ë¡œ ë‹¤ë¥¸ ì»¬ëŸ¬ë¡œ KDE plotì„ ê·¸ë\xa0¤ë³´ìž', '# In[48]:', '# * Target=0ì¼ë•Œì™€ 1ì¼ë•Œ ê° ë³€ìˆ˜ì˜ ë¶„í¬ê°€ ë³„ ì°¨ì´ê°€ì—†ì–´ì„œ ì´ featureê°€ ìœ\xa0ì˜ë¯¸í•\xa0ì§€ í…ŒìŠ¤íŠ¸í•´ë³´ìž', '# ### Baseline', '# - ìš°ë¦¬ëŠ” ëŒ€ì¶œì„ ê°šì§€ ëª»í•\xa0 í™•ë¥\xa0ì„ ì˜ˆì¸¡í•˜ê³\xa0ìž í•œë‹¤. ê·¸ëž˜ì„œ ë§Œì•½ ì•„ì˜ˆ ëª¨ë¥´ê²\xa0ë‹¤ê³\xa0í•˜ë©´ test setì˜ ëª¨ë“\xa0 ê´€ì¸¡ì¹˜ì— 0.5ë¼ê³\xa0 ì˜ˆì¸¡í•\xa0ìˆ˜ë„ìžˆë‹¤. ì´ë\xa0‡ê²Œí•˜ë©´ AUC ROCê°’ì´ 0.5ë¡œ ë‚˜ì˜¬ê²ƒì´ë‹¤.', '# ## 8) Logistic Regression Implementation', '# - ëª¨ë“\xa0 categorical ë³€ìˆ˜ë¥¼ encodingí•œ ê²ƒì„ ì‚¬ìš©í•\xa0ê²ƒì´ë‹¤. ê·¸ë¦¬ê³\xa0 ê²°ì¸¡ì¹˜ë¥¼ imputationìœ¼ë¡œ ì±„ìš¸ê²ƒì´ê³\xa0, ë³€ìˆ˜ë¥¼ normalizingí•\xa0ê²ƒì´ë‹¤. ', '# In[49]:', '# training ë°ì´í„°ì—ì„œ TARGET ë³€ìˆ˜ drop -> TARGETë³€ìˆ˜ëŠ” ê²°ì¸¡ì¹˜ì²˜ë¦¬ ë° ScalingëŒ€ìƒì•„ë‹ˆê¸°ë•Œë¬¸ì—', '# ë³€ìˆ˜ì´ë¦„', '# testing ë°ì´í„° ë³µì‚¬', '# ê²°ì¸¡ì¹˜ë¥¼ medianê°’ìœ¼ë¡œ ì²˜ë¦¬', '# ê°ê°ì˜ ë³€ìˆ˜ë¥¼ 0~1 ì‚¬ì´ì˜ ê°’ìœ¼ë¡œ ë§Œë“¤ì–´ì£¼ëŠ” MinMaxScaler ì‚¬ìš©', '# training ë°ì´í„°ì— fit', '# trainingë°ì´í„°ì™€ testingë°ì´í„°ì— ë‘˜ë‹¤ transform', '# Scaling', '# - ì´ì\xa0œ LogisticRegressionì„ ì‚¬ìš©í•´ë³¼ê²ƒì¸ë°, ì˜¤ë²„í”¼íŒ…ì„ ì¡°ì\xa0ˆí•´ì£¼ëŠ” regularization íŒŒë¼ë¯¸í„° C ë¥¼ ë‚®ì¶°ì„œ ì„¸íŒ…ì„ í•´ë³¼ê²ƒì´ë‹¤. ', '# - ìš°ì„\xa0 log_regë¼ëŠ” ì´ë¦„ìœ¼ë¡œ modelì„ ë§Œë“¤ì–´ì£¼ê³\xa0, .fit()ì„ ì‚¬ìš©í•´ì„œ ëª¨ë¸ì„ í›ˆë\xa0¨ì‹œí‚¤ê³\xa0, .predict_proba()ë¥¼ ì‚¬ìš©í•´ì„œ testing dataì— ëŒ€í•œ ê°’ì„ ì˜ˆì¸¡í•\xa0ê²ƒì´ë‹¤.', '# In[50]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# - ì˜ˆì¸¡í•œ ê²°ê³¼ê°’ì€ mx2 ë°°ì—´ë¡œ ë‚˜ì˜¤ëŠ”ë°(mì€ ê´€ì¸¡ì¹˜ ê°œìˆ˜),ì²«ë²ˆì§¸ ì»¬ëŸ¼ì€ targetì´ 0ì¼ í™•ë¥\xa0ì´ê³\xa0 ë‘ë²ˆì§¸ ì»¬ëŸ¼ì€ targetì´ 1ì¼ í™•ë¥\xa0ì´ë‹¤.(ë”°ë¼ì„œ, ë‘ ì»¬ëŸ¼ì˜ í•©ì€ 1ì´ë˜ì–´ì•¼í•¨)', '# - ìš°ë¦¬ê°€ ì›í•˜ëŠ” ê²ƒì€ ëŒ€ì¶œì„ ê°šì§€ ëª»í•\xa0 í™•ë¥\xa0ì´ë¯€ë¡œ, target=1ì¼ í™•ë¥\xa0ì¸ ë‘ë²ˆì§¸ ì»¬ëŸ¼ì„ ì„\xa0íƒí•´ì•¼í•œë‹¤.', '# In[51]:', '# ë‘ê°œì˜ ì»¬ëŸ¼ì´ ë‚˜ì˜¤ëŠ” ê²ƒì„ í™•ì¸', '# In[52]:', '# Make predictions', '# ë‘ë²ˆì§¸ ì»¬ëŸ¼ ì„\xa0íƒ', '# In[53]:', '# submissioníŒŒì¼ì˜ í˜•ì‹ê³¼ ë™ì¼í•˜ê²Œ SK_ID_CURR ì™€ TARGETì´ ë“¤ì–´ê°€ê²Œ ë§Œë“¤ì–´ì¤€ë‹¤', '# In[54]:', '# submission ë°ì´í„°ë¥¼ csv fileë¡œ ì\xa0€ìž¥', '# * LogisticRegression Score : 0.67887', '# ## 9) Improved Model: Random Forest', ""# * ê²°ì\xa0•íŠ¸ë¦¬ì˜ ë‹¨ì\xa0ì„ ë³´ì™„í•˜ê³\xa0 ìž¥ì\xa0ì€ ê·¸ëŒ€ë¡œ ê°€ì§€ê³\xa0 ìžˆëŠ” ëª¨ë¸. ëŒ€í‘œì\xa0ì¸ 'ë°°ê¹…' ëª¨ë¸ì´ë‹¤.(ë°°ê¹…(Bagging)ì€ bootstrap aggregatingì˜ ì¤„ìž„ë§)"", '# * í›ˆë\xa0¨ ê³¼ì\xa0•ì—ì„œ êµ¬ì„±í•œ ë‹¤ìˆ˜ì˜ ê²°ì\xa0• íŠ¸ë¦¬ë“¤ì„ ëžœë¤í•˜ê²Œ í•™ìŠµì‹œì¼œ ë¶„ë¥˜ ë˜ëŠ” íšŒê·€ì˜ ê²°ê³¼ë„ì¶œì— ì‚¬ìš©í•¨.', '# * ê¸°ë³¸ ê²°ì\xa0•íŠ¸ë¦¬ëŠ” í•´ë‹¹ ë°ì´í„°ì— ëŒ€í•´ ë§žì¶°ì„œ ë¶„ë¥˜ë¥¼ ì§„í–‰í•œ ê²ƒì´ê¸° ë•Œë¬¸ì— ê³¼ì\xa0í•© í˜„ìƒì´ ìžì£¼ ë‚˜íƒ€ë‚˜ëŠ” ë‹¨ì\xa0ì´ ìžˆëŠ”ë°, ëžœë¤í¬ë\xa0ˆìŠ¤íŠ¸ëŠ” ê°ê°ì˜ íŠ¸ë¦¬ê°€ ë…ë¦½ì\xa0ìœ¼ë¡œ í•™ìŠµí•´ì„œ ì´ëŸ° ë‹¨ì\xa0ì„ ê°œì„\xa0í•¨.', '# ', '# ', '# ### í•˜ì´í¼íŒŒë¼ë¯¸í„° íŠœë‹', '# > **n_estimators**', '#     * ê²°ì\xa0•íŠ¸ë¦¬ì˜ ê°¯ìˆ˜ë¥¼ ì§€ì\xa0• (Default=10)', '#     * ë¬´ìž‘ì\xa0• íŠ¸ë¦¬ ê°¯ìˆ˜ë¥¼ ëŠ˜ë¦°ë‹¤ê³\xa0í•´ì„œ ì„±ëŠ¥ ì¢‹ì•„ì§€ëŠ” ê²ƒ ì•„ë‹˜.ì‹œê°„ì´ ê±¸ë¦´ ìˆ˜ ìžˆìŒ', '# > **random_state**', '#     * ëžœë¤í•˜ê²Œ ë§Œë“¤ì–´ì§€ê¸° ë•Œë¬¸ì— random_stateë¥¼ ê³\xa0ì\xa0•í•´ì•¼ ê°™ì€ ê²°ê³¼ë¥¼ ë³¼ ìˆ˜ ìžˆìŒ', '# > **verbose**', '#     * ì‹¤í–‰ ê³¼ì\xa0• ì¶œë\xa0¥ ì—¬ë¶€', '# > **n_jobs**', '#     * ì\xa0í•©ì„±ê³¼ ì˜ˆì¸¡ì„±ì„ ìœ„í•´ ë³‘ë\xa0¬ë¡œ ì‹¤í–‰í•\xa0 ìž‘ì—… ìˆ˜', '#     * n_jobs=-1ë¡œ ì§€ì\xa0•í•˜ë©´ ì»´í“¨í„°ì˜ ëª¨ë“\xa0 ì½”ì–´ë¥¼ ì‚¬ìš©í•¨', '# In[55]:', '# In[56]:', '# training dataì— í›ˆë\xa0¨', '# feature importances ì¶”ì¶œ', '# test ë°ì´í„°ì— ëŒ€í•´ ì˜ˆì¸¡', '# In[57]:', '# ì\xa0œì¶œìš© dataframeë§Œë“¤ê¸°', '# csv íŒŒì¼ ì\xa0€ìž¥', '# * RandomForest Score :', '# ### 9-1) Feature engineeringí•œ ë°ì´í„°ë¡œ ì˜ˆì¸¡í•´ë³´ìž', '# * (ì°¸ê³\xa0) ê¸°ì¡´ train ë³€ìˆ˜ì— ë‹¤í•\xadë³€ìˆ˜ ì¶”ê°€í•œ app_train_polyë°ì´í„°ê°€ ì•„ë‹ˆë¼, ë‹¤í•\xadë³€ìˆ˜ë§Œ ìžˆëŠ” poly_featuresë¡œ ì˜ˆì¸¡í•œê°’', '# In[58]:', '# Impute the polynomial features', '# poly_featuresëŠ” ë‹¤í•\xadë³€ìˆ˜ë§Œ ìžˆëŠ” ë°ì´í„°', '# app_train_polyëŠ” ê¸°ì¡´ train ë°ì´í„°ì— ë‹¤í•\xadë³€ìˆ˜ ì¶”ê°€í•œ ë°ì´í„°', '# Scale the polynomial features', '# In[59]:', '# training dataì— í›ˆë\xa0¨ì‹œí‚¤ê¸°', '# testë°ì´í„°ë¡œ ì˜ˆì¸¡', '# In[60]:', '# * Random Forest engineered Score :0.60467', '# ### 9-2) Domainê¸°ë°˜ìœ¼ë¡œ ë§Œë“\xa0 featureë¡œ ì˜ˆì¸¡í•´ë³´ìž', '# In[61]:', '# In[62]:', '# TARGETë³€ìˆ˜ì\xa0œê±°', '# ë„ë©”ì¸ê¸°ë°˜ìœ¼ë¡œ ë§Œë“\xa0 ë°ì´í„°ì˜ ë³€ìˆ˜ëª… ì¶”ì¶œ', '# ê²°ì¸¡ì¹˜ ì²˜ë¦¬', '# imputerì²˜ë¦¬ í•´ì£¼ê³\xa0ë‚˜ë©´ DataFrame í˜•íƒœì—ì„œ arrayí˜•íƒœë¡œ ë°”ë€œ', '# ëžœë¤í¬ë\xa0ˆìŠ¤íŠ¸ ëª¨ë¸ ë§Œë“¤ê¸°', '# í›ˆë\xa0¨ì‹œí‚¤ê¸°', '# ë³€ìˆ˜ ì¤‘ìš”ë„ ì¶”ì¶œ', '# testë°ì´í„° ë„£ì–´ì„œ ì˜ˆì¸¡í•˜ë©´ TARGET=0ì¼ í™•ë¥\xa0ì„ ì˜ˆì¸¡í•œ ì»¬ëŸ¼ í•œê°œì™€ TARGET=1ì¼ í™•ë¥\xa0ì„ ì˜ˆì¸¡í•œ ì»¬ëŸ¼ í•œê°œê°€ ìžˆëŠ”ë°', '# In[63]:', '# * Random Forest domain features :0.68354', '# ## 10) Model Interpretation: Feature Importances', '# ', '# * ì–´ë–¤ ë³€ìˆ˜ê°€ ê°€ìž¥ ê´€ë\xa0¨ì´ ìžˆëŠ”ì§€ë¥¼ ì•Œê¸°ìœ„í•œ ê°€ìž¥ ê°„ë‹¨í•œ ë°©ë²•ì€ ëžœë¤í¬ë\xa0ˆìŠ¤íŠ¸ì˜ feature importancesë¥¼ í™•ì¸í•˜ëŠ” ê²ƒì´ë‹¤. EDAê³¼ì\xa0•ì—ì„œ ë³€ìˆ˜ê°„ ìƒê´€ê´€ê³„ë¶„ì„ì„ í†µí•´ EXT_SOURCE ë³€ìˆ˜ì™€ DAYS_BIRTH ë³€ìˆ˜ê°€ ì¤‘ìš”í•œ ë³€ìˆ˜ë¼ê³\xa0 ìƒê°í•´ë³¼ìˆ˜ìžˆë‹¤.', '# * ë‚˜ì¤‘ì—ëŠ” ì´ feature importancesë¥¼ ì‚¬ìš©í•´ì„œ ì°¨ì›ì„ ì¤„ì—¬ë³¼ê²ƒì´ë‹¤.', '# In[64]:', '    # ì¤‘ìš”ë„ ë†’ì€ ìˆœìœ¼ë¡œ ë‚˜ì—´', '    # ì¤‘ìš”ë„ ì\xa0„ì²´í•© ëŒ€ë¹„ í•´ë‹¹ ë³€ìˆ˜ì˜ ì¤‘ìš”ë„ ë¹„ì¤‘ë³€ìˆ˜ ì¶”ê°€', '    # ì‹œê°í™”', '    # Set the yticks and labels', '    # Plot labeling', '# In[65]:', '# In[66]:', '# feature engineeringì•ˆí•œ ê¸°ë³¸ ë³€ìˆ˜ë“¤ë¡œ ë³€ìˆ˜ ì¤‘ìš”ë„ ì¶”ì¶œ', '# * ì˜ˆìƒí–ˆë˜ê²ƒ ì²˜ëŸ¼ EXT_SOURCE ë³€ìˆ˜ì™€ DAYS_BIRTH ë³€ìˆ˜ê°€ ì¤‘ìš”ë³€ìˆ˜ë¡œ ë‚˜ì˜¨ê²ƒì„ í™•ì¸.', '# * feature importancesê°€ ëª¨ë¸ì„ í•´ì„í•˜ê³\xa0 ì°¨ì›ì„ ì¤„ì´ëŠ”ë° ê°€ìž¥ ì¢‹ì€ ë°©ë²•ì´ë¼ê³\xa0 í•\xa0 ìˆ˜ëŠ” ì—†ì§€ë§Œ, ì˜ˆì¸¡ì„ í•\xa0ë•Œ ëª¨ë¸ì´ ì–´ë–¤ ìš”ì¸ì„ ê³\xa0ë\xa0¤í•˜ëŠ”ì§€ë¥¼ ì´í•´í•˜ëŠ”ë° ë„ì›€ì´ ëœë‹¤.', '# In[67]:', '# In[68]:', '# domainê¸°ë°˜ìœ¼ë¡œ ë§Œë“\xa0 ë³€ìˆ˜ ëŒ€ìƒìœ¼ë¡œ ë³€ìˆ˜ ì¤‘ìš”ë„ ë„ì¶œ', '# * ë„ë©”ì¸ ê¸°ë°˜ìœ¼ë¡œ ë§Œë“\xa0 4ê°œì˜ ë³€ìˆ˜ê°€ ë³€ìˆ˜ ì¤‘ìš”ë„ top15ì— í¬í•¨ë˜ì–´ìžˆëŠ” ê²ƒì„ ë³¼ ìˆ˜ ìžˆë‹¤. ', '# > ê²°ë¡\xa0ì\xa0ìœ¼ë¡œ, ë„ë©”ì¸ê¸°ë°˜ìœ¼ë¡œ ë§Œë“\xa0 ë³€ìˆ˜ë¥¼ ëª¨ë¸ì— í¬í•¨í–ˆì„ë•Œê°€ scoreê°€ ê°€ìž¥ ì¢‹ì•˜ìŒ.', '# In[ ]:', '# In[ ]:']",384
fan-hcd-submission.py,"['# coding: utf-8', '# ## Imports', '# In[1]:', '# numpy and pandas for data manipulation', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# ## Read in Data ', '# ', '# In[2]:', '# List files available', '# In[3]:', '# Training data', '# The training data has 307511 observations (each one a separate loan) and 122 features (variables) including the `TARGET` (the label we want to predict).', '# In[4]:', '# Testing data features', '# The test set is considerably smaller and lacks a `TARGET` column. ', '# ## Examine the Distribution of the Target Column', '# ', '# The target is what we are asked to predict: either a 0 for the loan was repaid on time, or a 1 indicating the client had payment difficulties. We can first examine the number of loans falling into each category.', '# In[5]:', '# In[6]:', '# From this plot, we can see it is an imbalanced class problem.', '# ## Examine Missing Values', '# ', '# Next we can look at the number and percentage of missing values in each column. ', '# In[7]:', ""# Let's now look at the number of unique entries in each of the `object` (categorical) columns."", '# In[8]:', '# Number of unique classes in each object column', '# ### Label Encoding and One-Hot Encoding', '# ', '# For any categorical variable (`dtype == object`) with 2 unique categories, use label encoding, and for any categorical variable with more than 2 unique categories, use one-hot encoding. ', '# ', '# For label encoding, we use the Scikit-Learn `LabelEncoder` and for one-hot encoding, the pandas `get_dummies(df)` function.', '# In[9]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[10]:', '# one-hot encoding of categorical variables', '# ### Aligning Training and Testing Data', '# ', '# In[11]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# ### Find outlier for column""DAYS_BIRTH"" and ""DAYS_EMPLOYED""', '# ', '# ', '# ', '# In[12]:', '# In[13]:', '# In[14]:', '# Check the anomalous clients to see they have higher or low rates of default than the rest of the clients.', '# In[15]:', '# Fill in the anomalous values with not a number (`np.nan`) in training and test dataset, then create a new boolean column indicating whether or not the value was anomalous.', '# ', '# ', '# In[16]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# Check values distribution after repalcementin in train dataset', '# In[17]:', '# ### Find correlations', '# ', '# ', '# ', '# In[18]:', '# Find correlations with the target and sort', '# Display correlations', '# `DAYS_BIRTH` (the age in days of the client at the time of the loan in negative days) is the most positive correlation, meaning that as the client gets older, they are less likely to default on their loan (ie the target == 0). ', '# ### Effect of Age on Repayment', '# In[19]:', '# Find the correlation of the positive days since birth and target', '# In[20]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[21]:', '# Group by the bin and calculate averages', '# In[22]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# As the client gets older, there is a negative linear relationship with the target meaning that as clients get older, they tend to repay their loans on time more often. Although this is not a significant correlation (-0.07 correlation coefficient), this variable is likely going to be useful in a machine learning model because it does affect the target. ', '# ## Domain Knowledge Features', '# ', '# ', '# ', '# In[23]:', '# In[24]:', '# In[25]:', '# Print out the new shapes', '# ### Read in bureau and Bureau Balance', '# In[26]:', '# In[27]:', '# ### Function for Numeric Aggregations', '# In[28]:', '    # Remove id variables other than grouping variable', '    # Group by the specified variable and calculate the statistics', '    # Need to create new column names', '    # Iterate through the variables names', '        # Skip the grouping variable', '            # Iterate through the stat names', '                # Make a new column name for the variable and stat', '# ### Function to Handle Categorical Variables', '# In[29]:', '    # Select the categorical columns', '    # Make sure to put the identifying id on the column', '    # Groupby the group var and calculate the sum and mean', '    # Iterate through the columns in level 0', '        # Iterate through the stats in level 1', '            # Make a new column name', '# In[30]:', '# Calculate value count statistics for each `SK_ID_CURR` in bureau', '# In[31]:', '# Counts of bureau', '# In[32]:', '# Calculate value count statistics for each `SK_ID_CURR` in butrau_balance', '# In[33]:', '# Counts of each type of status for each previous loan', '# ### Aggregated Stats of Bureau Balance by loan', '# In[34]:', '# Dataframe grouped by the loan', '# Merge to include the SK_ID_CURR', '# ### Aggregated Stats of Bureau Balance by Client', '# In[35]:', '# Merge to include the SK_ID_CURR', '# Aggregate the stats for each client', '# ### Insert Computed Features into app_train_domain Data', '# In[36]:', '# Merge with the value counts of bureau', '# Merge with the stats of bureau', '# Merge with the monthly information grouped by client', '# In[37]:', '# ### Calculate Information for test_domain Data', '# In[38]:', '# Merge with the value counts of bureau', '# Merge with the stats of bureau', '# Merge with the value counts of bureau balance', '# In[39]:', '# ### Align the testing and training dataframes', '# In[40]:', ""# Align the dataframes, this will remove the 'TARGET' column"", '# In[41]:', '# In[42]:', '# Free up memory by deleting old objects', '# ### Logistic Regression ImplementationÂ¶', '# In[43]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[44]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[45]:', '# Make predictions', '# In[46]:', '# Submission dataframe', '# In[47]:', '# Save the submission to a csv file', '# ##### This model scores 0.6837.', '# ##  Random Forest with Domain Features', '# ', '# In[48]:', '# Impute the domainnomial features', '# Scale the domainnomial features', '# Train on the training data', '# Extract feature importances', '# Make predictions on the test data', '# In[49]:', '# Make a submission dataframe', '# Save the submission dataframe', '# ##### This model scores 0.6781.', '# ### Light Gradient Boosting Machine', '# In[50]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# In[51]:', '# In[52]:', '# This submission scores 0.7628. ']",223
features.py,"['# coding: utf-8', '# # Features', '# In[ ]:', '# bb feature', '# bureau', ""bureau['ADJ_DAYS'] = (bureau.DAYS_CREDIT - bureau.DAYS_CREDIT.min()) / (bureau.DAYS_CREDIT.max() - bureau.DAYS_CREDIT.min()) + 0.5 # more recent, more effecitve"", '# application count', ""bur_act_count = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['SK_ID_BUREAU'].count() # fillna: 0"", ""bur_bad_count = bureau.loc[bureau.CREDIT_ACTIVE=='Bad debt'].groupby('SK_ID_CURR')['SK_ID_BUREAU'].count() # fillna: 0"", ""bur_sold_count = bureau.loc[bureau.CREDIT_ACTIVE=='Sold out'].groupby('SK_ID_CURR')['SK_ID_BUREAU'].count() # fillna: 0"", '# application date', '# application itervel', '# overdue days', '# overdue amount', ""bur_total_max_overdue_adj = bureau.groupby('SK_ID_CURR')['ADJ_AMT_CREDIT_MAX_OVERDUE'].sum() # use adj days"", '# adj prelong', ""bur_avg_prelonged = bureau.groupby('SK_ID_CURR')['ADJ_CNT_CREDIT_PROLONG'].mean().fillna(0) # use adj days"", '# historical amount', '# current amount', ""bur_active_total_amount = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM'].sum() # fillna 0"", ""bur_active_avg_amount = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM'].mean() # fillna 0"", ""bur_active_total_debt = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_DEBT'].sum() # fillna 0"", ""bur_active_avg_debt = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_DEBT'].mean() # fillna 0"", ""bur_active_total_limit  = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_LIMIT'].sum() # fillna 0"", ""bur_active_avg_limit  = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_LIMIT'].mean() # fillna 0"", ""bur_active_total_overdue = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_OVERDUE'].sum() # fillna 0"", ""bur_active_avg_overdue = bureau.loc[bureau.CREDIT_ACTIVE=='Active'].groupby('SK_ID_CURR')['AMT_CREDIT_SUM_OVERDUE'].mean() # fillna 0"", 'bur_active_ratio_debt_credit = (bur_active_total_debt / bur_active_total_amount.map(lambda x: x+0.1)) # fillna 0', 'bur_active_ratio_overdue_debt = (bur_active_total_overdue / bur_active_total_debt.map(lambda x: x+0.1)) # fillna 0', '# credit update', '# annuity', ""bur_avg_annuity = bureau.groupby('SK_ID_CURR')['AMT_ANNUITY'].mean() # can't fillna 0"", ""bur_total_annuity = bureau.groupby('SK_ID_CURR')['AMT_ANNUITY'].sum() # can't fillna 0"", ""bur_avg_term = bureau.loc[bureau.term < float('inf')].groupby('SK_ID_CURR')['term'].mean() # can't fillna 0"", '# In[ ]:', '# count cards', '# INSTALMENTS', '# limit', '# avg drawing amount', '# count Refused', '# current credit card situation', ""ccb_cur_total_limit = last_month_credit.loc[last_month_credit.NAME_CONTRACT_STATUS == 'Active'].groupby('SK_ID_CURR')['AMT_CREDIT_LIMIT_ACTUAL'].sum() # fillna: 0"", '# drawing in 1y', '# drawing in 6m', '# DPD', '# In[ ]:', '# recent application', '# recent late & less time ', '# recent late & less amount', '# previous application times', '# credit card', '# change times', '# avg instl', '# total late & less time ', '# total late & less amount', '# total payment', '# total late & less time in recent 1 year', '# payment 1 year', '# avg instl', '# total late & less amount', '# total payment', '# total late & less time in recent 6 months', '# avg instl', '# total late & less amount', '# total payment', '# active account', '# In[ ]:', '# times of INSTALMENT change', '# avg INSTALMENT', '# active INSTALMENT', '# DPD', '# INSTALMENT: ratio of end status of each type', '# In[ ]:', '# cat', '# selected version', '# num', '# create new variables', '# compare application and actual credit', '# adjusted: more recent, more important', '# down payment', '# goods price', '# down payment rate', '# selling area', '# term', '# recent decision', '# application interval', '# days', '# In[ ]:', '# # Derivatives', '# In[ ]:', '# data manipulation', '# time', '# Replace all the day outliers', '# bureau', '# Create the date columns', '# balance', '# Make a date column', '# Convert to timedeltas in days', '# Make date columns', '# Drop the time offset columns', '# # cash', '# # credit', '# installment', '# Make an entityset', '# part 1', '# part 2', '# Relationship between app and bureau', '# Test Relationship between app and bureau', '# Relationship between bureau and bureau balance', '# Relationship between current app and previous apps', '# Test Relationship between current app and previous apps', '# Relationships between previous apps and cash, installments, and credit', '# Add in the defined relationships', '# train features', '# test features', '# # Merge', '# In[4]:', '# bureau_feature_df = pd.read_csv(""../input/features/bureau_feature.csv"")', '# ccb_feature_df = pd.read_csv(""../input/features/ccb_feature.csv"")', '# ip_feature_df = pd.read_csv(""../input/features/ip_feature.csv"")', '# pcb_feature_df = pd.read_csv(""../input/features/pcb_feature.csv"")', '# pa_feature_df = pd.read_csv(""../input/features/pa_feature.csv"")', '# bur_cluster_df = pd.read_csv(""../input/features/bur_cluster.csv"")', ""# full_df = full_df.merge(bureau_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# full_df = full_df.merge(ccb_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# full_df = full_df.merge(ip_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# full_df = full_df.merge(pcb_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# full_df = full_df.merge(pa_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# full_df = full_df.merge(bur_cluster_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(bureau_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(ccb_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(ip_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(pcb_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(pa_feature_df, on = 'SK_ID_CURR', how = 'left')"", ""# test_df = test_df.merge(bur_cluster_df, on = 'SK_ID_CURR', how = 'left')"", '# del bureau_feature_df', '# del ccb_feature_df', '# del ip_feature_df', '# del pcb_feature_df ', '# del pa_feature_df ', '# del bur_cluster_df ', '# # One-Hot', '# ', '# In[ ]:', '# one-hot encoding of categorical variables', '# # Impute', '# ', '# In[ ]:', ""# list(full_df.drop(columns=['TARGET']).columns)"", '# In[ ]:', '# import numpy as np', '# from sklearn.preprocessing import StandardScaler', '# from sklearn.impute import SimpleImputer', '# full_df = full_df.replace([np.inf, -np.inf], np.nan)', '# test_df = test_df.replace([np.inf, -np.inf], np.nan)', '# test_df.head(10)', '# # Feature names', '# features = list(full_df.columns)', '# # Median imputation of missing values', ""# imputer = SimpleImputer(strategy = 'median')"", '# # Scale each feature to 0-1', '# scaler = StandardScaler()', '# # Fit on the training data', '# imputer.fit(full_df)', '# # Transform both training and testing data', '# train = imputer.transform(full_df)', '# test = imputer.transform(test_df)', '# # Repeat with the scaler', '# scaler.fit(train)', '# train = scaler.transform(train)', '# test = scaler.transform(test)', ""# print('Training data shape: ', train.shape)"", ""# print('Testing data shape: ', test.shape)"", '# full_df = pd.DataFrame(data=train, columns=full_df.columns)', '# test_df = pd.DataFrame(data=test, columns=test_df.columns)', '# In[ ]:', '# In[ ]:', '# # Train', '# In[5]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# # Predict', '# In[7]:']",218
first_model_simple_logistic_regression.R,[],0
fork-of-kernel-20200311.py,"['# coding: utf-8', '# # Home Credit Default Risk', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# æ–‡å\xad—åˆ—ã®ã‚«ãƒ†ã‚´ãƒªã‚«ãƒ«å¤‰æ•°æŠ½å‡º', '# display(objct_cols)', '# print(objct_cols_list)', '# æ–‡å\xad—åˆ—ã®åˆ—ã®æ¬\xa0æå€¤ã‚’å¤‰æ›', '# print(df[objct_cols_list].isnull().sum())', '# ã‚¿ãƒ¼ã‚²ãƒƒãƒˆã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°', ""    label_mean = df.groupby(col).TARGET.mean() # groupby()ã§ãƒ©ãƒ™ãƒ«åˆ†ã—ãŸå¾Œã«ãƒ©ãƒ™ãƒ«æ¯Žã®'label'ã®åˆ—ã®å¹³å‡ã‚’å–å¾—"", '    df[col] = df[col].map(label_mean).copy() # df[C]ã«å€¤ã‚’ä»£å…¥', '    test[col] = test[col].map(label_mean).copy() # test ãƒ‡ãƒ¼ã‚¿ã«ã‚‚é©ç”¨ã€‚', '# df[objct_cols_list]', '# æ¬\xa0æå€¤å‡¦ç†', 'df = df.dropna() # æ¬\xa0æå€¤ãŒã‚ã‚‹è¡Œã‚’å‰Šé™¤', '# df = df.fillna(df.mean()) # æ¬\xa0æå€¤ã‚’å¹³å‡ã«ç½®ãæ›ãˆ', '# df = df.fillna(df.median()) # æ¬\xa0æå€¤ã‚’ä¸\xadå¤®å€¤ã«ç½®ãæ›ãˆ', '# print(df.isnull().sum())', '# print(df.shape)', '# ãƒ‡ãƒ¼ã‚¿ã¨ã‚¿ãƒ¼ã‚²ãƒƒãƒˆã«åˆ†å‰²', '# çŸ\xadå¤‰é‡çµ±è¨ˆ', 'select = SelectPercentile(percentile=4) # select 1% features', 'df_selected = select.transform(df) # type:dataFrame->ndarray', '# ndarrayã«å¤‰æ›', '# è¨“ç·´ãƒ‡ãƒ¼ã‚¿ã¨ãƒ†ã‚¹ãƒˆãƒ‡ãƒ¼ã‚¿ã«åˆ†å‰²', '# X_train.shape', '# ãƒ¢ãƒ‡ãƒ«æ§‹ç¯‰', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:']",36
fork-of-simple-features-0064d3.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', ' #  n_estimators=1327, n_jobs=-1, num_leaves=106, objective=None,random_state=None, reg_alpha=0.5129992714397862, reg_lambda=0.38268769901820565, silent=True, subsample=0.7177561548329953, subsample_for_bin=80000,', '  #     subsample_freq=0, verbose=1)', '# In[7]:', '# In[8]:', '# Save the submission dataframe']",12
fork_lightgbm_with_simple_features.py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just added a few features so I thought I had to make release it as well...', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # Some simple new features (percentages)', ""    # df['DAYS_EMPLOYED_PERC'] = df['DAYS_EMPLOYED'] / df['DAYS_BIRTH']"", ""    # df['INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] / df['AMT_CREDIT']"", ""    # df['INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] / df['CNT_FAM_MEMBERS']"", ""    # df['ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] / df['AMT_INCOME_TOTAL']"", ""    # df['PAYMENT_RATE'] = df['AMT_ANNUITY'] / df['AMT_CREDIT']"", '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '            # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance']",47
fork_of_fork_lightgbm_with_simple_features (1).py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just removed a few min, max features. U can see the CV is not good. Dont believe in LB.', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",42
fork_of_fork_lightgbm_with_simple_features.py,"['# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",39
fork_of_fork_lightgbm_with_simple_features_cee847.py,"['# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",39
fork_of_magic_of_weighted_average_rank_0_80 (1).py,"['# USING WEIGHTED AVERAGE RANK METHOD', '# Plese refer this discussion for more detials - https://www.kaggle.com/c/home-credit-default-risk/discussion/60934']",2
fork_tidy_xgb_all_tables_lightgbm_0_792.R,[],0
getting_rid_of_ext_source_variables.R,[],0
giba_post_processing_user_id_boost (1).R,[],0
good-transformations-to-continuous-variables.r,[],0
good_fun.py,"[""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '        # n_estimators=1000,', '        # num_leaves=20,', '        # colsample_bytree=.8,', '        # subsample=.8,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01', '    #    pos = pd.Series(trn_y == 1)', '    #    # Add positive examples', '    #    trn_x = pd.concat([trn_x, trn_x.loc[pos]], axis=0)', '    #    trn_y = pd.concat([trn_y, trn_y.loc[pos]], axis=0)', '    #    # Shuffle data', '    #    idx = np.arange(len(trn_x))', '    #    np.random.shuffle(idx)', '    #    trn_x = trn_x.iloc[idx]', '    #    trn_y = trn_y.iloc[idx]', '# Plot feature importances', '# Plot ROC curves', '    # Plot the roc curve', '# Plot ROC curves']",22
good_fun_lightgbm_in_depth.py,"[""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '        # n_estimators=1000,', '        # num_leaves=20,', '        # colsample_bytree=.8,', '        # subsample=.8,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01', '# Plot feature importances', '# Plot ROC curves', '    # Plot the roc curve', '# Plot ROC curves']",13
good_fun_opti_params_updatedjun4_prev_ratios.py,"[""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '        # n_estimators=1000,', '        # num_leaves=20,', '        # colsample_bytree=.8,', '        # subsample=.8,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01', '    #    pos = pd.Series(trn_y == 1)', '    #    # Add positive examples', '    #    trn_x = pd.concat([trn_x, trn_x.loc[pos]], axis=0)', '    #    trn_y = pd.concat([trn_y, trn_y.loc[pos]], axis=0)', '    #    # Shuffle data', '    #    idx = np.arange(len(trn_x))', '    #    np.random.shuffle(idx)', '    #    trn_x = trn_x.iloc[idx]', '    #    trn_y = trn_y.iloc[idx]', '# Plot feature importances', '# Plot ROC curves', '    # Plot the roc curve', '# Plot ROC curves']",22
good_fun_with_ligthgbm (1).py,"['        # n_estimators=10000,', '        # num_leaves=30,', '        # colsample_bytree=.8,', '        # subsample=.9,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01', '# Plot feature importances']",9
good_fun_with_ligthgbm (2).py,"[""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '        # n_estimators=1000,', '        # num_leaves=20,', '        # colsample_bytree=.8,', '        # subsample=.8,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01']",9
good_fun_with_ligthgbm (3).py,"[""    # buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '    # Plot feature importances', '    # Plot ROC curves', '        # Plot the roc curve', '    # Plot ROC curves', '        # Plot the roc curve', '    # Build model inputs', '    # Create Folds', '    # Train model and get oof and test predictions', '    # Save test predictions', '    # Display a few graphs']",11
good_fun_with_ligthgbm.py,['# Plot feature importances'],1
hc-default-risk-application-data-0-70.r,"['# One - Hot encoding', '# One - Hot encoding']",2
hc-v500.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '#                                                                .agg({""returns"": [np.min, np.max,np.mean]})\\', '#                                                                .reset_index()', ""#    tmp_merge = df[['SK_ID_CURR']]"", ""#    tmp_merge = tmp_merge.merge(tmp, on=['SK_ID_CURR'], how='left')"", ""#    df['min_amt_annuity_v1'] = tmp_merge['des1']"", ""#    df['max_amt_annuity_v1'] = tmp_merge['des2']"", ""#    df['mean_amt_annuity_v1'] = tmp_merge['des3']"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Bureau', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Installments', '# ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""             # 'min_amt_app_fail_v1','max_amt_app_fail_v1','mean_amt_app_fail_v1',"", ""             # 'min_amt_card_fail_v1','max_amt_card_fail_v1','mean_amt_card_fail_v1',"", ""             # 'min_limit_bureau_v1','max_limit_bureau_v1','mean_limit_bureau_v1',"", ""              # 'min_later_install','max_later_install','mean_later_install'"", ""             # 'min_first2_install','max_first2_install','mean_first2_install'"", ""             # 'min_num_version_install','max_num_version_install','mean_num_version_install'"", '# In[ ]:', '    #    continue', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",113
hc-v600.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '#                                                                .agg({""returns"": [np.min, np.max,np.mean]})\\', '#                                                                .reset_index()', ""#    tmp_merge = df[['SK_ID_CURR']]"", ""#    tmp_merge = tmp_merge.merge(tmp, on=['SK_ID_CURR'], how='left')"", ""#    df['min_amt_annuity_v1'] = tmp_merge['des1']"", ""#    df['max_amt_annuity_v1'] = tmp_merge['des2']"", ""#    df['mean_amt_annuity_v1'] = tmp_merge['des3']"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Bureau', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Installments', '# ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""             # 'min_amt_app_fail_v1','max_amt_app_fail_v1','mean_amt_app_fail_v1',"", ""             # 'min_amt_card_fail_v1','max_amt_card_fail_v1','mean_amt_card_fail_v1',"", ""             # 'min_limit_bureau_v1','max_limit_bureau_v1','mean_limit_bureau_v1',"", ""              # 'min_later_install','max_later_install','mean_later_install'"", ""             # 'min_first2_install','max_first2_install','mean_first2_install'"", ""             # 'min_num_version_install','max_num_version_install','mean_num_version_install'"", '# In[ ]:', '    #    continue', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",113
hcdr-single-model-private-score-0-79167-catboost.py,"['# coding: utf-8', '# Please upvote if you find this Notebook useful', '# ', '# My Learnings and mistakes in this competition', '# Learnings', '# All Learning points are covered in this notebook', '# ', '#     Handling large number of features', '#         ', '#             Had around 1000 features', '#             Identification of most valuable features', '#             Feature Engineering and Feature selection are most important aspects of Machine Learning', '#             Good Feature Engineering and Feature selection super seeds superior hardware', '#             Different set of features perform better with different algorithms. ', '#         ', '#     Combining different tables together and preparing them for model fitting', '#         ', '#             Tables have well defined relationships for creating joins', '#             Data from supporting tables is grouped before joining it with final tables', '#             Grouping process is a very good application of groupby aggregation functionality ', '#         ', '#     Extensive use of Groupby and aggregation on supporting table', '#     Manual feature engineering', '#     Dropping highly correlated features.', '#    Categorization of observations can help improving score. ', '#     Feature selection and feature exclusion. Check following Notebooks for Feature selection and exclusion:', '#         ', '#        https://www.kaggle.com/rahullalu/hcdr-installments-table-feature-selection', '#         https://www.kaggle.com/rahullalu/hcdr-feature-selection-for-pos-table', '#        https://www.kaggle.com/rahullalu/home-credit-default-risk-preparing-bureau-data', '#        https://www.kaggle.com/rahullalu/hcdr-feature-selection-for-creditcard-table', '#         ', '#      Ensembling: With Private score of 0.79134', '#     ', '#  ', '# Mistakes', '# Mistake of not exploring all available Boosting models. Biggest mistake :(', '# ', '#     Extensively worked with XGBoost and LGBM. But not worked extensively with CatBoost.', '#     Got best result with CatBoost. Realized pretty late.', '#     Thought LGBM is the best model. Got CV score of 0.7869.', '#     Realized this mistake on last day. So was not able to submit best score with CatBoost.', ""#     Didn't worked extensively on ensemble. Ensemble techinques helped a lot in improving scores."", '#     ', '# ', '# ![](http://)Problem Statement', '# The objective of this competition is to use historical loan application data to predict whether or not an applicant will be able to repay a loan. This is a standard supervised classification task:', '# ', '# **Supervised:** The labels are included in the training data and the goal is to train a model to learn to predict the labels from the features', '# **Classification:** The label is a binary variable, 0 (will repay loan on time), 1 (will have difficulty repaying loan)', '# ', '# ', '# ', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Dataset with file size', '# In[ ]:', '# In[ ]:', '    # Find index of feature columns with correlation greater than 0.97', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# with pd.option_context('display.max_columns',prev_appl_f.shape[1]):"", '#     display(prev_appl_f.head(10))', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",167
hcdrparseforlibraries.py,"['# imports', '    # create a new data frame', '    # used for keping track of dataframe index', '    # I use this line instead of the one after to only look at 10 files at a time when just testing code', ""    # for filename in os.listdir('/Users/nadiadomnina/Desktop/REU_data/titanic/html_titanic/sub-group'):"", '    # /Users/nadiadomnina/Desktop/REU_data/titanic/titanic_html', '        # finds the file names and libraries', '        # finds all function calls for each file', '       # find_functions(df, filename, i)', '   # df.to_csv(""libaries_functions.csv"", index=False)', '    # open the file', '        # create an array for the libraries in this document', '        # line scanner', '            # split the line into an array by spaces', '            # if the needed word  ""import"" is in the line', '                # case 2,3: ""from x import y""', '                    # get the library', '                # case 1: ""import x""', '                    # get the library name (next word)', '                    # add this word to the libraries array', '        # get only the main library name (only save the x in a x.1 type of import)', '        # count the number of libraries', '        # create a row with the gathered data', '        # add the row to our data frame']",24
home-cred-default-risk.py,"['# coding: utf-8', '# **Introduction**', '# This notebook is divided into 3 parts:', '# ', '# first part ', '# ', '# second part', '# ', '# third part', '# ', '# ', '# **first part**', '# ', '# In this section, predictions based on the target for the application_test file will be made, based on predictors from the application_test file. Descriptions of each of the 2 files will also be executes. Likewise, the correlation between target and days of registration will be shown along with relationship between education type and days of registration. ', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', ""main_file_path1 = '../input/application_train.csv' # this is the path to the training data that you will use"", '# In[ ]:', '# In[ ]:', ""main_file_path2 = '../input/application_test.csv' # this is the path to the test data that you will use"", '# In[ ]:', '# seaborn plot shows that for a target, days of DAYS_REGISTRATION must be greater that- 20000', '# In[ ]:', '# box plot shows that on average, higher DAYS_REGISTRATION is due to the the fact that the customer could possibly have a higher education', '# In[ ]:', '# In[ ]:', '# In[ ]:', 'from sklearn.tree import DecisionTreeRegressor # used to make predictions from certain data', '# In[ ]:', '# **second part**', '# ', '# In this section, the categorical variable NAME_EDUCATION_TYPE is used to predict the TARGET using encoding. Likewise, the 3D correlation between DAYS_CREDIT_UPDATE and DAYS_CREDIT is revealed through the plotly surface.', '# ', '# Similarly, this section also reveals the common credit types according to the days of credit using plotnine.', '# In[ ]:', ""main_file_path3 = '../input/bureau.csv' # this is the path to the test data that you will use"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **third part**', '# ', '# Contains even more data visualisations and predictions', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# KDE plot (what plotly refers to as a Histogram2dContour) and scatter plot of the same data.', '# In[ ]:', '# In[ ]:', '# In[ ]:']",59
home-credit (1).py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# ### Creating combined dataframe from train and test file', '# - Purpuse of combining train and test file is to handle data modification at same time on both file', '# - Once data pre-processing is done we can easily split it again with below logic', '# - if TARGET=NaN meaning its test file else its train file', '# In[6]:', '# In[7]:', '# In[8]:', '# ### Considering basic numeric features', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# - Creating dataframe with required columns only', '# In[13]:', '# In[14]:', '# ## EDA And Pre-Processing ', '# In[15]:', '# In[16]:', '# ### Handling missing values', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[ ]:', '# In[24]:', '# In[25]:', '# In[26]:', '# Heatmap', '# - Name Type Suite and Occupation type has missing values', '# - Occupation type has lots of missing value so for now droping this column', '# - Name Type suite will create some dummy NTS_XNA category for now', '# In[ ]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# - Draw distribution of numeric features', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[44]:', '# In[45]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# - Handling Outlier', '# In[46]:', '# In[47]:', '# In[48]:', '# In[49]:', '# - found that DAYS_EMPLOYED has some anomalies', ""# - Around 18% of data amongs all data has some '365243' value in this fields"", '# - as its not make sence to current data so we need to handle it somehow', '# - so i am replacing this value with np.nan', '# - creating new column called DAYS_EMPLOYED_ANOM Anomalous flag which will have True or False value based on this field', '# In[50]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# After removing anomalies we can see above histogram that DAYS_EMPLOYED has maximum as 49 years and minimum is 0 year as discribe below', '# ### creating combined basic features from numerical and categorical', '# In[51]:', '# In[52]:', '# In[53]:', '# In[ ]:', '# In[54]:', '# In[55]:', '# In[56]:', '# In[57]:', '# In[58]:', '# In[59]:', '# In[60]:', '# In[61]:', '# ### Lable encoding for categorical features whose values are binary like Y/N, Yes/No, True/False, M/F etc.', '# In[62]:', '# In[63]:', '# Categorical features with Binary encode (0 or 1; two categories)', '# In[64]:', '# out of above basic categorical features we already encoded binary ', '# - FLAG_OWN_CAR', '# - FLAG_OWN_REALITY', '# - CODE_GENDER', '# - DAYS_EMPLYED_ANOM', '# ', '# Now doing one hot encoding for remaining features', '# - NAME_CONTRACT_TYPE', '# - NAME_TYPE_SUITE', '# - NAME_INCOME_TYPE', '# - NAME_EDUCATION_TYPE', '# - NAME_FAMILY_STATUS', '# - NAME_HOUSING_TYPE', '# - ORGANIZATION_TYPE', '# In[65]:', '# In[66]:', '# In[67]:', '# In[68]:', '# In[69]:', '# In[70]:', '# In[71]:', '# In[72]:', '# In[73]:', '# ### creating final dataframe with required features', '# In[74]:', '# In[75]:', '# In[76]:', '# In[77]:', '# In[78]:', '# ## Model 1 : Logistic Regression', '# In[79]:', '# Make the model with the specified regularization parameter', '# In[80]:', '# In[81]:', '# In[82]:', '# In[83]:', '# In[84]:', '# In[85]:', '# In[86]:', '# In[87]:', '# In[88]:', '# Train on the training data', '# In[89]:', '# Make predictions', '# Make sure to select the second column only', '# In[90]:', '# In[91]:', '# In[92]:', '# ## Dealing with Imbalance Data using SMOTE', '# In[93]:', '# In[94]:', '# In[95]:', '# In[96]:', '# In[97]:', '# In[ ]:', '# In[ ]:']",153
home-credit-default-analysis.py,"['# coding: utf-8', '# ## Home Credit Default Risk', '# ##### Can you predict how capable each applicant is of repaying a loan?', '# #### Overview ', '# This project was inspired by that fact that many people who deserves loan do not get it and ends up in the hands of untrustworthy lenders.', '# This project is a competition from Kaggle. Below is the link: [Kaggle | Home Credit Default Risk Competition](https://www.kaggle.com/c/home-credit-default-risk)', '# ', '# ', '# Many people struggle to get loans due to insufficient or non-existent credit histories. And, unfortunately, this population is often taken advantage of by untrustworthy lenders.', '# ', '# ![about homecredit](https://storage.googleapis.com/kaggle-media/competitions/home-credit/about-us-home-credit.jpg)       [Source : Kaggle](https://storage.googleapis.com/kaggle-media/competitions/home-credit/about-us-home-credit.jpg)', '# ', '# Home Credit strives to broaden financial inclusion for the unbanked population by providing a positive and safe borrowing experience. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a', '#  ', ""# variety of alternative data--including telco and transactional information--to predict their clients' repayment abilities."", ""# While Home Credit is currently using various statistical and machine learning methods to make these predictions, they're challenging Kagglers to help them unlock the full potential of their data. Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful."", '# ', '# ## Problem Statement.', '# ### Can you predict how capable each applicant is of repaying a loan ?', '# - My analysis will be predicting how capable each applicant is at repaying a loan.', '# ### Datasets and Inputs.', '# The dataset for this project has been provided by Kaggle. ', '# Data description is below :', '# There are 7 different sources of data:', '# + **application_train/application_test**: the main training and testing data with information about each loan application at Home Credit. Every loan has its own row and is identified by the feature SK_ID_CURR. The training application data comes with the TARGET indicating **0** if the loan was repaid **`Repayers`** and **`1`** for default **`Defaulters`**', ""# + **bureau**: data concerning client's previous credits from other financial institutions. Each previous credit has its own row in bureau, but one loan in the application data can have multiple previous credits."", '# + **bureau_balance**: monthly data about the previous credits in bureau. Each row is one month of a previous credit, and a single previous credit can have multiple rows, one for each month of the credit length.', '# + **previous_application**: previous applications for loans at Home Credit of clients who have loans in the application data. Each current loan in the application data can have multiple previous loans. Each previous application has one row and is identified by the feature SK_ID_PREV.', '# + **POS_CASH_BALANCE:** monthly data about previous point of sale or cash loans clients have had with Home Credit. Each row is one month of a previous point of sale or cash loan, and a single previous loan can have many rows.', '# + **credit_card_balance**: monthly data about previous credit cards clients have had with Home Credit. Each row is one month of a credit card balance, and a single credit card can have many rows.', '# + **installments_payment**: payment history for previous loans at Home Credit. There is one row for every made payment and one row for every missed payment.', ""# For more information on what each data represents, please read the [PROPOSAL]('/Users/bhetey/version_control/machine-learning/projects/capstone/proposal.pdf'), or [Kaggle](https://www.kaggle.com/c/home-credit-default-risk) "", '# - Below is a diagram of how the data are connected. ', '# ![Data structure](https://storage.googleapis.com/kaggle-media/competitions/home-credit/home_credit.png)', '# ### Loading Data ', '# In[ ]:', 'import pandas as pd # this is to import the pandas module', 'import numpy as np # importing the numpy module ', 'import os # file system management ', 'import zipfile # module to read ZIP archive files.', '# Figures inline and set visualization style', '# In[ ]:', '# reading the data with pandas ', '# In[ ]:', '# Training data has 307511 rows (*each one represents separate loan*) and 112 featurees (columns) including the TARGET(What is to be predicted)', '# In[ ]:', 'y = app_train.TARGET # y is going to be our target variable', '# In[ ]:', '# The Testing set does not have target variable ', '# In[ ]:', '# traing and testing set do not have the same shape. ', '# ### Data conversion in pandas DataFrame', '# In[ ]:', '# converted all csv in pandas dataframe. ', '# HomeCredit Columns Description gives us the details about each features in the dataset ', '# In[ ]:', '# this is done for indexing of the joint data later ', '# ### Visual Exploratory Data Analysis (EDA)', '# In[ ]:', '# + ### How many people repay loans : ', '# **Take away here is that**: Looking at the picture below, **`1`** for **Defaulter** and **`0`** for  **Repayers**. The image below shows that most applicant pay back the loan. This is what we called [Imbalanced Class Problem](http://www.chioka.in/class-imbalance-problem/). The differences between Repayer and Defaulter is too big ', '# In[ ]:', '# + ### What is the family status of the applicant:', '# In the image, it is shown that more married candidates pay back thier loans', '# In[ ]:', '# + ### What is the Income Class and Family type that default the most :   ', '# **The Takeaway:** Most married and working class mostly default on loan payment ', '# In[ ]:', '                       # filter the train set by using TARGET column == 1', '# Checking for missing values.', '# In[ ]:', '# below is a function to check for missing values. ', '    # checking total missing values', '    # percentage of missing values. ', ""    # table of total_miss_values and it's percentage"", '    # columns renamed', '    # descending table sort ', '    # display information ', '# In[ ]:', '# **Take away :** For some machine learning models, we have to deal with the missing values buy imputing or dropping either the roles or the columns with the highest percentage of missing values. However we might be loosing some data from them. We also do not know if the data removed will harm the analysis or help it ahead of time until we experiment on them. ', '# Algorithmns like **XGBoost** can handle missing data without imputation. [It automatically learn how to deal with missing data point.](https://machinelearningmastery.com/data-preparation-gradient-boosting-xgboost-python/)', '# + [Additonal reading](https://arxiv.org/abs/1603.02754)', '# Dealing with features ', '# **Obviously we have 3 data types :** Numeric and Non-numeric (e.g Text ) called _object_.', '# ', '# Numeric can be of discrete time or continuous time horizon. ', '# Non_numeric are [variables containing label values rather numeric values.](https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/) They are sometimes called [nominal](https://en.wikipedia.org/wiki/Nominal_category)', '# In[ ]:', 'app_train.get_dtype_counts() # Shows the numbers of types of values ', '# Looking at the dataset with object type, below is the total number of object. However since we want to work with them we will need to hot encode them. ', '# ', '# However this depends on personal view. it depend on how big the categorical variables are. ', '# ', '# One of the major problems with categorical data is that only few machine learning alogorithms works with them without any special form of implementation while others needs some implementation where the data needs to be encoded into numeric variables. ', '# ', '# How to convert categorical data into numerical data: ', '# + **Integer Encoding** _where integer values have a natural ordered relationship between each other and machine learning algorithms may be able to understand and harness this relationship._ ', '# ', '# ', '# + **One-Hot Encoding** _where the integer encoded variable is removed and a new binary variable is added for each unique integer value._', '# ', '# [Read more](https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/)', '# In[ ]:', '# Checking the number of unique class in each object column ', '# In[ ]:', '# **.Describe** enerates descriptive statistics that summarize the central tendency, dispersion and shape of a datasetâ€™s distribution, excluding NaN values.', '# ', '# DAYS_BIRTH was originally in days and now it will be converted to years. The columns has negative as they were recorded relative to the current loan application ', '# In[ ]:', '# Looking at the result above everything seems okay. Cannot seems to find any outlier in this analysis ', ""# **DAYS_EMPOYED:** How many days before the application the person started current employment'"", '# ', '# This is also relative to the current loan application ', '# In[ ]:', '# In[ ]:', '# Looking at the image above, 1000 years does not seem right. ', '# We will use imputation to solve this. ', '# ### Checking correlation of the data.', '# It helps to show possible relationship within our data. ', '# This article helps in interpreting [correlation](http://www.statstutor.ac.uk/resources/uploaded/pearsons.pdf), [How to interpret a Correlation Coefficient](https://www.dummies.com/education/math/statistics/how-to-interpret-a-correlation-coefficient-r/)', '# In[ ]:', '# In[ ]:', '# #### ONE-HOT ENCODING ', ""# Let's **One-hot Encode** the categorical variable "", '# We need to import the module from scikit-learn library', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Looking at the analysis above is obvious that **One-Hot Encoding** has added extra features to the original ones we have hereby leaving our data unaligned. ', '# ', '# We need to have same features in both the training and testing data for our machine learning model to work if not we will get error when running the algorithm. ', '# ', '# **STEPS TAKING:** ', '# + I decided to remove any column that is present on the training set but not on our testing set. ', '# + Intuitively the **y** which is our **TARGET** is expected to  be removed as well but will add it back', '# In[ ]:', '# In[ ]:', ""one_hot_encoded_app_train['TARGET'] = y # adding it back to the data "", '# In[ ]:', '# dropping the target to get our X ', '# **Removing missing values**', '# In[ ]:', '# function is to drop the missing values ', '# In[ ]:', '# In[ ]:', '# Looking at the dataset now after removing the **NaN** in the data, we have the columns reduced to **181 columns**', '# **Imputing Nan values**', '# In[ ]:', '# making a copy for the data before imputing ', 'new_y = y.copy() # a copy of our target ', '# dropping the target columns before imputing ', '# calling imputer and transforming the data', '# ## EVALUATION METRICS ', '# There are different kind of evaluation metrics we can used since this is a **Classification problem.** ', '# Below are some of the metrics : ', '# ', '# + Classification accuracy ', '# + Logarithmic Loss ', '# + Area Under ROC Curve ', '# + Confusion Matrix ', '# + Classification report', '# ', '# [**Read more about them**](https://machinelearningmastery.com/metrics-evaluate-machine-learning-algorithms-python/)', '# ### CLASSIFICATION MODELS ', '# Classification depends on whether the variables we are trying to predict are **Binary or Non-Binary**.', '# ', '# **Binary variables** are those variables where the outcome we are looking are either 1 or 0, True or False. ', '# ', '# **Non-Binary variables** are those variables where the outcome we are looking are categorical. for example looking at the dataset and predicting where the color of the dress of a person will be `Yellow, Brown or Blue`', '# ', '# #### Binary Classification Model : ', '# + Logistic regression ', '# + Decision Trees ', '# + Support Vector Machine (SVM) : _good for anomaly detection especially in large feature sets_', '# ', '# #### Non- Binary Classification Model: ', '# + Adaboost ', '# + Random Forest ', '# + Decision Tree', '# + Neural Networks ', '# ', '# #### Considering choosing an algorithm, : ', '# + Take note of the accuracy ', '# + Training time ', '# + Linearity ', '# + Number of parameters ', '# + Number of features ', '# ', '# [The Machine Learning Algorithm Cheat Sheet](https://docs.microsoft.com/en-us/azure/machine-learning/studio/algorithm-choice)', '# ', '# However, I am going to try each of them and compare their performance.', '# ### Logistic Regression Model ', '# This is my first model. ', '# C is used to control overfitting and a small tends to reduce overfitting ', '# Logistic regression using the data set with dropped missing values. ', '# #### Model Evaluation using a validation set', '# In[ ]:', '# Import statements ', '# instantiate a logistic regression model, and fit with X and y', '# evaluate the model by splitting into train and test sets', '# In[ ]:', '# #### Model Evaluation Using Cross-Validation', ""# Now let's try 10-fold cross-validation, to see if the accuracy holds up more rigorously."", '# In[ ]:', '# evaluate the model using 10-fold cross-validation', '# In[ ]:', '# In[ ]:', '# In[ ]:']",211
home-credit-default-risk (1).py,"['# coding: utf-8', '# In[1]:', '# ># Data prepare', '# ## read original dataset', '# In[2]:', '# ## choose features (first selection, based on missing data)', '# In[3]:', '# In[4]:', '# ## check feature dtypes', '# In[5]:', '# ## encoder category feature (sub-dataset)', '# In[6]:', '# ## groupby, aggregrate and merge dataset', '# In[7]:', '# ## choose feature and objectives (based on missing data)', '# In[8]:', '# ># Catboost (for analysing feature importance)', '# ## devide features and labels', '# In[9]:', '# ## splite train and validation dataset', '# In[10]:', '# ## check label distribution', '# In[11]:', '# ## weights list and cat features index with filling missing data ', '# In[12]:', '# ## build and train a model', '# In[13]:', '# ## evaluation a model', '# In[14]:', '# ## analysis feature importance', '# In[15]:', '# In[16]:', '# ># neural network', '# ## missing data', '# In[17]:', '# ## devide features and label', '# In[18]:', '# ## encode features (main table)', '# In[19]:', '# ## standardize data', '# In[20]:', '# ## transform useless features to PCA features', '# In[21]:', '# ## combine PCA features and usefull features', '# In[22]:', '# ## split training and validation dataset', '# In[23]:', '# ## train deep learning model', '# In[24]:', '# In[25]:', '# In[26]:', '# ## evaluate model', '# In[27]:', '# In[28]:', '# In[29]:', '# ># save model', '# In[30]:', '# > ## import saved model', '# In[31]:', '# ># predict test dataset', '# ## compare test dataset with training dataset', '# In[32]:', '# ## predict values', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:']",67
home-credit-default-risk (2).py,"['# coding: utf-8', '# # Introduction', ""# This notebook is based on Will Koehrsen's kernel titled [Start Here: A Gentle Introduction](https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction). This kernel is for practice only, to learn about Kaggle competition first hand."", '# # Imports', '# In[1]:', '# numpy and pandas for data manipulation ', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# sklearn preprocessing for dealing with categorical variables', '# File system management', '# Suppress warnings', '# matplotlib.and seaborn for visualization', '# # Read in Data', '# In[2]:', '# List available files', '# In[3]:', '# Read training data', '# The training data has 307511 observations (each one a separate loan) and 122 features, including the TARGET label (which we want to predict).', '# In[4]:', '# Read testing data', '# # Exploratory Data Analysis', '# ', '# ## Examine the Distribution of the Target Column', '# In[5]:', '# In[6]:', '# Imbalanced class problem: there are far more repaid loan than loans that were not repaid.', '# ## Examine Missing Values', '# In[7]:', '    # Total missing values:', '    # Missing values in percent:', '    # Make a table with the results', '    # Rename the columns', '    # Sort the table by percentage of missing, descending', '    # Print some summary information', '# In[8]:', '# ## Column Types', '# In[9]:', '# Number of each type of column', '# In[10]:', '# Number of unique entries in each object column', '# Most object-type columns have small number of unique entries.', '# ## Encoding Categorical Variables', '# ### Label Encoding', '# For any categorical variable (`dtype == object`) with 2 unique categories, we will use label encoding.', '# In[11]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# ### One-Hot Encoding', '# In[12]:', '# In[13]:', '# Align training and test data', '# ## Back to EDA', '# ### Anomalies', '# Use the `describe` method to find anomalies.', '# In[14]:', '# DAYS_BIRTH column was negative because it was recorded against current loan application. Multiply by -1 and divide by 365.25 to get the number of years.', '# In[15]:', '# In[16]:', '# In[17]:', '# Minimum employed is *minus* 1000 years!', '# In[18]:', '# Anayze the default rate for anomalies:', '# In[19]:', '# The anomalies have a lower level of default. They might have some importance.', '# Solution: fill the anomalies with `np.nan` and then create a new boolean column to indicate the anomaly.', '# In[20]:', '# Create an anomalous flag olumn', '# Replace the anomalous values with NaN', '# Do the same with test data', '# In[21]:', '# ### Correlations', '# In[22]:', '# Find correlations with the target and sort', '# Display correlations', '# As the client gets older, the repayment level is better, but the correlation is kinda weak.', '# In[23]:', '# Convert DAYS_BIRTH column to absolute value', '# In[24]:', '# To visualize the effect of the age on the target, use kernel density estimation plot (KDE).', '# In[25]:', '# KDE plot on loans that were repaid on time', '# KDE plot on loans which were not repaid on time', '# Labeling of plot', '# In[26]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[27]:', '# Group by the bind and calculate averages', '# In[28]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# ### Exterior Sources', '# In[29]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[30]:', '# Heatmap of correlation', '# # Feature Engineering', '# ## Polynomial Features', '# In[31]:', '# Make a new datafrane for polynomial features', '# Imputer for handling missing values', '# Create the polynomial object with specified degreee', '# In[32]:', '# Train the polynomial', '# Transform the features', '# In[33]:', '# In[34]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# In[35]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# ## Domain Knowledge Features', '# ', ""# * `CREDIT_INCOME_PERCENT`: the percentage of the credit amount relative to a client's income"", ""# * `ANNUITY_INCOME_PERCENT`: the percentage of the loan annuity relative to a client's income"", '# * `CREDIT_TERM`: the length of the payment in months (since the annuity is the monthly amount due', ""# * `DAYS_EMPLOYED_PERCENT`: the percentage of the days employed relative to the client's age"", '# In[36]:', '# In[37]:', '# ## Baseline', '# ### Logistic Regression Implementation', '# In[38]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[39]:', '# In[40]:', '# In[41]:', '# Submission dataframe', '# In[42]:', '# ', '# In[ ]:']",147
home-credit-default-risk-001.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# One-hot encoding for categorical columns with get_dummies', '# In[4]:', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Categorical features: Binary features and One-Hot encoding', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Some simple new features (percentages)', '# In[5]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[6]:', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# In[7]:', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# In[8]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[9]:', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# In[10]:', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[11]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# In[12]:', '# Display/plot feature importance', '# In[14]:', '# In[ ]:', '# In[ ]:']",60
home-credit-default-risk-lgbm-w-domain-fts (1).py,"['# coding: utf-8', '# # Introduction', '# The objective of this competition is to use historical loan application data to predict whether or not an applicant will be able to repay a loan. This is a standard supervised classification task.', '# ', '# * **Supervised**: The labels are included in the training data and the goal is to train a model to learn to predict the labels from the features', '# * **Classification**: The label is a binary variable, 0 (will repay loan on time), 1 (will have difficulty repaying loan)', '# ', '# Some practices to do for you to get familier with the **standard supervised classification task**:', '# - [Titanic Top 11%| Starter I: Models Comparing](https://www.kaggle.com/chienhsianghung/titanic-top-11-starter-i-models-comparing)', '# - [Titanic Top 11%| Starter II: Hyperparameter Tuning](https://www.kaggle.com/chienhsianghung/titanic-top-11-starter-ii-hyperparameter-tuning)', '# - [TPS Apr.| Starter Pack: All Models](https://www.kaggle.com/chienhsianghung/tps-apr-starter-pack-all-models)', '# ', '# # Manual Setting', '# In[1]:', '# # Load In Data', '# ## Training and Testing', '# In[2]:', '# ## Reduce Memory Allotted Size', '# ', '# POS_CASH_balance, installments_payments, credit_card_balance', '# In[3]:', '# # EDA', '# ## Data Imbalanced', '# In[4]:', ""# app_train['TARGET'].value_counts()"", '# ## Missing Values', '# In[5]:', '# Function to calculate missing values by column# Funct ', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[6]:', '# When it comes time to build our machine learning models, we will have to fill in these missing values (known as imputation). In later work, we will use models such as XGBoost that can [handle missing values with no need for imputation.](https://stats.stackexchange.com/questions/235489/xgboost-can-handle-missing-data-in-the-forecasting-phase) Another option would be to drop columns with a high percentage of missing values.', '# ## Column Types', '# In[7]:', '# ## Unique Entries', '# of the `object`(categorical) columns.', '# In[8]:', '# Most of the categorical variables have a relatively small number of unique entries. We will need to find a way to deal with these categorical variables!', '# ### Encoding Categorical Variables', '# ', '# For categorical variables with many classes, one-hot encoding is the safest approach because it does not impose arbitrary values to categories. The only downside to one-hot encoding is that the number of features (dimensions of the data) can explode with categorical variables with many categories. ', '# ', ""# Let's implement the policy described above: for any categorical variable (`dtype == object`) with 2 unique categories, we will use label encoding, and for any categorical variable with more than 2 unique categories, we will use one-hot encoding."", '# #### Label Encoding', '# In[9]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# #### One-Hot Encoding', '# In[10]:', '# one-hot encoding of categorical variables', '# ### Aligning Training and Testing Data', '# ', '# There need to be the same features (columns) in both the training and testing data. One-hot encoding has created more columns in the training data because there were some categorical variables with categories not represented in the testing data.', '# ', ""# * Only column labels that are present in both df1 and df2 are retained [(join='inner').](https://stackoverflow.com/questions/51645195/pandas-align-function-illustrative-example/51645550)"", '# In[11]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# ## Anomalies', '# ', '# Mis-typed numbers, errors in measuring equipment, or extreme measurements.', '# In[12]:', ""# (app_train['DAYS_BIRTH'] / -365).describe()"", '# In[13]:', ""# Just out of curiousity, let's subset the anomalous clients and see if they tend to have higher or low rates of default than the rest of the clients."", '# In[14]:', '# Well that is extremely interesting! It turns out that the anomalies have a lower rate of default. We will fill in the anomalous values with not a number (np.nan) and then create a new boolean column indicating whether or not the value was anomalous.', '# In[15]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# ## Correlations', '# In[16]:', '# Find correlations with the target and sort', '# Display correlations', '# ### Effect of Age on Repayment', '# In[17]:', '# Find the correlation of the positive days since birth and target', '# As the client gets older, there is a negative linear relationship with the target meaning that as clients get older, they tend to repay their loans on time more often.', '# #### Distribution of Age', '# In[18]:', '# Set the style of plots', '# Plot the distribution of ages in years', '# #### Visualize The Effect of The Age on The Target', '# In[19]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', ""# The target == 1 curve skews towards the younger end of the range. Although this is not a significant correlation (-0.07 correlation coefficient), this variable is likely going to be useful in a machine learning model because it does affect the target. Let's look at this relationship in another way: average failure to repay loans by age bracket."", '# ', '# To make this graph, first we cut the age category into bins of 5 years each. Then, for each bin, we calculate the average value of the target, which tells us the ratio of loans that were not repaid in each age category.', '# In[20]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[21]:', '# Group by the bin and calculate averages', '# In[22]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# There is a clear trend: younger applicants are more likely to not repay the loan! The rate of failure to repay is above 10% for the youngest three age groups and beolow 5% for the oldest age group.', '# ### Exterior Sources', '# ', '# The 3 variables with the strongest negative correlations with the target are `EXT_SOURCE_1`, `EXT_SOURCE_2`, and `EXT_SOURCE_3`.', '# In[23]:', '# In[24]:', '# Heatmap of correlations', '# All three `EXT_SOURCE` featureshave negative correlations with the target, indicating that as the value of the `EXT_SOURCE` increases, the client is more likely to repay the loan. We can also see that `DAYS_BIRTH` is positively correlated with `EXT_SOURCE_1` indicating that maybe one of the factors in this score is the client age.', '# In[25]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# # Feature Engineering (Example)', '# ', '# Kaggle competitions are won by feature engineering: those win are those who can create the most useful features out of the data. This represents one of the patterns in machine learning: **Feature engineering has a greater return on investment than model building and hyperparameter tuning.** As Andrew Ng is fond of saying: **Applied machine learning is basically feature engineering.**', '# ## Polynomial Features', '# ', ""# Dealing with [ImportError](https://stackoverflow.com/questions/59439096/importerror-cannnot-import-name-imputer-from-sklearn-preprocessing): `cannot import name 'Imputer' from 'sklearn.preprocessing'`: "", '# It has been deprecated with **scikit-learn v0.20.4** and removed as of **v0.22.2**.', '# In[26]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# from sklearn.preprocessing import Imputer', ""# imputer = Imputer(strategy = 'median')"", ""# cannot import name 'Imputer' from 'sklearn.preprocessing'"", '# Need to impute missing values', '# Create the polynomial object with specified degree', '# In[27]:', '# Train the polynomial features', '# Transform the features', '# This creates a considerable number of new features. To get the names we have to use the polynomial features `get_feature_names` method.', '# In[28]:', '# There are 35 features with individual features raised to powers up to degree 3 and interaction terms. Now, we can see whether any of these new features are correlated with the target.', '# In[29]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# We will add these features to a copy of the training and testing data and then evaluate models with and without the features. The only way to know if an approach will work is to try it out!', '# In[30]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# ## Domain Knowledge Features', '# ', ""# * `CREDIT_INCOME_PERCENT`: the percentage of the credit amount relative to a client's income"", ""# * `ANNUITY_INCOME_PERCENT`: the percentage of the loan annuity relative to a client's income"", '# * `CREDIT_TERM`: the length of the payment in months (since the annuity is the monthly amount due', ""# * `DAYS_EMPLOYED_PERCENT`: the percentage of the days employed relative to the client's age"", '# In[31]:', '# iterate through the new features', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # matplotlib.pyplot.legend', '    # https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html', '    # Label the plots', '# # Feature Engineering (Final)', '# In[32]:', '    # 1.EXT_SOURCE_X FEATURE ', '    # AMT_CREDIT ', '    # AMT_INCOME_TOTAL ', '    # DAYS_BIRTH, DAYS_EMPLOYED ', '# In[33]:', ""    # prev['PREV_ANNUITY_APPL_RATIO'] = prev['AMT_ANNUITY']/prev['AMT_APPLICATION']"", '    # Data Cleansing', '    # substraction between DAYS_LAST_DUE_1ST_VERSION and DAYS_LAST_DUE', '    # 1.Calculate the interest rate', '    # multi index ', '    # unstack() ', '    # rename column ', '    # NaN', '# DAYS_DECISION', '    # multi index ', '    # prev_amt_agg', '    # SK_ID_CURR APPROVED_COUNT REFUSED_COUNT', ""    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' drop "", '# In[34]:', '    # SK_ID_CURR reset_index()', ""    # CREDIT_ACTIVE='Active' filtering"", '    # SK_ID_CURR reset_index() ', '# BUREAU DAYS_CREDIT -750', '# bureau_bal SK_ID_CURR MONTHS_BALANCE aggregation', '    # SK_ID_CURR Group by bureau SK_ID_CURR ', '    # STATUS 120', '    # SK_ID_CURR MONTHS_BALANCE aggregation', '    # SK_ID_CURR reset_index()', '# bureau aggregation', '    # bureau_day_amt_agg bureau_active_agg', '    # STATUS ACTIVE IS_DPD RATIO', '    # bureau_agg bureau_bal_agg', '# In[35]:', '    # (SK_DPD) 0 , 0~ 100 , 100', '    # 0~ 120 120', '    # SK_ID_CURR aggregation', '    # MONTHS_BALANCE (20)', '    # SK_ID_CURR reset_index()', '# In[36]:', '    # DPD  ', '    # 30~ 120 100', '    # SK_ID_CURR aggregation', '    # (DAYS_ENTRY_PAYMENT) (1)', '# In[37]:', '    # DPD', '    # SK_ID_CURR aggregation', '    # MONTHS_BALANCE (3)', '# # Training (Baseline)', '# In[38]:', '# Scale each feature to 0-1', '    # Median imputation of missing values', '        # Make the model with the specified regularization parameter', '        # Train on the training data', '        # Make predictions', '        # Make sure to select the second column only', '        # Submission dataframe', '        # submit.head()', '        # Save the submission to a csv file', '        # Make the random forest classifier', '        # Train on the training data', '        # Extract feature importances', '        # Make predictions on the test data', '        # Make a submission dataframe', '        # submit.head()', '        # Save the submission dataframe', '# # Training (Engineered Features Implemented)', '# In[39]:', '    # Train on the training data', '    # Make predictions on the test data', '    # Make a submission dataframe', '    # Save the submission dataframe', '    # Train on the training data', '    # Extract feature importances', '    # Make predictions on the test data', '    # Make a submission dataframe', '    # Save the submission dataframe', '# # Feature Importances (Example)', '# In[40]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[41]:', '# In[42]:', '# # Reload The Original Datasets For Final Training', '# In[43]:', '# ## Datasets Concatenation and Join', '# In[44]:', '# apps prev_agg, bureau_agg, pos_bal_agg, install_agg, card_bal_agg', '    # Join with apps_all', '# In[45]:', '# # Final Training (LGBM)', '# In[46]:', '# In[47]:', '# application, previous, bureau, bureau_bal', '# Category Label', '# # Prediction', '# In[48]:', '# In[49]:', '# # Feature Importances (Final)', '# In[50]:', '# [How to save a matplotlib figure and fix text cutting off || Matplotlib Tips](https://www.youtube.com/watch?v=C8MT-A7Mvk4)', '# In[51]:', '# https://stackoverflow.com/questions/42579908/use-corr-to-get-the-correlation-between-two-columns', '# Heatmap of correlations', ""# plt.savefig('./Domain Knowledge Features Correlation Heatmap.png', bbox_inches = 'tight')"", ""# plt.imshow(plt.imread('./Domain Knowledge Features Correlation Heatmap.png'))"", '# # References', '# ', '# * [Start Here: A Gentle Introduction](https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction#Conclusions)', '# * [Home Credit Default Risk Prediction](https://www.kaggle.com/sangseoseo/home-credit-default-risk-prediction#data-cleansing,-EDA,-model-creation)', '# * [More domain knowledge from former Home Credit analyst](https://www.kaggle.com/c/home-credit-default-risk/discussion/63032)']",284
home-credit-default-risk-prediction.py,"['# coding: utf-8', '# ## data cleansing, EDA, model creation', '#  - POS_CASH_balance, installments_payments, credit_card_balance ', '# In[1]:', '# ### load dataset under colab', '# In[2]:', '# In[3]:', '# ### column data type convert to reduce memory allocated size', '# In[4]:', '# In[5]:', '# ### load package', '# In[6]:', '# ### EDA , Feature Engineering', '# In[7]:', '    # 1.EXT_SOURCE_X FEATURE ', '    # AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '    # DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', ""  # prev['PREV_ANNUITY_APPL_RATIO'] = prev['AMT_ANNUITY']/prev['AMT_APPLICATION']"", '  # Data Cleansing', '  # substraction between DAYS_LAST_DUE_1ST_VERSION and DAYS_LAST_DUE', '  # 1.Calculate the interest rate', '  # ìƒˆë¡\xadê²Œ ìƒì„±ëœ ëŒ€ì¶œ ì‹\xa0ì²\xadì•¡ ëŒ€ë¹„ ë‹¤ë¥¸ ê¸ˆì•¡ ì°¨ì´ ë° ë¹„ìœ¨ë¡œ aggregation ìˆ˜í–‰. ', '        # ê¸°ì¡´ ì»¬ëŸ¼ aggregation. ', '      # ê°€ê³µ ì»¬ëŸ¼ aggregation', ""  # multi index ì»¬ëŸ¼ì„ '_'ë¡œ ì—°ê²°í•˜ì—¬ ì»¬ëŸ¼ëª… ë³€ê²½"", '  # unstack() ', '  # rename column ', '  # NaNê°’ì€ ëª¨ë‘ 0ìœ¼ë¡œ ë³€ê²½. ', '        # ê¸°ì¡´ ì»¬ëŸ¼ aggregation. ', '      # ê°€ê³µ ì»¬ëŸ¼ aggregation', ""  # multi index ì»¬ëŸ¼ì„ '_'ë¡œ ì—°ê²°í•˜ì—¬ ì»¬ëŸ¼ëª… ë³€ê²½"", '    # prev_amt_aggì™€ ì¡°ì¸. ', '    # SK_ID_CURRë³„ ê³¼ê±° ëŒ€ì¶œê±´ìˆ˜ ëŒ€ë¹„ APPROVED_COUNT ë° REFUSED_COUNT ë¹„ìœ¨ ìƒì„±. ', ""    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' ì»¬ëŸ¼ drop "", '# bureau ì±„ë¬´ ì™„ë£Œ ë‚\xa0ì§œ ë° ëŒ€ì¶œ ê¸ˆì•¡ ëŒ€ë¹„ ì±„ë¬´ ê¸ˆì•¡ ê´€ë\xa0¨ ì»¬ëŸ¼ ê°€ê³µ.', '    # ì˜ˆì\xa0• ì±„ë¬´ ì‹œìž‘ ë° ì™„ë£Œì¼ê³¼ ì‹¤ì\xa0œ ì±„ë¬´ ì™„ë£Œì¼ê°„ì˜ ì°¨ì´ ë° ë‚\xa0ì§œ ë¹„ìœ¨ ê°€ê³µ.  ', '    # ì±„ë¬´ ê¸ˆì•¡ ëŒ€ë¹„/ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ë° ì°¨ì´ ê°€ê³µ', '    # ì—°ì²´ ì—¬ë¶€ ë° 120ì¼ ì´ìƒ ì—°ì²´ ì—¬ë¶€ ê°€ê³µ', '  # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '  # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', ""  # CREDIT_ACTIVE='Active' ì¸ ë°ì´í„°ë§Œ filtering"", '      # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '  # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '# BUREAUì˜ DAYS_CREDIT ê°€ -750ë³´ë‹¤ ìµœê·¼ ë°ì´í„° ë³„ë„ ê°€ê³µ. ', '        # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '# bureau_balì„ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ê±´ìˆ˜ì™€ MONTHS_BALANCEì˜ aggregation ê°€ê³µ ', '    # SK_ID_CURRë\xa0ˆë²¨ë¡œ Group byí•˜ê¸° ìœ„í•´ bureauì—ì„œ SK_ID_CURR ì»¬ëŸ¼ì„ ê°€ì\xa0¸ì˜¤ëŠ” ì¡°ì¸ ìˆ˜í–‰. ', '    # STATUSì— ë”°ë¼ ì›”ë³„ ì—°ì²´ ì—¬ë¶€ ë° 120ì¼ ì´ìƒ ì—°ì²´ ì—¬ë¶€ ì†ì„± ê°€ê³µ. ', '    # SK_ID_CURR ë\xa0ˆë²¨ë¡œ ê±´ìˆ˜ì™€ MONTHS_BALANCEì˜ aggregation ê°€ê³µ ', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '# ê°€ê³µëœ bureauê´€ë\xa0¨ aggregation ì»¬ëŸ¼ë“¤ì„ ëª¨ë‘ ê²°í•©   ', '    # bureau_day_amt_aggì™€ bureau_active_agg ì¡°ì¸.  ', '    # STATUSê°€ ACTIVE IS_DPD RATIOê´€ë\xa0¨ ë¹„ìœ¨ ìž¬ê°€ê³µ. ', '    # bureau_aggì™€ bureau_bal_agg ì¡°ì¸. ', '# #### aggregation for pos, install, credit card', '# In[8]:', '    # ì—°ì²´ ì¼ìž(SK_DPD)ê°€ 0 ë³´ë‹¤ í° ê²½ìš°, 0~ 100 ì‚¬ì´, 100ë³´ë‹¤ í° ê²½ìš° ì¡°ì‚¬ ', '    # ì—°ì²´ì—¬ë¶€,  ì—°ì²´ì¼ìˆ˜ 0~ 120 ì‚¬ì´ ì—¬ë¶€, ì—°ì²´ ì¼ìˆ˜ 120ë³´ë‹¤ í° ì—¬ë¶€ ', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ì‹\xa0ê·œ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ì‹\xa0ê·œ aggregation ì»¬ëŸ¼ ìƒì„±', '        # ì¶”ê°€ ì»¬ëŸ¼. ', '    # ì»¬ëŸ¼ëª… ë³€ê²½ ', '    # MONTHS_BALANCEê°€ ìµœê·¼(20ê°œì›” ì´í•˜)ì¸ ë°ì´í„° ì„¸íŠ¸ ë³„ë„ ê°€ê³µ. ', '        # ì¶”ê°€ ì»¬ëŸ¼. ', '    # ì»¬ëŸ¼ ë³€ê²½ ', '    # SK_ID_CURRì„ reset_index()ë¥¼ ì´ìš©í•˜ì—¬ ì»¬ëŸ¼ìœ¼ë¡œ ë³€í™˜', '    # ì˜ˆì\xa0• ë‚©ë¶€ ê¸ˆì•¡ ëŒ€ë¹„ ì‹¤ì\xa0œ ë‚©ë¶€ ê¸ˆì•¡ ê´€ë\xa0¨ ë°ì´í„° ê°€ê³µ. ì˜ˆì\xa0• ë‚©ë¶€ ì¼ìž ëŒ€ë¹„ ì‹¤ì\xa0œ ë‚©ë¶€ ì¼ìž ë¹„êµë¥¼ DPD ì¼ìž ìƒì„±  ', '    # ì—°ì²´ì—¬ë¶€,  ì—°ì²´ì¼ìˆ˜ 30~ 120 ì‚¬ì´ ì—¬ë¶€, ì—°ì²´ ì¼ìˆ˜ 100ë³´ë‹¤ í° ì—¬ë¶€ ë°ì´í„° ê°€ê³µ. ', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ì‹\xa0ê·œ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ì‹\xa0ê·œ aggregation ì»¬ëŸ¼ ìƒì„±. ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # ì‹¤ì\xa0œ ë‚©ë¶€ ì¼ìž(DAYS_ENTRY_PAYMENT)ê°€ ë¹„êµì\xa0 ìµœê·¼(1ë…„ ì´ë‚´) ë°ì´í„°ë§Œ ë³„ë„ë¡œ ê°€ê³µ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # ì›”ë³„ ì¹´ë“œ í—ˆìš©í•œë„ì— ë”°ë¥¸ ìž”ê³\xa0ì™€ ì¸ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ', '    # DPDì— ë”°ë¥¸ ê°€ê³µ ì»¬ëŸ¼ ìƒì„±.', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ê°€ê³µ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ aggregation ì‹\xa0ê·œ ì»¬ëŸ¼ ìƒì„±. ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # MONTHS_BALANCEê°€ ë¹„êµì\xa0 ìµœê·¼ ë°ì´í„°( 3ê°œì›” ì´í•˜)ë§Œ ë³„ë„ë¡œ ê°€ê³µ.  ', '# ### datasets concatenation and Join', '# In[9]:', '# appsì™€ prev_agg, bureau_agg, pos_bal_agg, install_agg, card_bal_aggë¥¼ ê°œë³„ í•¨ìˆ˜ í˜¸ì¶œí•˜ì—¬ ìƒì„±í›„ ì¡°ì¸ ê²°í•©', '  # Join with apps_all', '# ### reload the original *datasets*', '# In[10]:', '# In[11]:', '# ### Data preparation, encodeing, datasets split, fit', '# In[12]:', '# application, previous, bureau, bureau_bal ê´€ë\xa0¨ ë°ì´í„°ì…‹ ê°€ê³µ ë° ì·¨í•©. ', '# Category ì»¬ëŸ¼ì„ ëª¨ë‘ Label ì¸ì½”ë”© ìˆ˜í–‰. ', '# í•™ìŠµê³¼ í…ŒìŠ¤íŠ¸ ë°ì´í„°ë¡œ ë¶„ë¦¬. ', '# ### CSV for Predicted result', '# In[13]:', '# In[14]:', '# ### Plot importance of features', '# In[15]:', '# In[16]:']",95
home-credit-default-risk-production-level.py,"['# coding: utf-8', '# ', '# ## This notebook is the slightly revised version of our project notebook created in collobaration with all Machine Learning bootcamp students of Mustafa Vahit Keskin (https://github.com/mvahit) in April 2020. Thanks to all my colleagues and my teacher.', '# ## We evaluated the notebook altogether, but I have worked specifically on the previous application part.', '# ', '# # Libraries', '# In[1]:', '# # Helper Functions', '# In[2]:', '# In[3]:', '# Display/plot feature importance', '# # application_train', '# In[4]:', '# # bureau & bureau_balance', '# In[5]:', '    # Degisken isimlerinin yeniden adlandirilmasi ', '    # Status_sum ile ilgili yeni bir degisken olusturma', '    # bureau_bb tablosundaki kategorik degiskenlere One Hot Encoding uygulanmasi', '    # CREDIT_CURRENCY degiskeninin %99u currency1, bu sebeple ayirt ediciligi olmayacagini dusundugumuz icin sildik  ', '    # bureau_bb_agg tablosuna aggreagation islemlerinin uygulanamasi  ', '    # Degisken isimlerinin yeniden adlandirilmasi ', '    # kisinin aldÄ±gÄ± en yuksek ve en dusuk kredinin farkÄ±nÄ± gÃ¶steren yeni degisken', '    # ortalama kac ayda bir kredi cektigini ifade eden  yeni degisken', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# # installments_payments', '# In[6]:', '    # Her bir taksit Ã¶demesinin gec olup olmama durumu 1: gec Ã¶dedi 0: erken Ã¶demeyi temsil eder', '    # Agrregation ve degisken tekillestirme', '    # Multi index problemi cÃ¶zÃ¼mÃ¼', '    # drop variables ', '    # Kredi Ã¶deme yÃ¼zdesi ve toplam kalan borc', '# # pos_cash_balance', '# In[7]:', '    # Kategorik Degiskenimizi Dummy Degiskenine DÃ¶nÃ¼stÃ¼rme', '    # Aggregation Islemi - Tekillestirme', ""    # Multilayer index'i tek boyutlu index'e dÃ¶nÃ¼stÃ¼rme"", '    # SK_DPD kac kredide 0 olma durumu (SK_DPD MAX alacagiz 0 durumunu veriyor) ', '    # SK_DPD_DEF (SK_DPD_DEF_MAX sifir olma durumunu veriyor)', '    # CNT_INSTALMENT_FUTURE_MIN==0 oldugunda NAME_CONTRACT_STATUS_Completed_SUM==0 olma durumu ', '    # 1:kredi zamaninda kapanmamis 0:kredi zamaninda kapanmis', '# # credit_card_balance', '# In[8]:', ""    CCB = pd.get_dummies(CCB, columns= ['NAME_CONTRACT_STATUS'] )  # artik tumu sayisal "", '    # Bu fonksiyon, kac defa odemelerin geciktigini hesaplar   # Function to calculate number of times Days Past Due occurred ', '        # DPD ile beklenen bir seri: SK_DPD degiskeninin her bir prev_app daki gecmis kredi icin olan degerleri  # DPD is a series of values of SK_DPD for each of the groupby combination ', '        # We convert it to a list to get the number of SK_DPD values NOT EQUALS ZERO', '        P = len(M)        # P: taksit sayisi', '        # Find the count of transactions when Payment made is less than Minimum Payment ', ""    CCB['CASH_CARD_RATIO1'] = (CCB['DRAWINGS_ATM']/CCB['DRAWINGS_TOTAL'])*100  # ATM den cektigi nakit / toplam cektigi"", ""    CCB['DRAWINGS_RATIO1'] = (CCB['TOTAL_DRAWINGS']/CCB['NUMBER_OF_DRAWINGS'])*100     # yuzdelik degil, genisleme yapmis"", '# In[ ]:', '# # previous_application', '# In[9]:', '    # ""WEEKDAY_APPR_PROCESS_START""  deÄŸiÅŸkeninin  WEEK_DAY ve WEEKEND olarak iki kategoriye ayrÄ±lmasÄ±', '    # ""HOUR_APPR_PROCESS_START""  deÄŸiÅŸkeninin working_hours ve off_hours olarak iki kategoriye ayrÄ±lmasÄ±', '    # DAYS_DECISION deÄŸeri 1 yÄ±ldan kÃ¼Ã§Ã¼k olanlara 1, bÃ¼yÃ¼k olanlara 0 deÄŸeri verildi.', '    # ""NAME_TYPE_SUITE""  deÄŸiÅŸkeninin alone ve not_alone olarak iki kategoriye ayrÄ±lmasÄ±', '    # ""NAME_GOODS_CATEGORY""  deÄŸiÅŸkenindeki bu deÄŸerler others olarak kategorize edilecek', '    # ""NAME_SELLER_INDUSTRY""  deÄŸiÅŸkenindeki bu deÄŸerler others olarak kategorize edilecek', '    # Ä°stenilen krecinin verilen krediye oranÄ± iÃ§eren deÄŸiÅŸkeni tÃ¼retir', '    # Ä°stenilen krecinin verilen krediye oranÄ± iÃ§eren deÄŸiÅŸkeni tÃ¼retir', '    # Ã–deme gÃ¼nÃ¼nÃ¼ geciktirmiÅŸ mi bunu gÃ¶steren churn_prev deÄŸiÅŸkeni tÃ¼retilir.', '    # 1= geciktirmiÅŸ, 0 = geciktirmemiÅŸ, NaN = boÅŸ deÄŸer', '    # NFLAG_INSURED_ON_APPROVAL deÄŸiÅŸkeni yerine kullanÄ±lmak izere NEW_INSURANCE deÄŸiÅŸkeni tanÄ±mlandÄ±.', '    # INTEREST_RATE deÄŸiÅŸkenini oluÅŸturur.', '    # Previous tablosundaki kategorik deÄŸiÅŸkenlerin isimlerini tutar.', '# # Combine', '# In[10]:', '# In[ ]:', '# # Model Tuning (Will be done in the future)', '# In[11]:', '#              ""n_estimators"": [200, 500, 100],', '#              ""max_depth"":[1,2,35,8]}', '# In[12]:', '# # Machine Learning', '# In[13]:', '# # main', '# In[14]:', '# In[15]:']",80
home-credit-default-risk-project-with-lightgbm.py,"['# coding: utf-8', '# Based on kernels and discussions:', '# ', '#   - https://www.kaggle.com/jsaguiar/lightgbm-with-simple-features', '#     ', '#   - https://github.com/mvahit/home_credit (collaboration with the community of Veri Bilimi Okulu that I also joined)', '#     ', '#   - https://www.kaggle.com/c/home-credit-default-risk/discussion/64821', '# In[1]:', '# In[2]:', '# Time function for tracking run times of functions', '# In[3]:', '# One-hot encoding function for categorical variables with get_dummies', '# In[4]:', '    original_columns = list(df.columns) # col names as string in a list ', '    # Create a label encoder object', '    # Iterate through the columns', '            # If 2 or fewer unique categories', '                # Train on the training data', '                # Transform both training and testing data', '                # Keep track of how many columns were label encoded', '# In[5]:', '# Preprocess application_train.csv and application_test.csv', '    # Some simple new features (percentages)', '    # Categorical features with One-Hot encode', '# In[6]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '     # Bureau new features', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[7]:', '# Preprocess previous_applications.csv', '# In[8]:', '# Preprocess POS_CASH_balance.csv', '# In[9]:', '# Preprocess installments_payments.csv', '# In[10]:', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[11]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# In[12]:', '# Display/plot feature importance', '# In[13]:']",54
home-credit-default-risk-with-xgboost-and-lightgbm.r,[],0
home-credit-default-risk.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# In[4]:', '# In[5]:', '# Testing data features', '# In[6]:', '# In[7]:', '# In[8]:', '# Function to calculate missing values by column# Funct ', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[9]:', '# Missing values statistics', '# In[10]:', '# In[11]:', '# Number of unique classes in each object column', '# In[12]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[13]:', '# one-hot encoding of categorical variables', '# In[14]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# In[20]:', '# In[21]:', '# Find correlations with the target and sort', '# Display correlations', '# In[22]:', '# Find the correlation of the positive days since birth and target', '# In[23]:', '# Set the style of plots', '# Plot the distribution of ages in years', '# In[24]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', '# In[25]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[26]:', '# Group by the bin and calculate averages', '# In[27]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# In[28]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[29]:', '# Heatmap of correlations', '# In[30]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# In[31]:', '# Copy the data for plotting', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# Function to calculate correlation coefficient between two columns', '# Create the pairgrid object', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# In[32]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', '# In[33]:', '# Train the polynomial features', '# Transform the features', '# In[34]:', '# In[35]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# In[36]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# In[37]:', '# In[38]:', '# In[39]:', '# iterate through the new features', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# In[40]:', '# from sklearn.preprocessing import MinMaxScaler, Imputer', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', ""# imputer = Imputer(strategy = 'median')"", '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[41]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[42]:', '# Make predictions', '# Make sure to select the second column only', '# In[43]:', '# Submission dataframe', '# In[44]:', '# Save the submission to a csv file', '# In[45]:', '# Make the random forest classifier', '# In[46]:', '# Train on the training data', '# Extract feature importances', '# Make predictions on the test data', '# In[47]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[48]:', '# Impute the polynomial features', ""# imputer = Imputer(strategy = 'median')"", '# Scale the polynomial features', '# In[49]:', '# Train on the training data', '# Make predictions on the test data', '# In[50]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[51]:', '# Impute the domainnomial features', '# Scale the domainnomial features', '# Train on the training data', '# Extract feature importances', '# Make predictions on the test data', '# In[52]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[53]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[54]:', '# Show the feature importances for the default features', '# In[55]:', '# In[ ]:']",183
home-credit-difficult.py,"['# coding: utf-8', '# ä»Šå›žã¯ç‰¹å¾´é‡ã‚¨ãƒ³ã‚¸ãƒ‹ã‚¢ãƒªãƒ³ã‚°ã¾ã§ã‚’æ‰±ã†', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# ä»Šå›žæ‰±ã†ç•°å¸¸å€¤ã¯DAYS_EMPLOYEDã®ã¿(ç•°å¸¸å€¤ã®åŸºæº–ã‚ã‹ã‚‰ãšãƒ»ç•°å¸¸å€¤ã‚’è¦‹ã¤ã‘ã‚‹æ–¹æ³•æ›–æ˜§)', '# In[4]:', '# testãƒ‡ãƒ¼ã‚¿ã«ã‚‚åŒã˜ã‚‚ã®ãŒã‚ã‚‹ã‹ã‚‚ã—ã‚Œãªã„ã®ã§ã€trainã¨åŒæ§˜ã®å‡¦ç½®ã‚’ã™ã‚‹', '# In[5]:', '# ã“ã“ã§ãƒ‡ãƒ¼ã‚¿ã®æ¬\xa0æçŽ‡ã‚’ç¢ºèª', '# In[6]:', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[7]:', '# æ¬\xa0æçŽ‡60%ä»¥ä¸Šã¯è¶³åˆ‡ã‚Š', '# ', '# ã©ã‚Œã»ã©ã®æ¬\xa0æçŽ‡ã§è¶³åˆ‡ã‚Šã™ã‚‹ã¹ãã‹ã¯ã‚ã‹ã‚‰ãš', '# ', '# ã‚‚ã£ã¨ã„ã„ã‚³ãƒ¼ãƒ‰ã®æ›¸ãæ–¹ã‚ã£ãŸã¯ãš', '# In[8]:', '# è¶³åˆ‡ã‚Šã—ãŸç‰¹å¾´é‡ä»¥å¤–ã®ç›¸é–¢ã‚’ç¢ºèªã™ã‚‹', '# ', '# ç›®çš„å¤‰æ•°ã¨ã®ç›¸é–¢ãŒå¼·ã„ç‰¹å¾´é‡ã‚’æŒ™ã’ã‚‹', '# In[9]:', '# Find correlations with the target and sort', '# Display correlations', '# ä¸Šè¨˜ã®ç‰¹å¾´é‡ã¯ã‚ã‚‹ç¨‹åº¦ç›®çš„å¤‰æ•°ã¨ã®é–¢ä¿‚ãŒã¿ã‚‰ã‚Œã‚‹ãŸã‚ã€æŽ¡ç”¨ã™ã‚‹', '# ', '# ã‚ã¨ã¯ã€å€‹äººçš„ã«é–¢ä¿‚ã‚ã‚Šãã†ãªç‰¹å¾´é‡ã‚’è¤‡æ•°é¸ã¶', '# ', '# AMT_INCOME_TOTAL(ã‚¯ãƒ©ã‚¤ã‚¢ãƒ³ãƒˆã®åŽå…¥)ã€€NAME_HOUSING_TYPE(ã‚¯ãƒ©ã‚¤ã‚¢ãƒ³ãƒˆã®ä½å®…æƒ…å\xa0±)', '# In[10]:', '# ã¨ã‚Šã‚ãˆãštrainãƒ‡ãƒ¼ã‚¿ã¨testãƒ‡ãƒ¼ã‚¿ã‚’ä½œã£ã¦ã¿ã‚‹', '# In[11]:', '# In[12]:', '# In[13]:', '# ä»Šå›žä½¿ã†ç‰¹å¾´é‡ã®ä¸\xadã«ã‚«ãƒ†ã‚´ãƒªã‚«ãƒ«å¤‰æ•°ãŒã‚ã‚‹ã®ã§ã€ãƒ©ãƒ™ãƒ«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã¨ãƒ¯ãƒ³ãƒ›ãƒƒãƒˆã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã‚’è¡Œã†', '# ', '# ã“ã®è¾ºã‚‚å°‘ã—æ›–æ˜§ã\xa0ãŒã€ä»Šå›žã¯ç‰¹å¾´é‡ã®ã‚«ãƒ†ã‚´ãƒªã‚«ãƒ«å¤‰æ•°ãŒ2å€‹ä»¥ä¸‹ãªã‚‰ãƒ©ãƒ™ãƒ«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã€ãã‚Œä»¥ä¸Šãªã‚‰ãƒ¯ãƒ³ãƒ›ãƒƒãƒˆã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã¨ã™ã‚‹(æ±ºå®šæœ¨ã«ãŠã„ã¦ãƒ©ãƒ™ãƒ«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã¯æœ‰åŠ¹ã‚‰ã—ã„ã®ã§ã€LightGBMã‚’æœ€åˆã‹ã‚‰ä½¿ã†äºˆå®šãªã‚‰ã€ãƒ¡ãƒ¢ãƒªã‚‚ç¯€ç´„ã§ãã‚‹ã®ã§ã€ã™ã¹ã¦ã‚’ãƒ©ãƒ™ãƒ«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã«ã—ã¦ã‚‚ã„ã„ã‹ã‚‚ï¼Ÿ)', '# In[14]:', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# ãƒ¯ãƒ³ãƒ›ãƒƒãƒˆã‚¨ãƒ³ã‚³ãƒ¼ãƒ‡ã‚£ãƒ³ã‚°ã¯pandasã®get_dummiesã«ã‚ˆã‚Šå¯èƒ½', '# In[15]:', '# ä»Šå›žä½¿ã†ç‰¹å¾´é‡ã«ã¯æ¬\xa0æã—ã¦ã„ã‚‹ãƒ‡ãƒ¼ã‚¿ãŒã‚ã‚‹ã®ã§ã€åŸ‹ã‚ã¦ã„ã', '# ', '# é©åˆ‡ãªãƒ‡ãƒ¼ã‚¿ã®åŸ‹ã‚æ–¹ãŒç¾åœ¨æ›–æ˜§ãªã®ã§ã€ä»Šå›žã¯æ¬\xa0æã—ã¦ã„ã‚‹æ•°å€¤ã‚’å¹³å‡å€¤ã§åŸ‹ã‚ãŸ', '# In[16]:', '# æœ€å¾Œã«ã€ãƒˆãƒ¬ãƒ¼ãƒ‹ãƒ³ã‚°ãƒ‡ãƒ¼ã‚¿ã¨ãƒ†ã‚¹ãƒˆãƒ‡ãƒ¼ã‚¿ã‚’ä½œæˆã—ã¦ç‰¹å¾´é‡ã‚¨ãƒ³ã‚¸ãƒ‹ã‚¢ãƒªãƒ³ã‚°çµ‚äº†', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '#     print(train_index, valid_index)', '    # : ã¯å…¨ã¦ã®ãƒ©ãƒ™ãƒ«ã€ã¤ã¾ã‚Šã€train_indexè¡Œã®å…¨ã¦ã®åˆ—ãƒ©ãƒ™ãƒ«ã‚’é¸æŠžã—ã¦ã„ã‚‹', '# In[21]:', '# In[22]:']",73
home-credit-fastai-trial.py,"['# coding: utf-8', '# In[27]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# In[47]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",36
home-credit-feature-engineering-and-prediction.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# For model estimation', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# In[25]:', '# # Feature Engineering', '# ', '# ### Application Train', '# - income to credit', '# - income per person', '# - annuity to income', '# - days employed relative to age', '# ', '# ', '# ### Bureau', '# - groupby for counts, means, min, max', '# In[1]:', '# In[ ]:', '# In[26]:', ""# data['SOURCE_1_PERCENT'] = data['EXT_SOURCE_1']/(data['EXT_SOURCE_1']+data['EXT_SOURCE_2']+data['EXT_SOURCE_3'])"", ""# data['SOURCE_2_PERCENT'] = data['EXT_SOURCE_2']/(data['EXT_SOURCE_1']+data['EXT_SOURCE_2']+data['EXT_SOURCE_3'])"", ""# data['SOURCE_3_PERCENT'] = data['EXT_SOURCE_3']/(data['EXT_SOURCE_1']+data['EXT_SOURCE_2']+data['EXT_SOURCE_3'])"", ""# test['SOURCE_1_PERCENT'] = test['EXT_SOURCE_1']/(test['EXT_SOURCE_1']+test['EXT_SOURCE_2']+test['EXT_SOURCE_3'])"", ""# test['SOURCE_2_PERCENT'] = test['EXT_SOURCE_2']/(test['EXT_SOURCE_1']+test['EXT_SOURCE_2']+test['EXT_SOURCE_3'])"", ""# test['SOURCE_3_PERCENT'] = test['EXT_SOURCE_3']/(test['EXT_SOURCE_1']+test['EXT_SOURCE_2']+test['EXT_SOURCE_3'])"", '# In[ ]:', '# In[4]:', '# def plot_target(data, feature, xlab= \'\', ylab= \'\', title= """"):', '#     plt.figure(figsize=(12,9))', ""#     sns.kdeplot(data.loc[data['TARGET'] == 0, feature], label = 'target == 0')"", '#     # KDE plot of loans which were not repaid on time', ""#     sns.kdeplot(data.loc[data['TARGET'] == 1, feature], label = 'target == 1')"", '#     # Labeling of plot', '#     plt.xlabel(feature); plt.ylabel(\'Density\'); plt.title(""Distribution of %s""%(feature));', '# In[6]:', ""# plot_target(data, 'Annuity_Income')"", '# In[6]:', ""# plot_target(data,'Income_Cred')"", '# In[7]:', ""# plot_target(data, 'EMP_AGE')"", '# In[8]:', ""# plot_target(data,'Income_PP')"", '# ## Bureau summary statistics', '# In[7]:', '# df1 = bureau', '# def new_features(df1, group_by ,stats, data_name):', '#     columns = [group_by]', '#     data_features = df1.groupby(group_by).agg(stats).reset_index()', '#     for var in data_features.columns.levels[0]:', '#         # ignore grouping variable', '#         if var != group_by:', '#             # get rid of original variable', '#             for stat in data_features.columns.levels[1][:-1]:', ""#                 columns.append('%s_%s_%s' %(data_name,var,stat))"", '#     data_features.columns = columns            ', ""#     data = bureau.merge(data_features , on='SK_ID_CURR', how = 'left')"", '#     return data', '# In[11]:', ""# bureau_new = new_features(bureau.drop(columns = ['SK_ID_BUREAU']),'SK_ID_CURR', stats ,data_name = 'bureau')"", '# bureau_new.head()', '# ## Add number of loans as a variable: count', '# In[27]:', '# COUNT', '# ## Unique loan types per customer', '# In[28]:', '# ## Average loan type ', '# ### are customer taking out the same type of loans or different types', '# In[29]:', '# ## Percentage of active loans', '# In[30]:', '# ## Number of days between loans', '# In[13]:', ""# gp = bureau_new[['SK_ID_CURR', 'SK_ID_BUREAU', 'DAYS_CREDIT']].groupby('SK_ID_CURR')"", ""# gp1 = gp.apply(lambda x: x.sort_values(['DAYS_CREDIT'], ascending = False)).reset_index(drop=True)"", '# # Difference between the days', '# gp1[""DAYS_CREDIT1""] = gp1[""DAYS_CREDIT""]*-1', ""# gp1['DAYS_DIFF']  = gp1.groupby(by = ['SK_ID_CURR'])['DAYS_CREDIT1'].diff()"", ""# gp1['DAYS_DIFF'] = gp1['DAYS_DIFF'].fillna(0).astype('uint32')"", ""# del gp1['DAYS_CREDIT'], gp1['DAYS_CREDIT1'], gp1['SK_ID_CURR']"", ""# bureau_new = bureau_new.merge(gp1, on = 'SK_ID_BUREAU', how = 'left')"", '# ## % of loans where end date of credit is past', '# ## value < 0 means the end date has past', '# In[31]:', '# ## Further cleaning and modelling', '# In[32]:', '# get some summary stats of numeric variables', '# ## Bureau and Bureau Balance Merging', '# - merges bureau and bureau balance and aggregates them to the  SK_ID_CURR level the same as data', '# In[34]:', '# Bureau Balance ', '# # Number of loans per person', '# ## Installment Applications', '# In[35]:', '# Was it paid on early or late?', ""# installments_payments['DAYS_P'] = installments_payments['DAYS_P'].apply(lambda x: x if x > 0 else 0)"", ""# installments_payments['DAYS_I'] = installments_payments['DAYS_I'].apply(lambda x: x if x > 0 else 0)"", '# ## Previous applications', '# In[37]:', '# 365243 is NAN', '# ## Group the approved and non approved previous loan data', '# In[38]:', '# Previous Applications: Approved Applications - only numerical features', '# Previous Applications: Refused Applications - only numerical features', ""# del previous_application['SK_ID_PREV']"", '# ## POS_CASH balance', '# In[39]:', '# ## Credit Card Balance', '# In[ ]:', '# In[44]:', '# ## Merging Datasets', '# In[45]:', '# Previous Application', '# POS_CASH_BALANCE', '# Installments_payments', '# In[23]:', '# In[ ]:', '# Plot feature importances', '# # Try blending some models', '# In[1]:', '# Plot importances', '# In[ ]:']",129
home-credit-kor-ver.py,"['# coding: utf-8', '# * ë³¸ ì»¤ë„ì€ ë‹¤ìŒ ì»¤ë„ì„ ì°¸ì¡°í•˜ì—¬, ê³µë¶€ë¥¼ ìœ„í•œ ëª©ì\xa0ìœ¼ë¡œ ë”°ë¼ ì“´ ì»¤ë„ìž„.', '# * It is referenced by the kernel down below for study.', '# ', '# https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction', '# ## ì‚¬ìš©í•\xa0 ëª¨ë“ˆ ë¶ˆëŸ¬ì˜¤ê¸°.', '# In[1]:', '# numpy and pandas for data manipulation', '# sklearn preprocessing for dealing with categorical variables', '# File system management', '# Suppress warnings', '# matplotlib and seaborn for plotting', '# ## ë°ì´í„° ì½ì–´ë“¤ì´ê¸°', '# ', '# ë¨¼ì\xa0€, ì‚¬ìš©ê°€ëŠ¥í•œ ëª¨ë“\xa0 íŒŒì¼ì„ ë¦¬ìŠ¤íŠ¸ ì—… í•´ë³¸ë‹¤. 9ê°œì˜ íŒŒì¼ì´ ìžˆìœ¼ë©°,ê°ê° 1ê°œì”© í›ˆë\xa0¨, í…ŒìŠ¤íŠ¸ íŒŒì¼ì´ ìžˆë‹¤. ë˜í•œ, ì\xa0œì¶œ ì˜ˆì‹œ íŒŒì¼ê³¼ 6ê°œì˜ í”¼ì³ ë‚´ìš©ì´ ë“¤ì–´ìžˆëŠ” íŒŒì¼ì´ ìžˆìŒ.', '# In[2]:', '# List of files available.', '# In[3]:', '# Training data', '# í›ˆë\xa0¨ë°ì´í„°ì—ëŠ” 307511ê°œì˜ ê°ê° ë¡\xa0ì„ í•œ ì‚¬ëžŒì—ëŒ€í•´ ë°ì´í„°ë¥¼ ê°€ì§€ê³\xa0 ìžˆìœ¼ë©°, 122ê°œì˜ í”¼ì³ ì»¬ëŸ¼ì„ ë³´ì—¬ì¤€ë‹¤. í”¼ì³ê°€ ì™„ì\xa0„ ë§Žë„¤.', '# In[4]:', '# Testing data features', '# í…ŒìŠ¤íŠ¸ íŒŒì¼ì€ í›ˆë\xa0¨ íŒŒì¼ì— ë¹„í•´ ìƒë‹¹ížˆ ë°ì´í„° ìˆ˜ëŠ” ìž‘ë‹¤. ', '# `Target`ì»¬ëŸ¼ì´ ë¹\xa0ì\xa0¸ìžˆëŠ” ê²ƒì´ íŠ¹ì§•. ì»¬ëŸ¼ìˆ˜ê°€ 121ì¸ ê²ƒì— ì£¼ëª©!', '# ## EDA(Exploratory Data Analysis)', '# EDAë¥¼ í†µí•´ì„œ ë°ì´í„°ë“¤ì˜ í†µê³„ì\xa0ì¸ ì¶”ì´, ë°ì´í„° ê°„ì˜ ê´€ê³„ ë° ì–´ë–¤ íŒ¨í„´ë“¤ì„ íŒŒì•…í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ëª©í‘œëŠ”, ë°ì´í„°ë“¤ì´ ì–´ë–¤ ê²ƒë“¤ì„ ì–˜ê¸°í•˜ê³\xa0 ìžˆëŠ”ì§€ íŒŒì•…í•˜ëŠ” ê²ƒì´ë©°, ì\xa0„ì²´ì\xa0ì¸ ì¶”ì´ë¥¼ ë¨¼ì\xa0€ í™•ì¸í•˜ê³\xa0, ì\xa0ì\xa0 ì¢í˜€ ë‚˜ê°€ëŠ” ìˆœìœ¼ë¡œ í•˜ëŠ”ê²ƒì´ ì¢‹ë‹¤.', '# ë°ì´í„°ë“¤ì˜ ì–´ë–¤ íŒ¨í„´ì„ íŒŒì•…í•˜ë©´, ëª¨ë¸ì„ ì„\xa0íƒí•˜ëŠ”ë° ë„ì›€ì„ ì¤„ ìˆ˜ ìžˆê³\xa0, ì–´ë–¤ í”¼ì³ë“¤ì„ ì‚¬ìš©í•\xa0 ì§€ ê²°ì\xa0•í•\xa0 ìˆ˜ ìžˆë„ë¡ í•´ì¤€ë‹¤.', '# ### Examine the Distribution of the Target Column', '# íƒ€ì¼“ì€ ë¡\xa0ì— ëŒ€í•´ì„œ ëŒ€ìƒìžê°€ ë¡\xa0ì„ ëª¨ë‘ ìƒí™˜ í•\xa0 ê²ƒì¸ì§€ ì•„ë‹Œì§€ë¥¼ ë°”ì´ë„ˆë¦¬ ë¶„ë¥˜ë¡œ 0 ë˜ëŠ” 1ë¡œ ë‚˜íƒ€ë‚´ê³\xa0 ìžˆë‹¤.', '# ', '# 0ì´ ëª¨ë‘ ì\xa0•í•´ì§„ ê¸°ê°„ë‚´ì— ì\xa0•ìƒ ìƒí™˜í•˜ëŠ” ê²½ìš°', '# ', '# 1ì˜ ê²½ìš°ëŠ” ìƒí™˜í•˜ì§€ ëª»í•˜ëŠ” ê²½ìš°ë¥¼ ë‚˜íƒëƒ„!', '# ', '# ', '# In[5]:', '# ê·¸ëž˜ë„ ì\xa0•ìƒ ìƒí™˜ í•˜ëŠ” ê²½ìš°(0ì´ ë‚˜ì˜¤ëŠ” ìˆ«ìž)ê°€ í›¨ì”¬ ë§Žë„¤.', '# ížˆìŠ¤í†\xa0ê·¸ëž¨ìœ¼ë¡œ ë‘ ë°ì´í„°ë¥¼ ì‹œê°í™” í•´ë³´ìž!', '# In[6]:', '# > From this information, we see this is an imbalanced class problem. There are far more loans that were repaid on time than loans that were not repaid. Once we get into more sophisticated machine learning models, we can weight the classes by their representation in the data to reflect this imbalance.', '# ### Examine Missing value', '# ', '# ì´ì\xa0œ ê° ì»¬ëŸ¼ì˜ missing valueì˜ ìˆ˜ì™€ ê·¸ í¼ì„¼í‹°ì§€ë¥¼ í™•ì¸í•´ë³´ìž.', '# In[7]:', '# Total missing values', '# Percentage of missing values', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# Rename the columns', '# In[12]:', '# In[13]:', '# Sort the table by percentage of missing descending', '# Print some summary information', '# In[14]:', '# ìœ„ì˜ ê³¼ì\xa0•ì„ í•¨ìˆ˜í™” í•˜ì—¬ ë‹¤ì‹œ í‘œí˜„í•œë‹¤!', '# In[15]:', '    # Total missing values', '    # Percentage of missing values', '    # Make a table with the results / concatì€ ì§€ì\xa0• ë°ì´í„°ë¥¼ í•©ì³ì¤€ë‹¤.', '    # Rename the columns', '    # Sort the table by percentage of missing descending', '    # Print some summary information', '    # Return the dataframe with missing information', '# In[16]:', '# Missing values statistics', '# > When it comes time to build our machine learning models, we will have to fill in these missing values (known as imputation). In later work, we will use models such as XGBoost that can handle missing values with no need for imputation. Another option would be to drop columns with a high percentage of missing values, although it is impossible to know ahead of time if these columns will be helpful to our model. Therefore, we will keep all of the columns for now.', '# ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì„ ë§Œë“œëŠ”ë° ìžˆì–´ì„œ, ì´ëŸ° ëˆŒ ë°ì´í„°ë¥¼ ì±„ì›Œì•¼ í•œë‹¤.(imputation?)', '# ë‚˜ì¤‘ì— ìš°ë¦¬ëŠ” XGBoost ê°™ì€ ê²ƒì„ ì‚¬ìš©í•´ì„œ ëˆŒ ë°ì´í„°ì— ëŒ€í•œ imputation í•\xa0 í•„ìš”ê°€ ì—†ë‹¤?', '# ë˜ ë‹¤ë¥¸ í•˜ë‚˜ì˜ ì˜µì…˜ìœ¼ë¡œëŠ” ëˆŒ ë°ì´í„°ê°€ ë§Žì€ ì»¬ëŸ¼ì„ ì•„ì˜ˆ ì‚\xadì\xa0œ(ë“œëž) í•´ë²„ë¦¬ëŠ” ë°©ë²•ì¸ë°, ì´ëŸ° ì»¬ëŸ¼ì´ ì¤‘ìš”í•˜ì§€ ì•Šë‹¤ëŠ” ê²ƒì„ í™•ì¸í•˜ê¸° ì–´ë\xa0µê¸° ë•Œë¬¸ì—, ì¼ë‹¨ ì—¬ê¸°ì„œëŠ” ë‹¤ ë‚¨ê²¨ ë†“ê³\xa0 ì§„í–‰í•œë‹¤.', '# ### Column Types', '# ', '# ê° ë°ì´í„° íƒ€ìž…ì— ë”°ë¥¸ ì»¬ëŸ¼ì˜ ìˆ«ìžë¥¼ í™•ì¸í•œë‹¤. `int64`, `float64`ëŠ” ìˆ˜ì¹˜ì\xa0ì¸ ê°’ì„ ë‚˜íƒ€ë‚¸ë‹¤(ì—°ì†ì\xa0 ë˜ëŠ” ë¶ˆì—°ì†ì\xa0ì¼ ìˆ˜ ìžˆìŒ). ê°ì²´(object) ì»¬ëŸ¼ì€ ë¬¸ìžì—´ ê·¸ë¦¬ê³\xa0 ì¹´í…Œê³\xa0ë¦¬ì»¬ í”¼ì³ ë‚´ìš©ì„ ê°€ì§€ê³\xa0 ìžˆìŒ.', '# In[17]:', '# Number of each type of column', '# ì´ì\xa0œ, ê°ì²´ ë‚´ìš©ì„ ê°€ì§€ëŠ” íŠ¹ë³„í•œ ì»¬ëŸ¼ì˜ ë°ì´í„°ë¥¼ ì‚´í‘œë³¸ë‹¤.', '# In[18]:', '# Number of unique classes in each object column', '# pd.Series.nunique ë©”ì†Œë“œëŠ” ê° ì¹´í…Œê³\xa0ë¦¬ ì»¬ëŸ¼ì˜ ë°ì´í„°ë¥¼ ë¶„ë¥˜í•˜ëŠ” ë¶„ë¥˜ìž ìˆ˜ë¥¼ ë°˜í™˜í•¨ // ì•„ëž˜ ì°¸ì¡°', '# In[19]:', '# ì‹¤ì\xa0œ ì´ë\xa0‡ê²Œ ë°ì´í„° íƒ€ìž…ì„ ì„\xa0íƒí•´ì„œ ì¶œë\xa0¥í•´ë³´ë©´, ê° ì»¬ëŸ¼ë³„ë¡œ ì–´ë–¤ ì¢…ë¥˜ì˜ ë¶„ë¥˜ìžë¡œ ë¶„ë¥˜ ë˜ëŠ”ì§€ ë³¼ ìˆ˜ ìžˆê³\xa0, ', '# nuniqueëŠ” ê¸°ë³¸ì\xa0ìœ¼ë¡œ nullë°ì´í„°ëŠ” ì\xa0œì™¸í•˜ê³\xa0 ë¶„ë¥˜ìž ê°¯ìˆ˜ë¥¼ ë°˜í™˜í•´ì¤€ë‹¤.', '# ê¸°ê´€ ë¶„ë¥˜ì¸ `ORGANIZATION_TYPE` ì´ ê°€ìž¥ ë§Žì€ ë¶„ë¥˜ìžë¥¼ ê°€ì§€ê³\xa0 ìžˆë‹¤.', '# ### Encoding Categorical Variables', '# ì¹´í…Œê³\xa0ë¦¬ ë³€ìˆ˜ë“¤ì€ ë¬¸ìžì—´ ë“±ìœ¼ë¡œ ì´ë£¨ì–´ ì\xa0¸ ìžˆê¸° ë•Œë¬¸ì—, ëª¨ë¸ì— ë°”ë¡œ ì\xa0ìš© í•\xa0 ìˆ˜ ì—†ë‹¤.', '# ', '# ê·¸ëž˜ì„œ, ì´ëŸ° ë³€ìˆ˜ë“¤ì„ ìˆ˜ì¹˜ì\xa0ìœ¼ë¡œ encoding í•´ì¤˜ì•¼ í•˜ëŠ”ë° ë‹¤ìŒ ë‘ê°€ì§€ ë°©ë²•ì„ í™œìš© í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# 1. Label encoding :', '# ', '# ê° ë¶„ë¥˜ìž ë³„ë¡œ ì\xa0•ìˆ˜ê°’ì„ í•\xa0ë‹¹í•´ì„œ ë¶„ë¥˜í•œë‹¤. ì¦‰, ìƒˆë¡œìš´ ì»¬ëŸ¼ì„ ë§Œë“¤ í•„ìš”ì—†ì´ í•´ë‹¹ ë¶„ë¥˜ì— ë§žëŠ” ì\xa0•ìˆ˜ê°’ì„ í•\xa0ë‹¹í•´ì„œ ë°”ê¿”ì£¼ë©´ ë¨', '# ![image.png](attachment:image.png)', '# 2. One-hot encoding : ', '# ', '# í•œ id ë³„ë¡œ ë¶„ë¥˜ìž¥ì˜ ì»¬ëŸ¼ì„ ëª¨ë‘ ìƒì„±í•´ì„œ, í•´ë‹¹ë˜ëŠ” ì»¬ëŸ¼ì— 1ì„ í•\xa0ë‹¹í•˜ê³\xa0,', '# ë‚˜ë¨¸ì§€ ì»¬ëŸ¼ì—ëŠ” 0ì„ í•\xa0ë‹¹í•˜ëŠ” ë°©ì‹, ì´ë\xa0‡ê²Œ í•˜ë©´ ì»¬ëŸ¼ì€ ë§Žì•„ ì§€ê¸° ë•Œë¬¸ì— ì—„ì²\xad ë°ì´í„°ì–‘ì´ ì»¤ì§€ëŠ” ê²ƒ ê°™ìŒ.', '# ê·¼ë° êµ¬ë¶„í•˜ê¸°ì—ëŠ” ì¢‹ì€ê±° ê°™ìŒ', '# ![image.png](attachment:image.png)', '# * ì°¸ê³\xa0ì‚¬í•\xad : ë¼ë²¨ ì¸ì½”ë”© vs. ì›-í•« ì¸ì½”ë”©ì— ëŒ€í•œ ì„¤ëª… ', '# ', '# ', '# >The problem with label encoding is that it gives the categories an arbitrary ordering. The value assigned to each of the categories is random and does not reflect any inherent aspect of the category. In the example above, programmer recieves a 4 and data scientist a 1, but if we did the same process again, the labels could be reversed or completely different. The actual assignment of the integers is arbitrary. Therefore, when we perform label encoding, the model might use the relative value of the feature (for example programmer = 4 and data scientist = 1) to assign weights which is not what we want. If we only have two unique values for a categorical variable (such as Male/Female), then label encoding is fine, but for more than 2 unique categories, one-hot encoding is the safe option.', '# ', '# >There is some debate about the relative merits of these approaches, and some models can deal with label encoded categorical variables with no issues. Here is a good Stack Overflow discussion. I think (and this is just a personal opinion) for categorical variables with many classes, one-hot encoding is the safest approach because it does not impose arbitrary values to categories. The only downside to one-hot encoding is that the number of features (dimensions of the data) can explode with categorical variables with many categories. To deal with this, we can perform one-hot encoding followed by PCA or other dimensionality reduction methods to reduce the number of dimensions (while still trying to preserve information).', '# ', '# >In this notebook, we will use Label Encoding for any categorical variables with only 2 categories and One-Hot Encoding for any categorical variables with more than 2 categories. This process may need to change as we get further into the project, but for now, we will see where this gets us. (We will also not use any dimensionality reduction in this notebook but will explore in future iterations).', '# ', '# ', '# ì¦‰, ì¹´í…Œê³\xa0ë¦¬ ë¶„ë¥˜ì—ì„œ ë¶„ë¥˜ìžê°€ 2ê°œ ì´ìƒì´ë©´, ì›-í•« ì¸ì½”ë”©ì„ ì“°ê³\xa0, 2ê°œì¼ê²½ìš°ëŠ” ë¼ë²¨ì¸ì½”ë”©ìœ¼ë¡œ ì§„í–‰í•œë‹¤.', '# ', '# 2ê°œì¼ê²½ìš°ì—ë§Œ ë¼ë²¨ì¸ì½”ë”©ì„ ì“°ëŠ” ì´ìœ\xa0ëŠ”, 2ê°œ ì´ìƒì¼ ë•Œ ë¼ë²¨ ì¸ì½”ë”©ì„ ì“°ë©´ ìž„ì˜ì\xa0ì¸ ìˆœì„œë¥¼ ë¶€ì—¬í•˜ëŠ” ê²ƒì´ê¸° ë•Œë¬¸ì— ì–´ë–¤ ë¶„ë¥˜ìžì— ëŒ€í•œ íŠ¹ì\xa0• ê°€ì¤‘ì¹˜ê°€ ê°€í•´ì§€ëŠ” íš¨ê³¼? ê°€ ìƒê¸°ëŠ” ê²ƒìœ¼ë¡œ ìƒê°ë˜ë¯€ë¡œ, 2ê°œ ì´ìƒì˜ ë¶„ë¥˜ìžë¥¼ ê°€ì§ˆ ë•ŒëŠ” ì›-í•« ì¸ì½”ë”©ì„ ì“°ëŠ”ê²Œ ì¢‹ë‹¤.', '# ', '# í•˜ì§€ë§Œ ì•ˆì¢‹ì€ ì\xa0ì€ ë¶„ë¥˜ìž ìˆ˜ë§Œí¼ ì»¬ëŸ¼ì´ ì¦ê°€í•˜ê¸° ë•Œë¬¸ì— ì—„ì²\xadë‚œ ì–‘ì˜ ë°ì´í„°ê°€ ìƒì„±ëœë‹¤ëŠ” ì\xa0ë§Œ ë¹¼ë©´ ì›-í•« ì¸ì½”ë”©ì´ í›¨ì”¬ ì¢‹ë‹¤ê³\xa0 í•¨.', '# ### Label Encoding and One-Hot Encoding', '# ê·¸ëž˜ì„œ, ì¹´í…Œê³\xa0ë¦¬ ë°ì´í„°ì˜ dtype==object ì´ë©´ì„œ ë¶„ë¥˜ìžê°€ 2ê°œì´ë©´ label encodingì„ ì‚¬ìš©!', '# ', '# ë¶„ë¥˜ìžê°€ 2ê°œì´ìƒì˜ ê²½ìš°ì—ëŠ” one-hot encodingì„ ì±„ìš©í•´ì„œ ì‚¬ìš©í•¨.', '# ', '# ë¼ë²¨ ì¸ì½”ë”©ì—ì„œëŠ” Scikit-Learn `LabelEncoder`ì„ ì‚¬ìš©í•˜ê³\xa0,', '# one-hot encoding ì—ì„œëŠ” pandas ì˜  `get_dummies(df)` í•¨ìˆ˜ë¥¼ ì‚¬ìš©í•œë‹¤.', '# In[20]:', '# Create a label encoder object.', '# In[21]:', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both Training and Testing data', '            # Keep track of how many columns label encoded', '# In[22]:', '# ë¼ë²¨ ì¸ì½”ë”© ëœê±¸ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤', '# In[23]:', '# one-hot encoding of categorical variables', '# ### Aligning Training and Testing Data', '# ', '# ì¼ë‹¨, íŠ¸ë\xa0ˆì´ë‹/í…ŒìŠ¤íŒ… ì»¬ëŸ¼ ìˆ˜ ì°¨ì´ê°€ íƒ€ê²Ÿ ì»¬ëŸ¼ í•˜ë‚˜ë§Œ ë‚˜ëŠ”ê²Œ ì\xa0•ìƒì¸ë°, í˜„ìž¬ ë°ì´í„°ë¥¼ ë³´ë©´ ì°¨ì´ê°€ ìžˆë‹¤. ', '# > There need to be the same features (columns) in both the training and testing data. One-hot encoding has created more columns in the training data because there were some categorical variables with categories not represented in the testing data. To remove the columns in the training data that are not in the testing data, we need to align the dataframes. First we extract the target column from the training data (because this is not in the testing data but we need to keep this information). When we do the align, we must make sure to set axis = 1 to align the dataframes based on the columns and not on the rows!', '# ', '# í…ŒìŠ¤íŠ¸ ë°ì´í„°ì—ëŠ” ì—†ëŠ” ì»¬ëŸ¼ë°ì´í„°(ì¹´í…Œê³\xa0ë¦¬ ë°ì´í„°)ê°€ íŠ¸ë\xa0ˆì´ë‹ ë°ì´í„°ì— ìžˆê¸° ë•Œë¬¸ì— ì°¨ì´ê°€ ë‚˜ëŠ”ë°, ê·¸ ì»¬ëŸ¼ë“¤ì„ ì\xa0œê±° í•´ì£¼ëŠ” ê²Œ ì¢‹ë‹¤.', '# ', '# ì¦‰, íŠ¸ë\xa0ˆì´ë‹ì—ë§Œ ìžˆëŠ” ì»¬ëŸ¼ë“¤ì„ ì‚\xadì\xa0œí•´ì„œ, í…ŒìŠ¤íŠ¸ ë°ì´í„°ì™€ align í•´ì¤˜ì•¼ í•œë‹¤ëŠ” ë§!', '# ', '# ë¨¼ì\xa0€, íŠ¸ë\xa0ˆì´ë‹ ë°ì´í„°ë¥¼ ê°€ê³µí•´ì•¼ë˜ëŠ”ë°, íƒ€ê²Ÿë°ì´í„°ë¥¼ ì‚´ë\xa0¤ë‘ê¸° ìœ„í•´ì„œ ë”°ë¡œ ì\xa0€ìž¥í•´ë†“ìž!', '# ', '# ì£¼ì˜í•\xa0 ì\xa0ì€ axis=1ì˜ ì»¬ëŸ¼ë°ì´í„°ë¥¼ ê°€ê³µí•´ì•¼í•˜ëŠ” ì\xa0!, axis=0ì˜ ê²½ìš°ì—ëŠ” row ë°ì´í„°ë¥¼ ë‚˜íƒ€ëƒ„!', '# In[24]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# In[25]:', '# app_test ì»¬ëŸ¼ì— ë§žì¶°ì„œ app_train ë°ì´í„°ì˜ ì»¬ëŸ¼ìˆ˜ë¥¼ ë§žì·„ë‹¤!', '# > The training and testing datasets now have the same features which is required for machine learning. The number of features has grown significantly due to one-hot encoding. At some point we probably will want to try dimensionality reduction (removing features that are not relevant) to reduce the size of the datasets.', '# ', '# ì›ëž˜ app_train ë°ì´í„°ì˜ ì»¬ëŸ¼ìˆ˜ê°€ 122ê°œ ì˜€ëŠ”ë°, ì—„ì²\xad ëŠ˜ì—ˆë„¤. one-hot encodingìœ¼ë¡œ 240ê°œ ê¹Œì§€ ëŠ˜ì—ˆë‹¤.', '# ', '# ì˜í–¥ì´ ì\xa0ì€ ë‚´ìš©ë“¤ì— ëŒ€í•´ì„œëŠ” ì°¨ì›ì„ ì¤„ì´ê¸° ìœ„í•´ì„œ ê³¨ë¼ë‚¼ í•„ìš”ê°€ ìžˆë‹¤.', '# ### Back to Exploratory Data Analysis', '# ', '# Anomalies(ë³€ì¹™ì\xa0ì¸, ì´ë¡€ì\xa0ì¸ ë‚´ìš©ë“¤)', '# > One problem we always want to be on the lookout for when doing EDA is anomalies within the data. These may be due to mis-typed numbers, errors in measuring equipment, or they could be valid but extreme measurements. One way to support anomalies quantitatively is by looking at the statistics of a column using the describe method. The numbers in the DAYS_BIRTH column are negative because they are recorded relative to the current loan application. To see these stats in years, we can mutliple by -1 and divide by the number of days in a year:', '# ', '# ', '# ë°ì´í„° ê°’ë“¤ ì¤‘ì— ì´ë¡€ì\xa0ìœ¼ë¡œ, ë¬¸ì\xa0œê°€ ìžˆëŠ” ê°’ë“¤ì„ ì°¾ì•„ë‚´ì•¼ í•œë‹¤. íƒ€ìž…ì´ ìž˜ëª»ë˜ê±°ë‚˜, ì¸¡ì\xa0•ì´ ìž˜ëª»ë\xa0ìˆ˜ë„ ìžˆê³\xa0 ì—¬ëŸ¬ê°€ì§€ ìž˜ëª»ëœ ê²½ìš°ê°€ ìžˆì„ ìˆ˜ ìžˆë‹¤.', '# ', '# ê·¸ëž˜ì„œ, ê° ì»¬ëŸ¼ì— ëŒ€í•´ì„œ ì\xa0•ëŸ‰ì\xa0ìœ¼ë¡œ í™•ì¸ í•´ë³´ëŠ” ê²ƒ ì´ ì¢‹ì€ë°, `describe` ë©”ì†Œë“œë¥¼ ì´ìš©í•´ì„œ ì\xa0•ëŸ‰ì\xa0ìœ¼ë¡œ ë°ì´í„°ì˜ í†µê³„ ë°ì´í„°ë¥¼ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# `DAYS_BIRTH` ì»¬ëŸ¼ì€ í˜„ìž¬ ë¡\xa0 ëŒ€ìƒìžì˜ ë‚˜ì´ë¥¼ ìƒëŒ€ì\xa0ìœ¼ë¡œ ë‚˜íƒ€ë‚´ê¸° ë•Œë¬¸ì— ìŒìˆ˜ë¡œ í‘œì‹œë˜ì–´ ìžˆë‹¤. ê·¸ëŸ¬ë¯€ë¡œ -1ì„ ê³±í•´ì„œ ì–‘ìˆ˜í™” ì‹œí‚¤ê³\xa0 ë‚˜ì´ ê°’ìœ¼ë¡œ ë³€í™˜í•´ë³´ìž.', '# ', '# ', '# In[26]:', '# original DAYS_BIRTH ë°ì´í„° ê°’', '# In[27]:', '# í‰ê·\xa0ì¹˜ëž‘ ì¤‘ê°„ê°’(50%ë¶„ìœ„ìˆ˜)ì´ ê±°ì˜ ê·¼ì‚¬í•œ ìˆ˜ì¹˜ë¥¼ ê°€ì§€ë©°, ìµœëŒ€/ìµœì†Œê°’ë„ ì•„ì›ƒë¼ì´ì–´ë¼ê³\xa0 íŒë‹¨ë˜ì§€ëŠ” ì•Šìœ¼ë©° í¬ê²Œ ë¬¸ì\xa0œëŠ” ì—†ëŠ” ê²ƒìœ¼ë¡œ íŒë‹¨ëœë‹¤!', '# ', '# ë‹¤ìŒìœ¼ë¡œëŠ”, `DAYS_EMPLOYED` ìˆ˜ì¹˜ë¥¼ í™•ì¸í•´ë³´ìž!', '# In[28]:', '# ìµœì†Œê°’ì´ ì¼ë‹¨, ìŒìˆ˜ì´ê³\xa0, ìµœëŒ€ê°’ì€ 1000ì´ë©°, 75% ë¶„ìœ„ìˆ˜ê°€ ì—¬ì\xa0„ì´ ìŒìˆ˜ì´ë‹¤. ì´ìƒí•œ ê±° ê°™ë‹¤. ', '# ', '# ê·¸ë¦¬ê³\xa0, ì—°(year) ìˆ˜ë¡œ í™˜ì‚°í–ˆëŠ”ë°, 1000ë…„ì´ ë‚˜ì™”ìœ¼ë¯€ë¡œ, ì˜¬ë°”ë¥¸ ë°ì´í„°ëŠ” ì•„ë‹Œë“¯.', '# In[29]:', '# ì\xa0„ì²´ ë°ì´í„° ì¤‘ì—ì„œ ì´ë¡€ì\xa0ì¸ ë°ì´í„°? 1000ë…„ì´ ë„˜ëŠ” ê³\xa0ìš©ê¸°ê°„ìœ¼ë¡œ ë‚˜ì˜¤ëŠ” ë°ì´í„°?ê°€ ì¼ë°˜ ë°ì´í„°ë“¤ì˜ í†µê³„ ìˆ˜ì¹˜ë³´ë‹¤ ë†’ì€ì§€ ë‚®ì€ì§€ ë¶€ë¶„ìœ¼ë¡œ ë–¼ì–´ë‚´ì„œ ì‚´íŽ´ë³´ìž.', '# ì¦‰, ì\xa0•ìƒì¸ ë°ì´í„°, ì\xa0•ìƒì´ ì•„ë‹Œ ë°ì´í„°!', '# In[30]:', '# DAYS_EMPLOYED ê°’ì´ ìµœëŒ€ê°’ì„ ê°–ëŠ” ê³\xa0ê° ë°ì´í„°ë¥¼ ëª¨ë‘ ê°€ì\xa0¸ì™€ì„œ anomì— ì\xa0€ìž¥', '# DAYS_EMPLOYED ê°’ì´ ìµœëŒ€ê°’ì´ ì•„ë‹Œ ê³\xa0ê° ë°ì´í„°ë¥¼ ëª¨ë‘ ê°€ì\xa0¸ì˜´!', '# In[31]:', '# > Well that is extremely interesting! It turns out that the anomalies have a lower rate of default.', '# Handling the anomalies depends on the exact situation, with no set rules. One of the safest approaches is just to set the anomalies to a missing value and then have them filled in (using Imputation) before machine learning. In this case, since all the anomalies have the exact same value, we want to fill them in with the same value in case all of these loans share something in common. The anomalous values seem to have some importance, so we want to tell the machine learning model if we did in fact fill in these values. As a solution, we will fill in the anomalous values with not a number (np.nan) and then create a new boolean column indicating whether or not the value was anomalous.', '# ', '# ', '# ë””í´íŠ¸ ê°’, ì¦‰ íƒ€ê²Ÿê°’ì˜ í‰ê·\xa0ê°’ì´ ì´ë¡€ì\xa0ì¸ ê²½ìš°ì˜ ë°ì´í„°ê°€ ë” ìž‘ë‹¤. ì¦‰ ì§€ì\xa0• ì‹œê¸°ì— ëˆì„ ëª¨ë‘ ê°šì„ í™•ë¥\xa0ì´ ë†’ë‹¤ëŠ” ê±´ë° ìŒ...ì—¬ê¸°ì„œëŠ” ê°€ìž¥ ì•ˆì\xa0„í™” ë°ì´í„° ê°€ê³µ ë°©ë²•ìœ¼ë¡œëŠ”, ì´ëŸ° ì´ë¡€ì\xa0ì¸ ë°ì´í„° ë“¤ì— ëŒ€í•´ì„œ', '# ', '# missing value ì·¨ê¸‰ì„ í•œë‹¤ê³\xa0 í•œë‹¤. í•˜ì§€ë§Œ `np.nan`ê°’ìœ¼ë¡œ ëª¨ë‘ ì±„ì›Œì¤€ë‹¤ê³\xa0 í•œë‹¤. ê·¸ë¦¬ê³\xa0, booleanì»¬ëŸ¼ì„ ìƒˆë¡œ ë§Œë“¤ì–´ì„œ í•´ë‹¹ ê³\xa0ê° ì\xa0•ë³´ê°€ ì´ë¡€ì\xa0ì¸ ë°ì´í„°ì¸ì§€ ì•„ë‹Œì§€ë¥¼ ì•Œë\xa0¤ì£¼ëŠ” ìš©ë„ë¡œ ì‚¬ìš©í•œë‹¤.', '# In[32]:', '# Create anomalous flag column', '# í•´ë‹¹ ë°ì´í„°ê°€ ìžˆëŠ” ê³³ì—” Trueë¥¼ ë°˜í™˜í•´ì¤Œ', '# Replace the anomalous values with nan', '# numpyì˜ nanì„ ì‚¬ìš©, ì‚¬ì\xa0„í˜• í˜•íƒœë¡œ ë°ì´í„°ê°€ 365243ì¸ ê³³ì— np.nanì„ ë°˜í™˜í•´ì¤Œ!', '# ê·¸ëŸ¼ ë‹¤ì‹œ, ížˆìŠ¤í†\xa0ê·¸ëž¨ì„ ê·¸ë\xa0¤ì„œ, ë°ì´í„°ì˜ ê°€ê³µ ìƒíƒœë¥¼ í™•ì¸', '# In[33]:', '# ë°ì´í„°ë¥¼ ê°€ê³µí•˜ë‹ˆ ë¶„í¬ê°€ ë§¤ë„ëŸ½ê²Œ ìžì—°ìŠ¤ëŸ¬ì›Œ ì¡Œë‹¤.', '# í…ŒìŠ¤íŠ¸ ë°ì´í„°ì—ë„ ë˜‘ê°™ì€ ìž‘ì—…ì„ í•´ì¤˜ì•¼í•œë‹¤. ì¦‰, ìµœëŒ€ê°’ì„ ë¨¼ì\xa0€ ê°™ì€ì§€ í™•ì¸í•´ë³´ê³\xa0, ì´ë¡€ì\xa0ì¸ ë°ì´í„°ëŠ” ë¶„ë¥˜í•´ì„œ nanê°’ìœ¼ë¡œ ì±„ì›Œì¤€ë‹¤.', '# In[34]:', '# ì—\xadì‹œ íŠ¸ë\xa0ˆì´ë‹ ë°ì´í„°ì™€ ê°™ê²Œ ì´ìƒì¹˜ê°€ ë³´ì¸ë‹¤.', '# In[35]:', '# In[36]:', '# `DAYS_EMPLOYED_ANOM`ì˜ TRUEê°’ì„ ë‹¤ ë”í•˜ê²Œ ë˜ë©´ 9274ê°œê°€ ë‚˜ì˜´ì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤.', '# In[37]:', '# `DAYS_EMPLOYED == 365243` ì´ ì°¸ì¸ ê³³ì€ ìœ„ì™€ ê°™ì´ ë°ì´í„°ê°€ ì—†ìŒì„ í™•ì¸ê°€ëŠ¥!', '# ### Correlations', ""# >Now that we have dealt with the categorical variables and the outliers, let's continue with the EDA. One way to try and understand the data is by looking for correlations between the features and the target. We can calculate the Pearson correlation coefficient between every variable and the target using the .corr dataframe method."", '# The correlation coefficient is not the greatest method to represent ""relevance"" of a feature, but it does give us an idea of possible relationships within the data. Some general interpretations of the absolute value of the correlation coefficent are:', '# ', '# * .00-.19 â€œvery weakâ€', '# * .20-.39 â€œweakâ€', '# * .40-.59 â€œmoderateâ€', '# * .60-.79 â€œstrongâ€', '# * .80-1.0 â€œvery strongâ€', '# ë°ì´í„° ê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ í”¼ì–´ìŠ¨ê³„ìˆ˜ë¥¼ í†µí•´ì„œ í™•ì¸ í•\xa0 ìˆ˜ ìžˆìœ¼ë©°, `corr` ë©”ì†Œë“œë¥¼ ì´ìš©í•¨.', '# ', '# 1ì— ê°€ê¹Œìš´ ìˆ˜ì¹˜ëŠ” Positive ìƒê´€ê´€ê³„ / -1ì— ê°€ê¹Œìš´ ìˆ˜ì¹˜ëŠ” Negative ìƒê´€ê´€ê³„ë¥¼ ê°€ì§.', '# ', '# 0ì´ ë˜ë©´ ìƒê´€ê´€ê³„ê°€ ì—†ë‹¤ê³\xa0 íŒë‹¨í•˜ë©´ ë¨', '# In[38]:', '# ë¨¼ì\xa0€ ì\xa0„ì²´ì\xa0ì¸ ì½”ë¦´ë\xa0ˆì´ì…˜ ê³„ìˆ˜ë¥¼ ì´ë\xa0‡ê²Œ ì¶œë\xa0¥í•\xa0 ìˆ˜ ìžˆë‹¤. ë””í´íŠ¸ëŠ” í”¼ì–´ìŠ¨ ë°©ë²•ìœ¼ë¡œ ì½”ë¦´ë\xa0ˆì´ì…˜ í•¨', '# ìœ„ ìˆ˜ì¹˜ë“¤ì„ heatmapì„ í†µí•´ì„œ ì‹œê°í™” ëœ ë°ì´í„°ë¥¼ í™•ì¸í•œë‹¤.', '# In[39]:', '# ì»¬ëŸ¼ ìˆ˜ê°€ ë„ˆë¬´ ë§Žì•„ì„œ ì´ê±´ ëª»ë³¸ë‹¤. íŒ¨ìŠ¤!', '# In[40]:', '# Find correlations with the target and sort', '# In[41]:', '# Display correlations', ""# > Let's take a look at some of more significant correlations: the DAYS_BIRTH is the most positive correlation. (except for TARGET because the correlation of a variable with itself is always 1!) Looking at the documentation, DAYS_BIRTH is the age in days of the client at the time of the loan in negative days (for whatever reason!). The correlation is positive, but the value of this feature is actually negative, meaning that as the client gets older, they are less likely to default on their loan (ie the target == 0). That's a little confusing, so we will take the absolute value of the feature and then the correlation will be negative."", '# ', '# ë‚´ê°€ ì´í•´í•˜ê¸°ë¡\xa0, ë‹¤ìŒê³¼ ê°™ë‹¤. ì¼ë‹¨, ë¬¸ì„œìƒ DAYS_BIRTH ëŠ” ëŒ€ì¶œ ë‹¹ì‹œ ê³\xa0ê°ì˜ ì—°ë\xa0¹ì„ ì˜ë¯¸í•œë‹¤.', '# ', '# Positive ìˆ˜ì¹˜ê°€ ë†’ë‹¤ëŠ” ì˜ë¯¸ëŠ” ì¦‰, í•´ë‹¹ feature ê°’ì´ ì¦ê°€í•¨ì— ë”°ë¼ íƒ€ê²Ÿ ê°’ë„ ì¦ê°€í•œë‹¤. ì¦‰, featureê°’ì˜ ì¦ê°€í•¨ì— ë”°ë¼ ëŒ€ì¶œì„ ìƒí™˜ í•˜ì§€ ëª»í•\xa0 ê²ƒì´ë‹¤ ë¼ëŠ” í™•ë¥\xa0ì´ ë†’ì•„ì§€ëŠ” ê²½ìš°ë‹¤.', '# ', ""# ê·¼ë°, ì—¬ê¸°ì„œ Correlationí•œ ê²°ê³¼ DAYS_BIRTH í•\xadëª©ì´ Positive ìˆ˜ì¹˜ê°€ ê°€ìž¥ ë†’ì€ë°, ì‚¬ì‹¤ 'DAYS_BIRTH'ëŠ” ìŒìˆ˜ë¥¼ ê°€ì§€ëŠ” í•\xadëª©ì´ë©°, ìŒìˆ˜ê°€ ì»¤ì§ˆìˆ˜ë¡ ëŒ€ì¶œ ë‹¹ì‹œ ê³\xa0ê° ì—°ë\xa0¹ì´ ë§Žì€ ì‚¬ëžŒ ì´ë¼ëŠ” ì˜ë¯¸ë¥¼ ë‚˜íƒ€ë‚¸ë‹¤."", '# ', '# í•˜ì§€ë§Œ ìŒìˆ˜, ì–‘ìˆ˜ë¥¼ ëª¨ë‘ ê³\xa0ë\xa0¤í•˜ì—¬ ì¦ê°€í•˜ëŠ” ë°©í–¥ìœ¼ë¡œ ê³„ì‚°í–ˆë‹¤ë©´ 0ì— ê°€ê¹Œìš´ ìˆ˜, ì¦‰ ì\xa0ˆëŒ€ê°’ì´ ìž‘ì€ ìˆ˜ë¡œ ê°ˆìˆ˜ë¡ TARGET ê°’ì´ 1ì— ê°€ê¹Œì›Œì§„ë‹¤ëŠ” ê²ƒì„ ì˜ë¯¸í•˜ë¯€ë¡œ, ëŒ€ì¶œ ë‹¹ì‹œ ê³\xa0ê°ì˜ ì—°ë\xa0¹ì´ ì–´ë¦° ê³\xa0ê°ì¼ìˆ˜ë¡ ìƒí™˜í•˜ì§€ ëª»í•˜ëŠ” í™•ë¥\xa0ì´ ë†’ì•„ì§„ë‹¤ëŠ” íŒë‹¨ì„ í•\xa0 ìˆ˜ìžˆë‹¤. ', '# ', '# ì´ ë‚´ìš©ì„ ì\xa0ˆëŒ€ì¹˜? ë¥¼ í†µí•´ì„œ ë‹¤ì‹œ í™•ì¸í•´ ë³´ë©´, ìŒì˜ ìƒê´€ê´€ê³„ê°€ ë‚˜ì˜¬ ìˆ˜ ìžˆì„ ê²ƒì´ë‹¤~ ì¦‰, ë‚˜ì´ê°€ ë§Žì€ ê³\xa0ê°ì¼ ìˆ˜ë¡ ìƒí™˜ ê°€ëŠ¥í•œ í™•ë¥\xa0ì´ ë†’ì•„ì§ˆ ê²ƒì´ë‹¤ ë¼ëŠ” ìƒê´€ê´€ê³„ë¥¼ ì§€ê¸ˆë¶€í„° í™•ì¸í•˜ëŠ”ë“¯!', '# ### Effect of Age on Repayment', '# In[42]:', '# Find the correlation of the positive days since birth and target', '# ì˜ˆìƒí•œ ë°”ì™€ ê°™ì´, ìŒìˆ˜ì˜ ìƒê´€ê´€ê³„ê°€ ë‚˜ì™”ë‹¤.', '# ', '# ì¦‰, ê³\xa0ê° ë‚˜ì´ê°€ ë§Žì„ ìˆ˜ë¡, íƒ€ê²Ÿì€ 0ì— ê°€ê¹Œì›Œ ì§€ëŠ” ì„\xa0í˜•ê´€ê³„ë¥¼ ê°€ì§ì„ ì•Œ ìˆ˜ ìžˆë‹¤. ê·¸ë¦¬ê³\xa0, ê·¸ ë§ì€ ë‚˜ì´ê°€ ë§Žì„ ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜ì„ ì\xa0œë•Œ í•\xa0 í™•ë¥\xa0ì´ ë†’ì•„ì§„ë‹¤ëŠ” ê²ƒì„ ì˜ë¯¸í•œë‹¤.', '# ', '# ì´ì\xa0œ, ê³\xa0ê°ì˜ ë‚˜ì´ ë¶„í¬ì— ëŒ€í•´ ì‹œê°í™” í•˜ì—¬ ížˆìŠ¤í†\xa0ê·¸ëž¨ìœ¼ë¡œ í”Œëží•´ë³´ìž.', '# In[43]:', '# In[44]:', '# Set the style of plots', '# Plot the distribution of ages in years', ""plt.hist(app_train['DAYS_BIRTH'] / 365, edgecolor = 'k', bins=25) # bins ì˜µì…˜ì€ ëª‡ê°œì˜ ë§‰ëŒ€ë¡œ í‘œí˜„í•\xa0ì§€ ì\xa0•í•´ì¤Œ"", '# > By itself, the distribution of age does not tell us much other than that there are no outliers as all the ages are reasonable. To visualize the effect of the age on the target, we will next make a kernel density estimation plot (KDE) colored by the value of the target. A kernel density estimate plot shows the distribution of a single variable and can be thought of as a smoothed histogram (it is created by computing a kernel, usually a Gaussian, at each data point and then averaging all the individual kernels to develop a single smooth curve). We will use the seaborn kdeplot for this graph.', '# ', '# ì´ ìžì²´ë¡œëŠ”, ì•„ì›ƒë¼ì´ì–´ê°€ ì—†ë‹¤ëŠ”ê²ƒ ì´ìƒìœ¼ë¡œ ë¬´ì–¸ê°€ ë§í•´ì¤„ìˆ˜ëŠ” ì—†ìœ¼ë©°, ê·¸ëž˜í”„ ë¶„í¬ëŠ” ì´ìƒì\xa0ì¸ê±° ê°™ë‹¤.', '# ', '# ì´ì\xa0œ ê³\xa0ê° ë‚˜ì´ì— ë”°ë¥¸ íƒ€ê²Ÿì˜ ì˜í–¥ì\xa0•ë„ë¥¼ í™•ì¸í•˜ê¸° ìœ„í•´, KDEë¥¼ ì‚¬ìš©í•´ì„œ íƒ€ê²Ÿì˜ ì˜í–¥ë„ë¥¼ ì‹œê°í™” í•´ë³¸ë‹¤.', '# ', '# ì´ ê³¼ì\xa0•ì—ì„œ seabornì˜ `kdeplot` ë©”ì†Œë“œë¥¼ í™œìš©í•œë‹¤.', '# In[45]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', ""# > The target == 1 curve skews towards the younger end of the range. Although this is not a significant correlation (-0.07 correlation coefficient), this variable is likely going to be useful in a machine learning model because it does affect the target. Let's look at this relationship in another way: average failure to repay loans by age bracket."", '# To make this graph, first we cut the age category into bins of 5 years each. Then, for each bin, we calculate the average value of the target, which tells us the ratio of loans that were not repaid in each age category.', '# ', '# target == 1 ê·¸ëž˜í”„ëŠ” í™•ì‹¤ížˆ ë‚˜ì´ê°€ ì–´ë¦° ìª½ìœ¼ë¡œ ë” ë¾°ì¡±í•œ ë¶€ë¶„ì´ ì\xa0ë\xa0¤ìžˆë‹¤.', '# ', '# í•˜ì§€ë§Œ ê·¸ë\xa0‡ê²Œ í° ìƒê´€ê³„ìˆ˜(-0.07)ëŠ” ì•„ë‹ˆë‹¤. ê·¸ëž˜ë„ ë¨¸ì‹\xa0ëŸ¬ë‹ì— ì‚¬ìš©í•˜ê¸°ì—ëŠ” ìœ\xa0ìš©í•˜ë‹¤ê³\xa0 ìƒê° ëœë‹¤.', '# ', '# ì¡°ê¸ˆ ë‹¤ë¥¸ ë°©ë²•ìœ¼ë¡œ ê´€ê³„ë¥¼ ì‚´íŽ´ë³¼ë\xa0¤ê³\xa0 í•œë‹¤. average failure to repay loans by age bracket. ì¦‰ ë‚˜ì´ë¥¼ ë²„ì¼“ì— ë‹´ì•„ì„œ ì¡°ê°ì¡°ê° ë‚˜ëˆ\xa0ì„œ ë³´ê²Ÿë‹¤ëŠ” ëœ».', '# ', '# ì¦‰, 5ì‚´ ë‹¨ìœ„ë¡œ ë‚˜ì´ ë¶„í¬ë¥¼ ë‚˜ëˆ\xa0ì„œ ê° ë²„ì¼“ë³„ë¡œ íƒ€ê²Ÿì˜ í‰ê·\xa0ê°’ì„ ì‚´íŽ´ë³¸ë‹¤. ', '# In[46]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[47]:', 'np.linspace(20,70, num=11) # ì²˜ìŒ ìˆ˜, ë ìˆ˜, ì´ ìˆ«ìž ìˆ˜=11', '# In[48]:', '# Group by the bin and calculate averages', '# í™•ì‹¤ížˆ, ë‚˜ì´ê°€ ë§Žì€ ê·¸ë£¹ì¼ìˆ˜ë¡ íƒ€ê²Ÿ í‰ê·\xa0ê°’ì´ ì\xa0ì\xa0 ìž‘ì•„ì§€ëŠ” ê²ƒì„ í™•ì¸ í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# In[49]:', '# In[50]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# >There is a clear trend: younger applicants are more likely to not repay the loan! The rate of failure to repay is above 10% for the youngest three age groups and beolow 5% for the oldest age group.', '# This is information that could be directly used by the bank: because younger clients are less likely to repay the loan, maybe they should be provided with more guidance or financial planning tips. This does not mean the bank should discriminate against younger clients, but it would be smart to take precautionary measures to help younger clients pay on time.', '# ', '# ', '# ì–´ë¦° ê³\xa0ê°ì´ ëª…ë°±í•˜ê²Œ ìƒí™˜í•˜ì§€ ëª»í•\xa0 í™•ë¥\xa0ì´ í¬ë‹¤ëŠ” ê²ƒì„ ë³´ì—¬ì£¼ê³\xa0 ìžˆë‹¤.', '# ', '# ê·¸ëž˜ì„œ ì€í–‰ì—ì„œëŠ” ì–´ë¦° ê³\xa0ê°ì—ê²Œ ë¡\xa0ì— ëŒ€í•œ ì‹\xa0ì²\xad ë“±ì´ ìžˆìœ¼ë©´, ì£¼ì˜ì‚¬í•\xadì´ë‚˜ ì•ˆë‚´ë¥¼ ë” ìž˜ í•´ì•¼ ë\xa0 ê²ƒì´ë¼ê³\xa0 ë§í•˜ê³\xa0 ìžˆë„¤. ë§žëŠ” ë“¯.', '# ### Exterior Sources', '# ', '# íƒ€ê²Ÿê³¼ ìŒì˜ ê´€ê³„ë¥¼ ê°–ëŠ” í•\xadëª©ì¤‘ì— ê°€ìž¥ ë†’ì€ ìˆ˜ì¹˜ë¥¼ ë³´ì´ëŠ” í•\xadëª©ì— ëŒ€í•´ì„œ ì‚´íŽ´ë³¸ë‹¤.', '# ', '# EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ìš”ë\xa0‡ê²Œ ì„¸ê°\xa0ë° ë„íë¨¼íŠ¸ ì„¤ëª…ì— ì˜í•˜ë©´,', '# ', '# ì´ í•\xadëª©ë“¤ì€ ì™¸ë¶€ìš”ì¸ì— ì˜í•´ ì¼ë°˜í™”ëœ ë°ì´í„° ì†ŒìŠ¤ë¼ê³\xa0 í•¨. ë\xad”ì§€ëŠ” ìž˜ ëª¨ë¥´ê²\xa0ì§€ë§Œ ëˆ„ì\xa0ëœ ì‹\xa0ìš©ì\xa0•ë³´? ì\xa0•ë„ë¡œ ì´í•´í•˜ë©´ ë\xa0 ê²ƒ ê°™ë‹¤.', '# ', '# ë¨¼ì\xa0€, ì´ëŸ° í•\xadëª©ë“¤ê³¼ íƒ€ê²Ÿê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì°¾ì•„ë³´ìž!', '# In[51]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[52]:', '# Heatmap of correlations', '# EXT ë³€ìˆ˜ë“¤ì€ íƒ€ê²Ÿê³¼ ìŒì˜ ìƒê´€ê´€ê³„ë¥¼ ê°–ëŠ” ê²ƒì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆìœ¼ë©°, EXT ë³€ìˆ˜ê°’ì´ ì¦ê°€í•˜ë©´, ê³\xa0ê°ë“¤ì´ ëŒ€ì¶œìƒí™˜ í•\xa0 í™•ë¥\xa0ì´ ë†’ìŒì„ ì˜ë¯¸í•œë‹¤.', '# ', '# ë˜í•œ, EXT 1 ë³€ìˆ˜ì™€ DAYS_BIRTHê°€ ì–‘ì˜ ìƒê´€ê´€ê³„ë¥¼ ê°€ì§€ê³\xa0 ìžˆëŠ” ê²ƒì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ì´ê²ƒì€, EXT 1 ë³€ìˆ˜ê°€ ë‚˜ì´ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì–´ë–¤ ìŠ¤ì½”ì–´ ì¼ ê²ƒìœ¼ë¡œ ì¶”ì\xa0•ëœë‹¤.', '# ', '# ì´ì\xa0œ ì´ ë³€ìˆ˜ë“¤ê³¼ íƒ€ê²Ÿê°„ì˜ ë¶„í¬ë¥¼ ì‹œê°í™” í•´ì„œ ì‚´íŽ´ ë³¸ë‹¤.', '# ', '# In[53]:', '# iterate through the sources', '    # create a new subplot for each source', '    plt.subplot(3,1,i+1) # 3 í–‰ 1ì—´ ëª¨ì–‘ìœ¼ë¡œ ìž¡ê³\xa0, ê° ìˆœì„œëŒ€ë¡œ í”Œëž í•¨', '    # plot repaid loans', '    # plot loans that were not repaid', '# EXT_SOURCE_3ì€ íƒ€ê²Ÿì— ë”°ë¥¸ ë¶„í¬ê°€ í˜„ì\xa0€í•˜ê²Œ ë‹¤ë¥¸ ê²ƒì„ ë³¼ ìˆ˜ ìžˆìœ¼ë©°, ì´ëŸ° í•\xadëª©ë“¤ì€ ëŒ€ì¶œìƒí™˜ ê°€ëŠ¥ì„±ê³¼ì˜ ìƒê´€ê´€ê³„ë¥¼ ê°€ì§€ê³\xa0 ìžˆë‹¤ê³\xa0 í™•ì‹¤ížˆ íŒë‹¨í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# ê·¼ë°, ì‚¬ì‹¤ ì´ì\xa0•ë„ ìˆ˜ì¹˜ëŠ” ìƒê´€ê´€ê³„ ìˆ˜ì¹˜ê°€ ì•½í•œ ê±°ë¼ê³\xa0 í•œë‹¤.', '# ê·¸ëž˜ë„ ë¨¸ì‹\xa0ëŸ¬ë‹ì— ì‚¬ìš©í•˜ëŠ”ë° ìžˆì–´ì„œëŠ” ìœ\xa0ìš©í•œ ì\xa0•ë³´ì´ê¸° ë•Œë¬¸ì— ì‚¬ìš©í•\xa0 ìˆ˜ë„ ìžˆì„ ê²ƒ ê°™ë‹¤.', '# ### Pairs Plot', '# >As a final exploratory plot, we can make a pairs plot of the EXT_SOURCE variables and the DAYS_BIRTH variable. The Pairs Plot is a great exploration tool because it lets us see relationships between multiple pairs of variables as well as distributions of single variables. Here we are using the seaborn visualization library and the PairGrid function to create a Pairs Plot with scatterplots on the upper triangle, histograms on the diagonal, and 2D kernel density plots and correlation coefficients on the lower triangle.', ""# If you don't understand this code, that's all right! Plotting in Python can be overly complex, and for anything beyond the simplest graphs, I usually find an existing implementation and adapt the code (don't repeat yourself)!"", '# ë§ˆì§€ë§‰ í”Œëž ê²€í†\xa0ë¡œ, pairs plot ì´ëž€ ê²ƒì„ ì\xa0ìš©í•´ë³¼ê±°ë‹¤. ì¦‰, EXT_SOURCE - DAYS_BIRTH ë³€ìˆ˜ê°„ì˜ ì–´ë–¤ ê´€ê³„ë¥¼ ì‹œê°í™” í•´ì„œ ë³´ê²Œ ë\xa0 ê²ƒì´ë‹¤. ', '# ', '# Pairs Plotì€ í•œê°€ì§€ ë³€ìˆ˜ì— ëŒ€í•œ ë¶„í¬ ë¿ë§Œ ì•„ë‹ˆë¼, ì—¬ëŸ¬ê°€ì§€ ë©€í‹° variables ê°„ì˜ ê´€ê³„ë¥¼ í™•ì¸í•˜ëŠ” ê²ƒë„ ê°€ëŠ¥í•˜ê²Œ í•´ì¤€ë‹¤.', '# ', '# seabornì˜ ì‹œê°í™” ë¼ì´ë¸ŒëŸ¬ë¦¬ì™€ `PairGrid` í•¨ìˆ˜ë¥¼ ì´ìš©í•´ì„œ í”Œëž ëª‡ê°œë¥¼ ê·¸ë\xa0¤ë³¼ ê²ƒì´ë‹¤.', '# ', '# ìžì„¸í•œ ì„¤ëª…ì€ ìœ„ì˜ ì›ë¬¸ ì°¸ì¡°!', '# ', '# In[54]:', '# Copy the ext_data for plotting', '# In[55]:', '# In[56]:', '# ë°ì´í„° ì»¬ëŸ¼ í™•ì¸!', '# In[57]:', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# In[58]:', '# ì\xa0„ì²´ ë°ì´í„° ìˆ˜ ê°€ 3ë¶„ì˜ 1ë¡œ ì¤„ì—ˆìŒ.', '# In[59]:', '# Function to calculate correlation coeffiecient between two columns', '# In[60]:', '# Create the pairgrid object', '# í”Œëží•\xa0 ëŒ€ìƒì„ ì´ ì˜¤ë¸Œì\xa0íŠ¸ì—ì„œ ì\xa0•ì˜í•˜ê³\xa0, íŽ˜ì–´ í”Œëžì—ì„œ ëŒ€ê°ì„\xa0 , ëŒ€ê°ì„\xa0 ìœ„/ì•„ëž˜ ë°©í–¥ìœ¼ë¡œ ì›í•˜ëŠ” í”Œëžì„ ë„£ì–´ì¤Œ', '# ì—¬ê¸° ê¹Œì§€ í•˜ë©´ ê·¸ëž˜í”„ë¥¼ ê·¸ë¦´ ìˆ˜ ìžˆëŠ” ìžë¦¬ë§Œ ë‚˜ì˜´!', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# >In this plot, the red indicates loans that were not repaid and the blue are loans that are paid. We can see the different relationships within the data. There does appear to be a moderate positive linear relationship between the EXT_SOURCE_1 and the DAYS_BIRTH (or equivalently YEARS_BIRTH), indicating that this feature may take into account the age of the client.', '# ', '# ', '# ë¹¨ê°„ìƒ‰ì€ ëŒ€ì¶œìƒí™˜ x, íŒŒëž€ìƒ‰ì€ ëŒ€ì¶œìƒí™© oì„ ì˜ë¯¸í•œë‹¤.', '# ', '# EXT_SOURCE_1 , YEARS_BIRTHëŠ” ì„\xa0í˜•ì\xa0ì¸ ê´€ê³„ë¥¼ ê°€ì§„ë‹¤ê³\xa0 ë³¼ ìˆ˜ ìžˆìœ¼ë©°, ì—\xadì‹œë‚˜ ë‚˜ì´ê°€ ë§Žì•„ì§ì— ë”°ë¼ íŒŒëž€ìƒ‰ ì\xa0ì´ ë§Žì•„ì§€ëŠ” ê²ƒì„ ì•Œìˆ˜ ìžˆë‹¤.', '# ## Feature Engineering', '# >Kaggle competitions are won by feature engineering: those win are those who can create the most useful features out of the data. (This is true for the most part as the winning models, at least for structured data, all tend to be variants on gradient boosting). This represents one of the patterns in machine learning: feature engineering has a greater return on investment than model building and hyperparameter tuning. This is a great article on the subject). As Andrew Ng is fond of saying: ""applied machine learning is basically feature engineering.""', '# ', '# ëª¨ë¸ ë¹Œë”©í•˜ê³\xa0, í•˜ì´í¼íŒŒë¼ë¯¸í„° íŠœë‹í•˜ëŠ” ê²ƒë³´ë‹¤ ê²°êµ\xadì€ feature engineeringì„ ì–´ë–»ê²Œ í•˜ëŠ”ì§€ê°€ ë” ì¤‘ìš”í•˜ê³\xa0, ì»´íŽ˜í‹°ì…˜ ê²°ê³¼ì— í° ì˜í–¥ì„ ë¯¸ì¹œë‹¤!', '# ', '# >While choosing the right model and optimal settings are important, the model can only learn from the data it is given. Making sure this data is as relevant to the task as possible is the job of the data scientist (and maybe some automated tools to help us out).', '# ', '# ë°˜ë©´ì— ì¢‹ì€ëª¨ë¸ì„ ìž˜ ì„\xa0íƒí•˜ê³\xa0 ì…‹íŒ…ì„ ìµœì\xa0í™” í•˜ëŠ”ê²ƒë„ ì¤‘ìš”í•˜ë‹¤. ëª¨ë¸ì€ ì£¼ì–´ì§€ëŠ” ë°ì´í„°ë§Œ ê°€ì§€ê³\xa0 í•™ìŠµì„ í•\xa0 ìˆ˜ ìžˆê¸° ë•Œë¬¸.', '# ', '# >Feature engineering refers to a geneal process and can involve both feature construction: adding new features from the existing data, and feature selection: choosing only the most important features or other methods of dimensionality reduction. There are many techniques we can use to both create features and select features.', '# ', '# feature engineeringì€ ì¼ë°˜ì\xa0ì¸ ê³¼ì\xa0•ì´ë©°, `feature construction`, `feature selection` ë‘ê°€ì§€ ê³¼ì\xa0•ì„ ëª¨ë‘ í¬í•¨í•œë‹¤.', '# ', '# * feature construction: adding new features from the existing data', '# * feature selection: choosing only the most important features or other methods of dimensionality reduction.', '# ', '# ', '# ë§Žì€ feature engineering ë°©ë²•ì´ ìžˆì§€ë§Œ ì´ ì»¤ë„ì—ì„œëŠ” ë‹¤ìŒì˜ ê°„ë‹¨í•œ feature construction ê³¼ì\xa0•ë§Œ í•´ë³¸ë‹¤.', '# * Polynomial features', '# * Domain knowledge features', '# ', '# ', '# ', '# ', '# ', '# ', '# ', '# ', '# ### Polynomial Features', '# > One simple feature construction method is called polynomial features. In this method, we make features that are powers of existing features as well as interaction terms between existing features. For example, we can create variables EXT_SOURCE_1^2 and EXT_SOURCE_2^2 and also variables such as EXT_SOURCE_1 x EXT_SOURCE_2, EXT_SOURCE_1 x EXT_SOURCE_2^2, EXT_SOURCE_1^2 x EXT_SOURCE_2^2, and so on. These features that are a combination of multiple individual variables are called interaction terms because they capture the interactions between variables. In other words, while two variables by themselves may not have a strong influence on the target, combining them together into a single interaction variable might show a relationship with the target. Interaction terms are commonly used in statistical models to capture the effects of multiple variables, but I do not see them used as often in machine learning. Nonetheless, we can try out a few to see if they might help our model to predict whether or not a client will repay a loan.', '# Jake VanderPlas writes about polynomial features in his excellent book Python for Data Science for those who want more information.', '# In the following code, we create polynomial features using the EXT_SOURCE variables and the DAYS_BIRTH variable. Scikit-Learn has a useful class called PolynomialFeatures that creates the polynomials and the interaction terms up to a specified degree. We can use a degree of 3 to see the results (when we are creating polynomial features, we want to avoid using too high of a degree, both because the number of features scales exponentially with the degree, and because we can run into problems with overfitting).', '# ', '# ê°„ë‹¨í•˜ê²Œ ë§í•´ì„œ, ì´ê±´ ê¸°ì¡´ì˜ ì¡´ìž¬í•œ ë³€ìˆ˜ì— ëŒ€í•´ì„œ, ì„œë¡œ ê³±í•˜ê±°ë‚˜ ì\xa0œê³±ì„ í•˜ê±°ë‚˜, ì\xa0œê³±í•œê²ƒì— ëŒ€í•´ì„œ ì„œë¡œ ê³±í•˜ê±°ë‚˜ í•´ì„œ ìƒˆë¡œìš´ ë³€ìˆ˜ë¥¼ ìƒì„±í•˜ëŠ” ë°©ì‹ì´ë‹¤.', '# ', '# ê°œê°œì˜ ë³€ìˆ˜ë“¤ì´ íƒ€ê²Ÿê³¼ì˜ ê´€ë\xa0¨ì´ ì—†ì—ˆë” í•˜ë”ë¼ê³\xa0 ì´ëŸ°ê³¼ì\xa0•ì„ í†µí•´ì„œ ê³±í•´ì§„ ìƒˆë¡œìš´ ë³€ìˆ˜ê°€ íƒ€ê²Ÿê³¼ì˜ ê´€ê³„ì„±ì„ ë³´ì—¬ì£¼ëŠ” ê²½ìš°ê°€ ìžˆìœ¼ë¯€ë¡œ, ì´ë¥¼ ì´ìš©í•˜ë\xa0¤ê³\xa0 í•œë‹¤. Scikit-Learnì˜ í´ëž˜ìŠ¤ PolynomialFeaturesë¥¼ ì´ìš©í•¨!', '# ', '# ì—¬ê¸°ì„œ ìš°ë¦¬ëŠ” 3ì°¨ì› ê¹Œì§€ë§Œ degree ì\xa0•ë„? ë¥¼ ë¶€ì—¬í•˜ê¸°ë¡œ í•œë‹¤. ì°¨ì›ìˆ˜ê°€ ë„ˆë¬´ ë†’ì•„ì§€ë©´ ë„ˆë¬´ ë³µìž¡í•´ì§ˆìˆ˜ë„ ìžˆê³\xa0, [ì˜¤ë²„í”¼íŒ…](https://scikit-learn.org/stable/auto_examples/model_selection/plot_underfitting_overfitting.html#sphx-glr-auto-examples-model-selection-plot-underfitting-overfitting-py)ì´ ë˜ëŠ” ë¬¸ì\xa0œë¡œ ë¹\xa0ì§ˆìˆ˜ë„ ìžˆê¸° ë•Œë¬¸ì´ë‹¤.', '# ', '# ì‚¬ìš©í•\xa0 ë³€ìˆ˜ëŠ”, EXT_SOURCE ë³€ìˆ˜ 3ê°œì™€ DAYS_BIRTH ë³€ìˆ˜ ì´ë\xa0‡ê²Œ 4ê°œê°€ ë˜ê²\xa0ë‹¤.', '# In[61]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# In[62]:', '# Need to impute missing values', '# In[63]:', '# ì›ëž˜ NaN ì´ì˜€ë˜ ë°ì´í„° ë“¤ì´ ê¸°ì¡´ì— ìžˆëŠ” ë°ì´í„°ë¥¼ ì´ìš©í•´ì„œ ì±„ì›Œ ì§„ ê²ƒì„ í™•ì¸ í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ', '# í›ˆë\xa0¨ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ë‘˜ë‹¤ ë°ì´í„° í”„ë\xa0ˆìž„ì—ì„œ, ndarray í˜•íƒœë¡œ ë°ì´í„° íƒ€ìž…ì´ ë³€í–ˆë‹¤.', '# In[64]:', '# Create the polynomial object with specified degree', '# In[65]:', '# Train the polynomial features', '# Transform the features', '# poly_features ì»¬ëŸ¼ ìˆ˜ëŠ” ì›ëž˜ EXT ë³€ìˆ˜ 3ê°œì™€ DAYS_BIRTH ì´ë\xa0‡ê²Œ 4ê°œ ì˜€ëŠ”ë° 35ê°œ ê¹Œì§€ ëŠ˜ì–´ë‚¬ë‹¤.', '# ', '# ìƒˆë¡œ ìƒê¸´ polynomial ë³€ìˆ˜ì˜ ì´ë¦„ì„ ê°€ì\xa0¸ì˜¤ê¸° ìœ„í•´ `get_feature_names`ë©”ì†Œë“œë¥¼ ì´ìš©í•œë‹¤.', '# In[66]:', '# 35ê°œ ë³€ìˆ˜ ëª¨ë‘ ì¶œë\xa0¥í•¨', '# ìµœê³\xa0 3ìŠ¹ê¹Œì§€ ì\xa0œê³±í•˜ì—¬ ë³€ìˆ˜ë¥¼ ë§Œë“¤ê³\xa0, ì„œë¡œ ê³±í•˜ëŠ” í•\xadê¹Œì§€ ëª¨ë‘ ë§Œë“¤ì–´ ëƒˆë‹¤.', '# ', '# ì´ì\xa0œ, ì´ëŸ° ë³€ìˆ˜ë“¤ì´ íƒ€ê²Ÿ ë³€ìˆ˜ì™€ ì–´ë–¤ ê´€ê³„ê°€ ìžˆëŠ”ì§€ í™•ì¸í•œë‹¤.', '# In[67]:', '# Create a dataframe of the features', '# Add in the target', '# íƒ€ê²Ÿê°’ì€ ì›ëž˜ ì´ ë°ì´í„°í”„ë\xa0ˆìž„ì— ìžˆì—ˆëŠ”ë°, polynomial feature ë§Œë“œëŠë¼ê³\xa0, ë“œëžì‹œí‚¤ê³\xa0, ë”°ë¡œ ìƒˆë¡œìš´ ë³€ìˆ˜ì— ì\xa0€ìž¥ì¤‘ì´ì˜€ë‹¤.', '# ê·¸ ê°’ì„ ë‹¤ì‹œ ê·¸ëŒ€ë¡œ ê°€ì\xa0¸ì˜¨ë‹¤.', '# In[68]:', '# In[69]:', '# Find the correlations with the target', '# Display most negative and most positive', '# ëª‡ëª‡ ìƒˆë¡œìš´ ë³€ìˆ˜ë“¤ì€ ë…ë¦½ëœ í•˜ë‚˜ì˜ ë³€ìˆ˜ë¡œì¨ ìƒê´€ê´€ê³„ë³´ë‹¤ ë” ë†’ì€ ìˆ˜ì¹˜ë¥¼ ë³´ì—¬ì£¼ê³\xa0 ìžˆë‹¤.', '# ', '# ìš°ë¦¬ëŠ”, ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì„ ë¹Œë“œí•\xa0ë•Œ ìœ\xa0ìš©í•œì§€ ì—¬ë¶€ì— ë”°ë¼ ì´ëŸ° ë³€ìˆ˜ë“¤ì„ í¬í•¨ ë˜ëŠ” í¬í•¨ì‹œí‚¤ì§€ ì•Šì„ ìˆ˜ë„ ìžˆë‹¤.', '# ', '# ì´ì\xa0œ, ëª¨ë¸ì„ í‰ê°€í•\xa0ë•Œ ì´ëŸ° featureë¥¼ í¬í•¨ ì‹œí‚¨ ë°ì´í„°ì™€ ê·¸ë\xa0‡ì§€ ì•Šì€ ë°ì´í„°ë¥¼ ëª¨ë¸ì— í”¼ë“œí•´ì„œ ê²°ê³¼ê°€ ì–´ë–¤ì§€ í™•ì¸í•\xa0 ê±°ë‹¤.', '# ', '# ë¨¸ì‹\xa0ëŸ¬ë‹ì€ ì—¬ëŸ¬ë²ˆ í•´ë´ì•¼ í•¨. Try!', '# In[70]:', '# Put test features into dataframe', '# In[71]:', '# In[72]:', '# In[73]:', '# Merge polynomial featueres into training dataframe', '# Merge polynomial features into testing dataframe', '# In[74]:', '# Align the dataframes', '# Print out the new shapes', '# align ê³¼ì\xa0•ì—ì„œ joinì„ `inner`ë¡œ í•´ì„œ, ë°ì´í„° ì°¨ì›ì´ ìž‘ì€ ë°©í–¥ìœ¼ë¡œ ì–¼ë¼ì¸ ë˜ê³\xa0,  app_train_polyì˜ TARGET ì»¬ëŸ¼ì´ ì‚¬ë¼ì§€ì§€ ì•Šì•˜ì„ê¹Œ í•´ì„œ ì•„ëž˜ì™€ ê°™ì´ í™•ì¸! , ë¨¸ì§€ í•˜ë©´ì„œ ì´ë¦„ì´ ë°”ë€ê±´ì§€ ì•ˆë³´ì¸ë‹¤. polynomial ë³€ìˆ˜ë“¤ë„ 1ì°¨ì› ë³€ìˆ˜ë“¤ì˜ ì´ë¦„ì´ ë°”ë€ê±´ì§€ ì•ˆë³´ìž„', '# In[75]:', '# DAYS_BIRTH_x,DAYS_BIRTH_y ë¡œ ë³€í•¨.', '# ', '# EXT_SOURCE_1_x', '# ', '# EXT_SOURCE_2_x', '# ', '# EXT_SOURCE_3_x', '# ', '# ë‚˜ë¨¸ì§€ ê²ƒë„ yí•\xadë„ ìƒê²¼ìŒ', '# ', '# ', '# ### Domain Knowledge Features', '# ', '# >Maybe it\'s not entirely correct to call this ""domain knowledge"" because I\'m not a credit expert, but perhaps we could call this ""attempts at applying limited financial knowledge"". In this frame of mind, we can make a couple features that attempt to capture what we think may be important for telling whether a client will default on a loan. Here I\'m going to use five features that were inspired by [this script](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) by Aguiar:', ""# >* CREDIT_INCOME_PERCENT: the percentage of the credit amount relative to a client's income"", ""# * ANNUITY_INCOME_PERCENT: the percentage of the loan annuity relative to a client's income"", '# * CREDIT_TERM: the length of the payment in months (since the annuity is the monthly amount due', ""# * DAYS_EMPLOYED_PERCENT: the percentage of the days employed relative to the client's age"", '# ', '# >Again, thanks to Aguiar and [his great script](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) for exploring these features.', '# ', '# ', '# In[76]:', '# ìƒˆë¡œìš´ ì»¬ëŸ¼ì„ ë§Œë“œëŠ” ê³¼ì\xa0•, ê¸°ì¡´ì— ìžˆì—ˆë˜ ì»¬ëŸ¼ë“¤ì„ ì¡°í•©í•´ì„œ ìœ\xa0ìš©í•œ ì\xa0•ë³´ë¥¼ ê°€ì§€ëŠ” í…€ë“¤ì„ ìƒì„±', '# annuity : ì—°ê¸ˆ', '# In[77]:', '# In[78]:', '# In[79]:', '# ### Visualize New Variables', '# ', '# ì‹œê°í™” í•´ì„œ ìœ„ì—ì„œ ë§Œë“\xa0 domain knowledgeë³€ìˆ˜ë“¤ì„ í”Œëží•´ë³¸ë‹¤.', '# ', '# ëª¨ë“\xa0 ë³€ìˆ˜ì— ëŒ€í•´ì„œ, TARGETê°’ì„ [KDE(kernel density estimation plot) plot](https://en.wikipedia.org/wiki/Kernel_density_estimation)ìœ¼ë¡œ í‘œí˜„í•\xa0 ê±°ë‹¤.', '# In[80]:', '# iterate through the new features', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# í™•ì‹¤ížˆ ì´ ë°ì´í„°ê°€ ìœ\xa0ìš©í•œì§€ëŠ” ë§í•˜ê¸° ì–´ë\xa0µë‹¤ê³\xa0 í•¨. ì§ì\xa0‘ ëª¨ë¸ì— ì‚¬ìš©í•´ ë´ì•¼ ì•Œìˆ˜ ìžˆëŠ” ë“¯.', '# ## Baseline', '# >For a naive baseline, we could guess the same value for all examples on the testing set. We are asked to predict the probability of not repaying the loan, so if we are entirely unsure, we would guess 0.5 for all observations on the test set. This will get us a Reciever Operating Characteristic Area Under the Curve (AUC ROC) of 0.5 in the competition (random guessing on a classification task will score a 0.5).', ""# Since we already know what score we are going to get, we don't really need to make a naive baseline guess. Let's use a slightly more sophisticated model for our actual baseline: Logistic Regression."", '# ### Logistic Regression Implementation', '# >Here I will focus on implementing the model rather than explaining the details, but for those who want to learn more about the theory of machine learning algorithms, I recommend both [An Introduction to Statistical Learning and Hands-On Machine Learning with Scikit-Learn and TensorFlow. Both of these books present the theory and also the code needed to make the models (in R and Python respectively). They both teach with the mindset that the best way to learn is by doing, and they are very effective!', '# To get a baseline, we will use all of the features after encoding the categorical variables. We will preprocess the data by filling in the missing values (imputation) and normalizing the range of the features (feature scaling). The following code performs both of these preprocessing steps.', '# ', '# ì´ì\xa0œ ëª¨ë¸ êµ¬ì„±ì— ëŒ€í•´ì„œ êµ¬ì²´ì\xa0ìœ¼ë¡œ ë°°ì›Œ ë³¼ ê±°ê³\xa0,', '# ', '# ë°ì´í„°ë¥¼ ì\xa0„ì²˜ë¦¬í•˜ëŠ” ê³¼ì\xa0•ì— ëŒ€í•´ì„œë„ í•´ë³¼ê±°ë‹¤. ì¦‰, missing valueë¥¼ ì±„ìš°ê±°ë‚˜, ë°ì´í„°ë¥¼ ì\xa0•ê·œí™” í•˜ëŠ” ê³¼ì\xa0•ì´ ê·¸ì— í¬í•¨ëœë‹¤.', '# In[81]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# In[82]:', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# fit ê³¼ì\xa0•ì€ Imputerì˜ strategyë¥¼ `median`ìœ¼ë¡œ í–ˆê¸° ë•Œë¬¸ì—, ', '# íŠ¸ë\xa0ˆì´ë‹ ë°ì´í„°ë¥¼ ê¸°ì¤€ìœ¼ë¡œ ì¤‘ê°„ê°’? ì„ ì°¾ì•„ì„œ ê°ì²´ì— ê°€ì§€ê³\xa0 ìžˆì„ ê²ƒìœ¼ë¡œ ìœ\xa0ì¶”í•\xa0ìˆ˜? ìžˆë‹¤.', '# Transform both training and testing data', '# ì—¬ê¸°ì„œ ì™\xa0ì§€ëª¨ë¥´ê²\xa0ì§€ë§Œ í…ŒìŠ¤íŠ¸ ë°ì´í„°ëŠ” ì›ëž˜ ë°ì´í„°ë¥¼ ê·¸ëŒ€ë¡œ ì‚¬ìš©? ', '# ìœ„ì— ë¨¼ì\xa0€ ë§Œë“\xa0 test ë¼ëŠ” ê°’ë„ ì–´ì°¨í”¼ ì¹´í”¼ í•œ ê²ƒì´ê¸° ë•Œë¬¸ì— ê°’ì€ ê°™ê²\xa0ì§€ë§Œ, íŠœí†\xa0ë¦¬ì–¼ì—ì„œ í•˜ëŠ”ëŒ€ë¡œ ì¼ë‹¨ í•œë‹¤.', '# ì´ë\xa0‡ê²Œ missing valueë¥¼ ì±„ì›Œì¤€ë‹¤.', '# Repeat with the scaler(0~1)', '# >We will use LogisticRegressionfrom Scikit-Learn for our first model. The only change we will make from the default model settings is to lower the regularization parameter, C, which controls the amount of overfitting (a lower value should decrease overfitting). This will get us slightly better results than the default LogisticRegression, but it still will set a low bar for any future models.', '# Here we use the familiar Scikit-Learn modeling syntax: we first create the model, then we train the model using .fit and then we make predictions on the testing data using .predict_proba (remember that we want probabilities and not a 0 or 1).', '# ë°ì´í„° ì\xa0•ê·œí™”ë¥¼ í•˜ê²Œ ë˜ë©´ ëª¨ë¸ ì˜ˆì¸¡ì‹œ ì˜¤ë²„í”¼íŒ…ë˜ëŠ” ê²ƒì„ ê°ì†Œì‹œí‚¬ìˆ˜ ìžˆê³\xa0, í˜„ìž¬ ì´ ìž‘ì—…ì—ì„œ ë°ì´í„° ì…‹ì˜ ì°¨ì´ì\xa0ì€ ì\xa0•ê·œí™” ë³€ìˆ˜ Cê°’ì´ ìž‘ì•„ì§„ ê²ƒì´ë¼ê³\xa0 í•˜ëŠ”ë°, ìž˜ ëª¨ë¥´ê²\xa0ìŒ.', '# ', '# ì¼ë‹¨ ëª¨ë¸ì„ ë§Œë“¤ì–´ì„œ fití•´ë³´ê³\xa0, ì˜ˆì¸¡ í•´ë³¸ë‹¤.', '# In[83]:', '# Make the model with the specified regularization parameter', '# Train on the training data', ""# train_labelsê°’ì€ app_train['TARGET'] ì„ í•\xa0ë‹¹í•œ ë³€ìˆ˜ìž„"", '# (X, y) í˜•íƒœë¡œ ë°ì´í„°ë¥¼ í•íŒ…í•˜ê³\xa0, í•´ë‹¹ ëª¨ë¸ì´ ì´ì§„ ë¶„ë¥˜ ë¬¸ì\xa0œë¡œ ì\xa0ìš©ë˜ê¸° ë•Œë¬¸ì—, ì˜ˆì¸¡ë˜ëŠ” ê²°ê³¼ë„ ë‘ê°€ì§€ ì¢…ë¥˜ì— ëŒ€í•´ì„œ í™•ë¥\xa0 ê°’ìœ¼ë¡œ ë°˜í™˜ëœë‹¤.', '# >Now that the model has been trained, we can use it to make predictions. We want to predict the probabilities of not paying a loan, so we use the model predict.proba method. This returns an m x 2 array where m is the number of observations. The first column is the probability of the target being 0 and the second column is the probability of the target being 1 (so for a single row, the two columns must sum to 1). We want the probability the loan is not repaid, so we will select the second column.', '# ', '# >The following code makes the predictions and selects the correct column.', '# ', '# ëª¨ë¸ì´ í›ˆë\xa0¨ì´ ë˜ì—ˆê³\xa0, ì˜ˆì¸¡ì„ í•\xa0ê±°ë‹¤.', '# ', '# ì—¬ê¸°ì„œ ì›í•˜ëŠ” ê²ƒì€ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ ëª»í•˜ëŠ” í™•ë¥\xa0ì´ë‹¤. ', '# ', '# ì˜ˆì¸¡ì„ ì§„í–‰í•˜ë©´, m x 2 í˜•íƒœë¡œ ì–´ë\xa0ˆì´ë¥¼ ë°˜í™˜í•˜ê²Œ ë˜ëŠ”ë°, mì€ ìƒ˜í”Œ ê´€ì°°ìˆ˜ì´ë©°,', '# ', '# ì²«ë²ˆì§¸ ì»¬ëŸ¼ì€ ì˜ˆì¸¡ì´ 0ì´ ë\xa0 í™•ë¥\xa0, ë‘ë²ˆì§¸ ì»¬ëŸ¼ì€ ì˜ˆì¸¡ì´ 1 ì´ ë\xa0 í™œë¥\xa0.', '# ', '# ìš°ë¦¬ëŠ”, ìƒí™˜í•˜ì§€ ëª»í•\xa0 í™•ë¥\xa0ì„ ì•Œê³\xa0 ì‹¶ê¸° ë•Œë¬¸ì— ë‘ë²ˆì§¸ ì»¬ëŸ¼ì„ ì„\xa0íƒí•œë‹¤.', '# In[84]:', '# Make predictions', '# Make sure to select the second column only', '# input ì€ í…ŒìŠ¤íŠ¸ ë°ì´í„°, ë³´ê³\xa0 ì‹¶ì€ ë°ì´í„°ëŠ” ëª¨ë“\xa0 í–‰ì— ëŒ€í•˜ì—¬ ë‘ë²ˆì§¸ ì»¬ëŸ¼ì´ë‹¤.', '# In[85]:', '# ì˜ˆì¸¡í•œ ë‚´ìš©ì´, ì\xa0œì¶œí¬ë§·ì— ë§žì§€ ì•Šê¸° ë•Œë¬¸ì—, ì\xa0œì¶œí¬ë§·ì— ë§žê²Œ ì„¤ì\xa0•í•œë‹¤. ê·¸ëž˜ì„œ, ë°ì´í„°í”„ë\xa0ˆìž„ì„ ìƒˆë¡œ ìƒì„±!', '# ', '# `sample_submission.csv`ì°¸ê³\xa0', '# In[86]:', '# Submission dataframe', '# >The predictions represent a probability between 0 and 1 that the loan will not be repaid. If we were using these predictions to classify applicants, we could set a probability threshold for determining that a loan is risky.', '# ', '# ì—¬ê¸°ì„œ í™•ë¥\xa0ì€ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•\xa0 í™•ë¥\xa0ì„ ë‚˜íƒ€ë‚´ê³\xa0, ë§Œì•½ ëŒ€ì¶œëŒ€ìƒì— ëŒ€í•´ì„œ ì´ ì˜ˆì¸¡ê²°ê³¼ë¥¼ ì‚¬ìš©í•œë‹¤ê³\xa0 í–ˆë‹¤ë©´, ëŒ€ì¶œìƒí™˜ ì—¬ë¶€ì— ëŒ€í•œ ìœ„í—˜ì\xa0•ë„ë¥¼ íŠ¹ì\xa0• ìž„ê³„ì¹˜ë¥¼ ì„¤ì\xa0•í•´ì„œ íŒë‹¨í•\xa0ìˆ˜ ìžˆì—ˆì„ ê²ƒì´ë‹¤.', '# In[87]:', '# Save the submission to a csv file.', '# >The submission has now been saved to the virtual environment in which our notebook is running. To access the submission, at the end of the notebook, we will hit the blue Commit & Run button at the upper right of the kernel. This runs the entire notebook and then lets us download any files that are created during the run.', '# Once we run the notebook, the files created are available in the Versions tab under the Output sub-tab. From here, the submission files can be submitted to the competition or downloaded. Since there are several models in this notebook, there will be multiple output files.', '# ', '# The logistic regression baseline should score around 0.671 when submitted.', '# ì¼ë‹¨ ì´ë\xa0‡ê²Œ ì»¤ë°‹í•˜ë©´, ì\xa0œì¶œì´ ëœë‹¤.', '# ', '# ì°¸ì¡°í•œ ì»¤ë„ì—ì„œëŠ” 0.671 ì\xa0ìˆ˜ë¥¼ ë°›ì•˜ë‹¤ê³\xa0 í•œë‹¤. ì´ì\xa0œ ì§ì\xa0‘ commit í•´ì„œ ëª‡ì\xa0ì´ ë‚˜ì˜¤ëŠ”ì§€ í™•ì¸!', '# ', '# * ì‹¤ì\xa0œë¡œ public ì\xa0ìˆ˜ë¡œ 0.67041ì´ ë‚˜ì˜¨ë‹¤.', '# ', '# ëª¨ë¸ì„ ê°œì„\xa0í•´ë³´ìž.', '# ', '# ### Improved Model : Random Forest', ""# >To try and beat the poor performance of our baseline, we can update the algorithm. Let's try using a Random Forest on the same training data to see how that affects performance. The Random Forest is a much more powerful model especially when we use hundreds of trees. We will use 100 trees in the random forest."", '# ', '# ê¸°ë³¸ì…‹íŒ…(LogisticRegression)ì˜ ì\xa0€ì¡°í•œ ì„±ëŠ¥ì„ ê°œì„\xa0í•´ë³´ìž, ì•Œê³\xa0ë¦¬ì¦˜ì„ ë³€ê²½í•\xa0 ê±´ë°, Random Forest ì•Œê³\xa0ë¦¬ì¦˜? ì„ ì‚¬ìš©í•´ì„œ ì„±ëŠ¥ì— ì–´ë–¤ ì˜í–¥ì´ ìžˆëŠ”ì§€ ë™ì¼í•œ ë°ì´í„°ë¥¼ ê°€ì§€ê³\xa0 í‰ê°€í•´ë³´ìž.', '# ', '# Random ForestëŠ” ì˜µì…˜ì¤‘ì— hundreds of treesë¥¼ ì‚¬ìš©í•\xa0ë•Œ ì¢‹ì€ ì„±ëŠ¥ì„ ë³´ì—¬ì¤€ë‹¤ëŠ”ë°, ì´ê±´ ëª¨ë¸ í•íŒ…í•\xa0ë•Œ ì˜µì…˜ì¤‘ì— í•˜ë‚˜ ì¼ ê²ƒ ê°™ë‹¤.', '# ', '# [RandomForestClassifier ì„¤ëª…](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)', '# In[88]:', '# ëŒ€ì¶œìƒí™˜ ê°€ëŠ¥/ë¶ˆê°€ëŠ¥ì— ëŒ€í•œ ë¶„ë¥˜ ë¬¸ì\xa0œ ì´ë¯€ë¡œ, classifierë¥¼ ì„\xa0íƒ!', '# Make random forest classifier', '# ì¼ë‹¨ ì—ìŠ¤í‹°ë©”ì´í„°? ëžœë¤í¬ë\xa0ˆìŠ¤íŠ¸ ì•Œê³\xa0ë¦¬ì¦˜ì„ ê°€ì§€ëŠ” ê°ì²´ë¥¼ ìƒì„±í•œê±°ìž„', '# In[89]:', '# Train on the training data', '# In[90]:', '# Extract feature importances', 'feature_importance_value = random_forest.feature_importances_ # np.ndarray ë°˜í™˜í•¨', '# featureë³„ë¡œ ì¤‘ìš”ë„ê°€ ì–´ëŠ ì\xa0•ë„ ë˜ëŠ”ì§€ë¥¼, íŠ¸ë\xa0ˆì´ë‹ ë°ì´í„°ë¥¼ í•íŒ…í•˜ë©´ì„œ ì•Œì•„ë‚´ì¤Œ', '# In[91]:', '# Make predictions on test data', '# In[92]:', '# Make a submission dataframe', '# In[93]:', '# Save the submission dataframe', '# ì°¸ê³\xa0 ì»¤ë„ìƒì˜ ì˜ˆì¸¡ ì\xa0ìˆ˜ëŠ” 0.678ì´ë‹¤.', '# ', '# ë‚´ ì\xa0ìˆ˜ë„ 0.67877 ì´ë\xa0‡ê²Œ ë‚˜ì™”ë‹¤. ë‹¨ì§€ ëžœë¤í¬ë\xa0ˆìŠ¤íŠ¸ë¡œ ì˜ˆì¸¡ ì•Œê³\xa0ë¦¬ì¦˜? ì„ ë°”ê¾¸ì„œ ëª¨ë¸ì„±ëŠ¥ì„ ê°œì„\xa0í•˜ëŠ”ë°ëŠ” í° íš¨ê³¼ëŠ” ì—†ëŠ” ê²ƒ ê°™ë‹¤.', '# ì´ì\xa0œ ê°€ê³µí•œ ë°ì´í„° ì…‹ì„ ëŒ€ìƒìœ¼ë¡œ ëª¨ë¸ì„ êµ¬ì„±í•´ì„œ, ëŒ€ì¶œìƒí™˜ ê°€ëŠ¥ì—¬ë¶€ë¥¼ ì˜ˆì¸¡í•´ë³¸ë‹¤.', '# ### Make Predictions using Engineered Features', '# ', '# >The only way to see if the Polynomial Features and Domain knowledge improved the model is to train a test a model on these features! We can then compare the submission performance to that for the model without these features to gauge the effect of our feature engineering.', '# ', '# Polynomial feature, Domain Knowledge featureë¥¼ ì§ì\xa0‘ ëª¨ë¸ì— í”¼ë”©í•´ì„œ ê·¸ íš¨ê³¼ê°€ ìžˆëŠ”ì§€ ì‹œí—˜í•´ë³´ìž.', '# ', '# ê²°ê³¼ëŠ”, submission ì\xa0ìˆ˜ë¥¼ ë³´ê³\xa0 ê³¼ì—° ì´ featureë“¤ì´ íš¨ê³¼ê°€ ìžˆëŠ”ì§€ íŒë‹¨í•\xa0 ìˆ˜ ìžˆì„ ê²ƒì´ë‹¤.', '# In[94]:', '# Impute the polynomial features', '# Scale the polynomial features', '# In[95]:', '# Train on the training data', '# í•íŒ…í•\xa0ë•Œ í›ˆë\xa0¨ë°ì´í„°ì˜ íƒ€ê²Ÿê°’, ì¦‰ ìƒí™˜ ì—¬ë¶€ì— ëŒ€í•œ ë\xa0ˆì´ë¸” ê°’ì€ ì–´ë–¤ í”¼ì³ë¥¼ ì‚¬ìš©í•˜ë“\xa0, ì•Œê³\xa0ë¦¬ì¦˜ì„ ì‚¬ìš©í•˜ë“\xa0 ê°™ìœ¼ë¯€ë¡œ,', '# ì—¬ê¸°ì„œë„ train_labelsì„ ì‚¬ìš©í•¨.', '# Make predictions on the test data', '# In[96]:', '# In[97]:', '# Make a submission dataframe', '# Save the submission datafrmae', '# ì°¸ë‹´í•œ ê²°ê³¼ë‹¤, public ì\xa0ìˆ˜ëŠ” 0.60 ëŒ€ ê¹Œì§€ ë–¨ì–´ì¡Œë‹¤. ì°¸ê³\xa0í•œ ì»¤ë„ì—ì„œëŠ”0.678ë¡œ ë™ë“±í•œ ìˆ˜ì¤€ì´ ë‚˜ì™”ë‹¤.', '# ', '# ë‚´ê°€ ì–´ë”˜ê°€ í‹€ë¦° ì¡°ìž‘ì„ í–ˆê±°ë‚˜, ì•„ë¬´íŠ¼ polynomial featureëŠ” í° íš¨ê³¼ê°€ ì—†ë‹¤. ì˜¤ížˆë\xa0¤ í™•ë¥\xa0 ì\xa0•í™•ë„ê°€ ë–¨ì–´ì§„ë‹¤.', '# ### Testing Domain Feature', '# ', '# ì´ì\xa0œ ì—¬ëŸ¬ ë³€ìˆ˜ë¥¼ ì¡°í•©í•´ì„œ ìƒˆë¡œìš´ í˜•íƒœì˜ featureë¥¼ ë§Œë“¤ì—ˆë˜, domain featureì— ëŒ€í•´ì„œ í…ŒìŠ¤íŠ¸ í•´ë³´ìž.', '# In[98]:', '# In[99]:', '# ìž…ë\xa0¥ë°ì´í„°ì—ì„œ íƒ€ê²Ÿ ì»¬ëŸ¼ì„ ë¶„ë¦¬í•œë‹¤.', '# ë„ë©”ì¸ í”¼ì³ ì´ë¦„ ìƒì„±, ë¦¬ìŠ¤íŠ¸', '# Impute the domain nomial features', '# Scale the domainnomial features', '# Create Random Forest object for domain features data', '# Train on the training data', '# Extract feature importances, í›„ ìž‘ì—…ì„ ìœ„í•œ ì‚¬ì\xa0„ ìž‘ì—…', '# Make prediction on the test data', '# In[100]:', '# Make a submission dataframe', '# Save the submission dataframe', '# domain featuresë¥¼ ì‚¬ìš©í–ˆì„ë•ŒëŠ” ì°¸ê³\xa0í•œ ì»¤ë„ì—ì„œëŠ” 0.679ê°€ ë‚˜ì™”ë‹¤.', '# ', '# ì‹¤ì\xa0œ ì»¤ë°‹í–‡ì„ë•Œ ì„±ëŠ¥ì˜ ë³€í™”ëŠ” ê±°ì˜ ì—†ë‹¤.(ê·¼ë°, ì»¤ë„ ëì— ë‚˜ì˜¤ëŠ”, the Gradient Boostingëª¨ë¸ì—ëŠ” íš¨ê³¼ê°€ ìžˆë‹¤ê³\xa0 í•¨)', '# ', '# ë‚˜ì¤‘ì—, feature engineeringì„ ë‹¤ë¥¸ ë°ì´í„° ì†ŒìŠ¤(íŒŒì¼)ì— ëŒ€í•´ì„œë„ í•´ë³¼ ì˜ˆì\xa0•ì´ë‹¤. ê·¸ëŸ¬ë©´ ì–´ëŠì\xa0•ë„ ì\xa0ìˆ˜ê°€ ì˜¬ë¼ê°ˆ ê²ƒìœ¼ë¡œ ì˜ˆìƒ', '# ### Model Interpretation: Feature Importances', '# ê°€ìž¥ ì˜í–¥ë\xa0¥ì´ ìžˆëŠ” ë³€ìˆ˜ê°€ ì–´ë–¤ ê²ƒì¸ì§€ í™•ì¸í•˜ê¸° ìœ„í•´, feature importance ê°’ì„ ì‚´íŽ´ ë³´ë©´ëœë‹¤.', '# ', '# EDAë¥¼ í†µí•´ì„œ ê°€ìž¥ ê·¸ ì˜í–¥ì´ í´ ê²ƒìœ¼ë¡œ ì˜ˆìƒë˜ëŠ” ê²ƒì€, EXT_SOURCEë³€ìˆ˜ê³¼ DAYS_BIRTHì´ë‹¤.', '# ', '# ë‚˜ì¤‘ì— ì´ëŸ° ë³€ìˆ˜ë“¤ì€ ì˜ˆì¸¡ì— ì‚¬ìš©í•\xa0 ë³€ìˆ˜ì˜ ì°¨ì›ì„ ì¤„ì´ê¸° ìœ„í•œ ìˆ˜ë‹¨? ìœ¼ë¡œ ì‚¬ìš©í•\xa0 ìˆ˜ ìžˆì„ ê²ƒ ê°™ë‹¤.', '# In[101]:', '    # Sort features according to importance', '    # reset_index()ë¥¼ í•˜ë©´, sorting í›„ ë‚´ë¦¼ì°¨ìˆœì´ ëœ ë°ì´í„°ì˜ rowì— ëŒ€í•´ì„œ ë‹¤ì‹œ 0ë¶€í„° ì¸ë±ìŠ¤ë¥¼ ë§¤ê²¨ì¤€ë‹¤!', '    # Normalize the feature importances to add up to one', '    # ì\xa0„ì²´ ì˜í–¥ê³„ìˆ˜? ë¥¼ ë”í•˜ë©´ 1ì´ ë˜ë¯€ë¡œ, ê·¸ ê°’ìœ¼ë¡œ ê°ê°ì˜ ì˜í–¥ ê³„ìˆ˜ë¥¼ ë‚˜ëˆ\xa0ì„œ ì¼ë°˜í™” í•´ì¤Œ.(0,1)ì‚¬ì´ì˜ ê°’ì„ ê°–ëŠ”ë‹¤.', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # ì—¬ê¸°ì„œ ì¸ë±ìŠ¤ë¥¼ ë¦¬ë²„ìŠ¤ í•˜ë©´ì„œ ì•žì— listë¥¼ ê²¹ì²˜ì„œ ë¶™ì—¬ì£¼ëŠ” ì´ìœ\xa0ëŠ”, ', '    # ìƒì†ë˜ëŠ” ëŒ€ìƒì´ ê°ì²´(object) íƒ€ìž…ì˜? ë°ì´í„°ë¼ì„œ, ë¦¬ìŠ¤íŠ¸ í™” ì‹œì¼œì£¼ê¸° ìœ„í•¨ì´ë‹¤.', '    # Set the yticks and labels, yì¶• ê°’ ë²”ìœ„ ì\xa0•í•´ì£¼ê³\xa0, yì¶• ë°ì´í„° ë¼ë²¨ ì´ë¦„ í•\xa0ë‹¹í•´ì£¼ê¸°', '    # Plot labeling', '# In[102]:', '# Show the feature importances for the dafault features', '# ì˜ˆìƒí•œ ëŒ€ë¡œ, `EXT_SOURCE`ì™€ `DAYS_BIRTH`ê°€ ê°€ìž¥ ì¤‘ìš”í•œ feature ìž„ì„ ê·¸ëž˜í”„ë¥¼ í†µí•´ì„œ ì•Œìˆ˜ìžˆë‹¤.', '# ', '# ëª¨ë¸ì„ í‘œí˜„í•˜ê±°ë‚˜ ì°¨ì›ì„ ì¤„ì´ëŠ” ë°©ë²•ìœ¼ë¡œ feature importanceê°€ ê°€ìž¥ ì\xa0•êµí•œ ë°©ë²•ì€ ì•„ë‹ˆì§€ë§Œ, ì˜ˆì¸¡í•\xa0 ë•Œ ì–´ë–¤ factorë“¤ì´ ì¤‘ìš”í•\xa0ì§€ë¥¼ ì•Œê²Œ í•´ì£¼ëŠ” ì¤‘ìš”í•œ ìš”ì†Œì´ë‹¤.', '# In[103]:', '# ê°€ê³µí•œ featureë“¤ì— ëŒ€í•´ì„œ íƒ‘ 15ê°œ ì•ˆì— ë‹¤ ë“¤ì–´ê°€ ìžˆëŠ” ê²ƒì„ í™•ì¸í•\xa0 ìˆ˜ ìžˆë‹¤.', '# ## ê²°ë¡\xa0', '# ì´ ë…¸íŠ¸ë¶ì„ í†µí•´ì„œ, ë¨¸ì‹\xa0ëŸ¬ë‹ì„ ì–´ë–»ê²Œ ì‹œìž‘í•´ì•¼ ë˜ëŠ”ì§€ì— ëŒ€í•´ì„œ ê³µë¶€í–ˆë‹¤.', '# ', '# ë°ì´í„°, ì»´íŽ˜í‹°ì…˜ì˜ ëª©í‘œ, ì–´ë–¤ ëª¨ë¸ì„ ì“¸ì§€ì— ëŒ€í•´ì„œ ë¨¼ì\xa0€ ì´í•´í•œë‹¤.\\', '# ', '# ëª¨ë¸ë¦¬ì— ë„ì›€ì„ ì¤„, ê°„ë‹¨í•œ EDAë¥¼ í†µí•´ì„œ ë°ì´í„°ì˜ ê´€ê³„, íŠ¸ë\xa0Œë“œ, ë°ì´í„° ì´ìƒì\xa0 ë“¤ì„ íŒŒì•…í•œë‹¤. // ê³¼ì\xa0•ìœ¼ë¡œ, ë°ì´í„°ë¥¼ ì±„ìš°ê³\xa0, ì¹´í…Œê³\xa0ë¦¬ì»¬ ë°ì´í„°ë¥¼ ì¸ì½”ë”©í•˜ê³\xa0, ë°ì´í„°ë¥¼ ìŠ¤ì¼€ì¼ë§í•˜ëŠ” ë“±ì˜ ìž‘ì—…ì„ ì§„í–‰í•¨', '# ', '# ê·¸ ë‹¤ìŒì—, baselineëª¨ë¸ì„ ë§Œë“¤ì–´ì„œ, ì˜ˆì¸¡ì„ í•´ë³´ê³\xa0, ë‹¤ìŒìœ¼ë¡œ ëª¨ë¸ì„ ì¡°ê¸ˆ ë” ë³µìž¡í•˜ê²Œ ê°œì„\xa0ì‹œí‚¤ê±°ë‚˜, featureì•ˆì— ë˜ ë‹¤ë¥¸ íŠ¹ì„±ë“¤ì„ ì¶”ê°€ í•´ ê°€ë©´ì„œ ì˜ˆì¸¡ ì\xa0ìˆ˜ë¥¼ ì˜¬ë\xa0¤ê°„ë‹¤.', '# ', '# ', '# ', '# >We followed the general outline of a machine learning project:', '# 1. Understand the problem and the data', '# 2. Data cleaning and formatting (this was mostly done for us)', '# 3. Exploratory Data Analysis', '# 4. Baseline model', '# 5. Improved model', '# 6. Model interpretation (just a little)', '# ', '# ', '# ', '# ', '# ## Just for Fun : Light Gradient Boosting Machine', '# í•„ìžëŠ”, ì§„ì§œ ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ì´ë¼ê³\xa0 í•œë‹¤.', '# ', '# LightGBM ë¼ì´ë¸ŒëŸ¬ë¦¬ì˜ the gradient boosting machineì„ ì´ìš©í•œë‹¤.', '# ', '# GBMëª¨ë¸ì€ êµ¬ì¡°í™” ëœ ë°ì´í„°ì…‹ì—ì„œ ìž˜ë‚˜ê°€ëŠ” ëª¨ë¸ì´ëž€ê³\xa0 í•œë‹¤. íŠ¹ížˆ ìºê¸€ì—ì„œ. ë˜ ì´ ëª¨ë¸ì€ ì\xa0ìš©í•˜ê¸° ìœ„í•œ íŠ¹ë³„í•œ í¬ë§·ì´ í•„ìš”í•˜ë‹¤.', '# ', '# ì¼ë‹¨, ì\xa0„ì²´ì\xa0ì¸ ëª¨ë¸ì„ êµ¬ì¶•í•˜ê¸° ìœ„í•œ ì½”ë“œë¥¼ ì\xa0ì–´ë†“ëŠ” ê²ƒì´ê¸° ë•Œë¬¸ì— ê²ë¨¹ì„ í•„ìš”ëŠ” ì—†ë‹¨ë‹¤. ì‹œìž‘í•´ë³´ìž.', '# In[104]:', '# í•„ìš”í•œ ëª¨ë“ˆ ë¶ˆëŸ¬ì˜¤ê¸°', '# In[105]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# In[106]:', '# In[107]:', '# In[108]:', '# 0.733 ê¹Œì§€ ë‚˜ì™”ë‹¤. ë\xad”ì§€ ëª¨ë¥´ê²\xa0ì§€ë§Œ ì´ê²Œ íš¨ê³¼ê°€ ìžˆë‹¤. ë‚˜ì¤‘ì— ìžì„¸í•œ ë¶€ë¶„ì€ ì°¨ì°¨ ê³µë¶€ í•˜ë„ë¡..', '# ì´ì\xa0œ, í•˜ë‚˜ë” í•´ë³´ëŠ”ë°, featureí•\xadëª©ì— ë³€ìˆ˜ë“¤ì„ ì¡°í•©í•´ì„œ ìƒˆë¡œìš´ ë³€ìˆ˜ë¥¼ ì¶”ê°€í•œ, domain knowledgeë³€ìˆ˜ë¥¼ í›ˆë\xa0¨ë°ì´í„°ë¡œ ì\xa0ìš©í•´ì„œ,', '# ', '# ì˜ˆì¸¡ì„ í•´ë³¸ë‹¤.', '# In[109]:', '# Test the domain knowledge features', '# In[110]:', '# ë‹¤ì‹œ, ë„ë©”ì¸ featureë“¤ì„ í¬í•¨ì‹œì¼œ ì¤‘ìš”ë„ë¥¼ í”Œëží•´ë´¤ë‹¤.', '# ', '# CREDIT_TERM ì´ë¼ëŠ” ê²ƒì´ ì›”ë“±í•˜ê²Œ ì˜í–¥ë„ê°€ í°ê²ƒì„ ë³¼ ìˆ˜ ìžˆë‹¤. í•˜ì§€ë§Œ, ê¸ˆìœµ ì\xa0ì¸ ë‚´ìš©ì„ ìž˜ ëª¨ë¥´ê¸° ë•Œë¬¸ì— ì—¬ê¸°ê¹Œì§€ë§Œ í•œë‹¤.', '# In[111]:', '# í•µì‹¬ì€ Feature Engineering!', '# ë!', '# In[ ]:']",750
home-credit-lightgbm.py,"['# coding: utf-8', '# In[ ]:', '# ### Content', '# 1. **Preprocess application_train.csv and application_test.csv**', '#     * Add a New Feature (Train and Test)', '#     * Plot â€“ of  New Feature on Train and Test', '# 2. ** Preprocess bureau.csv and bureau_balance.csv**', '#     * Graph of Catergorical Data', '#     * Add a New Feature in Bureau', '# 3. **Preprocess previous_applications.csv**', '#     * A few graph of Categorical Variable Previous_Application', '#     * Add a new Feature in Previous_Application', '# 4. **Preprocess POS_CASH_balance.csv**', '#     * Add a new Feature in POS_CASH_balance', '# 5. **Preprocess installments_payments.csv**', '#    * Add a New Feature in installments_payments', '# 6. **Preprocess credit_card_balance.csv**', '#     *  Add a New Feature for credit_card_balance', '# 7. *Combine all Feature*', '#     1. Train and Test', '#     1. Process bureau and bureau_balance', '#     1. Process previous_applications', '#     1. Process POS-CASH balance', '#     1. Process installments payments', '#     1. Process credit card balance', '# 8. **Split into Train and Test**', '# 9. *Apply Algorithm *', '#     *  LightGBM Classifier Algorithm', '#     *  XGBClassifier Algorithm', '#     *  CatBoostClassifier Algorithm', '# 10. *Top 30 Feature of All Algorithm*', '#     * Plot of LightGBM Classifier Algorithm', '#     * Plot of XGBClassifier Algorithm', '#     * Plot of CatBoostClassifier Algorithm', '#  ', '# ', '# ', '# In[ ]:', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# In[ ]:', '# ', '# ### Preprocess application_train.csv and application_test.csv', '# #### Read data and merge (Train and Test)', '# ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Categorical features: Binary features and One-Hot encoding', '# NaN values for DAYS_EMPLOYED: 365.243 -> nan', '# #### Add a New Feature (Train and Test)', '# 1. DAYS_EMPLOYED_PERC', '# 1. INCOME_CREDIT_PERC', '# 1. INCOME_PER_PERSON', '# 1. ANNUITY_INCOME_PERC', '# ', '# In[ ]:', '# In[ ]:', '# #### Plot - Add a New Feature on Train and Test', '# In[ ]:', ""# data = [go.Histogram(x=a,marker=dict(color='#1F77B4'),opacity=0.75)]"", ""# layout = go.Layout(title='ANNUITY_INCOME_PERC',xaxis=dict(title='Value'),"", ""#     yaxis=dict(title='Count'))"", '# fig = go.Figure(data=data, layout=layout)', ""# py.iplot(fig, filename='ANNUITY_INCOME_PERC')"", ""# data = [go.Histogram(x=b,marker=dict(color='#FF7F0E'),opacity=0.75)]"", ""# layout = go.Layout(title='INCOME_CREDIT_PERC',xaxis=dict(title='Value'),"", ""#     yaxis=dict(title='Count'))"", '# fig = go.Figure(data=data, layout=layout)', ""# py.iplot(fig, filename='INCOME_CREDIT_PERC')"", ""# data = [go.Histogram(x=c,marker=dict(color='#2CA02C'),opacity=0.75)]"", ""# layout = go.Layout(title='INCOME_PER_PERSON',xaxis=dict(title='Value'),"", ""#     yaxis=dict(title='Count'))"", '# fig = go.Figure(data=data, layout=layout)', ""# py.iplot(fig, filename='INCOME_PER_PERSON')"", ""# data = [go.Histogram(x=d,marker=dict(color='#D62728'),opacity=0.75)]"", ""# layout = go.Layout(title='ANNUITY_INCOME_PERC',xaxis=dict(title='Value'),"", ""#     yaxis=dict(title='Count'))"", '# fig = go.Figure(data=data, layout=layout)', ""# py.iplot(fig, filename='ANNUITY_INCOME_PERC')"", '# del d,data', '# gc.collect()', '# In[ ]:', '# ## Preprocess bureau.csv and bureau_balance.csv', '# In[ ]:', '# In[ ]:', '# #### Graph of Catergorical Data ', '# In[ ]:', '# a = bureau[""CREDIT_TYPE""].value_counts()', ""# a = pd.DataFrame({'labels': a.index,"", ""#                    'values': a.values"", '#                   })', ""# a.iplot(kind='pie',labels='labels',values='values', title='CREDIT_TYPE\\'s', hole = 0.5)"", '# b = bureau[""CREDIT_ACTIVE""].value_counts()', ""# b = pd.DataFrame({'labels': b.index,"", ""#                    'values': b.values"", '#                   })', ""# b.iplot(kind='pie',labels='labels',values='values', title='CREDIT_ACTIVE\\'s', hole = 0.5)"", '# c = bureau[""CREDIT_CURRENCY""].value_counts()', ""# c = pd.DataFrame({'labels': c.index,"", ""#                    'values': c.values"", '#                   })', ""# c.iplot(kind='pie',labels='labels',values='values', title='CREDIT_CURRENCY\\'s', hole = 0.5)"", '# del a,b,c', '# gc.collect()', '# In[ ]:', '# #### Add a New Feature in Bureau', '# In[ ]:', '# Bureau balance: Perform aggregations and merge with bureau.csv', '# In[ ]:', '# Bureau and bureau_balance numeric features', '# In[ ]:', '# Bureau and bureau_balance categorical features', '# In[ ]:', '# Bureau: Active credits - using only numerical aggregations', '# Bureau: Closed credits - using only numerical aggregations', '# In[ ]:', '# ### Preprocess previous_applications.csv', '# In[ ]:', '# In[ ]:', '# #### A few graph of Categorical Variable Previous_Application', '# 1. NAME_CONTRACT_TYPE', '# 1. WEEKDAY_APPR_PROCESS_START', '# 1. NAME_SELLER_INDUSTRY', '# 1. PRODUCT_COMBINATION', '# In[ ]:', '# a = prev[""NAME_CONTRACT_TYPE""].value_counts()', ""# a = pd.DataFrame({'labels': a.index,"", ""#                    'values': a.values"", '#                   })', ""# a.iplot(kind='pie',labels='labels',values='values', title='NAME_CONTRACT_TYPE\\'s', hole = 0.5)"", '# a = prev[""WEEKDAY_APPR_PROCESS_START""].value_counts()', '# a.iplot(kind=\'bar\', xTitle = \'Week Name\', yTitle = ""Count"", title = \'WEEKDAY_APPR_PROCESS_START\', color = \'red\')', '# a = prev[""NAME_SELLER_INDUSTRY""].value_counts()', '# a.iplot(kind=\'bar\', xTitle = \'NAME_SELLER_INDUSTRY Name\', yTitle = ""Count"", title = \'NAME_SELLER_INDUSTRY\', color = \'green\')', '# a = prev[""PRODUCT_COMBINATION""].value_counts()', '# a.iplot(kind=\'bar\', xTitle = \'PRODUCT_COMBINATION Name\', yTitle = ""Count"", title = \'PRODUCT_COMBINATION\', color = \'blue\')', '# del a', '# gc.collect()', '# In[ ]:', '# Days 365.243 values -> nan', '# #### Add a new Feature in Previous_Application', '# In[ ]:', '# In[ ]:', ""# a = prev['APP_CREDIT_PERC'].tolist()"", ""# a = [x for x in a if str(x) != 'nan']"", ""# data = [go.Histogram(x=a,marker=dict(color='#1F77B4'),opacity=0.75)]"", ""# layout = go.Layout(title='APP_CREDIT_PERC',xaxis=dict(title='Value'),"", ""#     yaxis=dict(title='Count'))"", '# fig = go.Figure(data=data, layout=layout)', ""# py.iplot(fig, filename='APP_CREDIT_PERC')"", '# del a,data', '# gc.collect()', '# In[ ]:', '# Previous applications numeric features', '# In[ ]:', '# Previous applications categorical features', '# In[ ]:', '# Previous Applications: Approved Applications - only numerical features', '# Previous Applications: Refused Applications - only numerical features', '# In[ ]:', '# In[ ]:', '# ### Preprocess POS_CASH_balance.csv', '# In[ ]:', '# In[ ]:', '# #### Add a new Feature in POS_CASH_balance', '# In[ ]:', '# Features', '# In[ ]:', '# Count pos cash accounts', '# In[ ]:', '# In[ ]:', '# ### Preprocess installments_payments.csv', '# In[ ]:', '# #### Add a New Feature', '# In[ ]:', '# Percentage and difference paid in each installment (amount paid and installment value)', '# Days past due and days before due (no negative values)', '# In[ ]:', '# Features: Perform aggregations', '# Count installments accounts', '# In[ ]:', '# In[ ]:', '# ### Preprocess credit_card_balance.csv', '# In[ ]:', '# #### Read credit card balance', '# In[ ]:', '# In[ ]:', '# a = cc[""NAME_CONTRACT_STATUS""].value_counts()', ""# a = pd.DataFrame({'labels': a.index,"", ""#                    'values': a.values"", '#                   })', ""# a.iplot(kind='pie',labels='labels',values='values', title='NAME_CONTRACT_STATUS\\'s', hole = 0.5)"", '# del a', '# gc.collect()', '# #### Add a New Feature for credit_card_balance ', '# In[ ]:', '# General aggregations', '# Count credit card lines', '# In[ ]:', '# In[ ]:', '# ## Combine all Feature', '# 1. Train and Test', '# 1. Process bureau and bureau_balance', '# 1. Process previous_applications', '# 1. Process POS-CASH balance', '# 1. Process installments payments', '# 1. Process credit card balance', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ### Split into Train and Test', '# In[ ]:', '# ### *Apply Algorithm *', '#     * LightGBM Classifier Algorithm', '#     * XGBClassifier Algorithm', '#     * CatBoostClassifier Algorithm', '# ### LightGBM Classifier Algorithm', '# In[ ]:', '# In[ ]:', '# imp = clf_lgbm.feature_importances_', '# col_name = data_only.columns', ""# d = {'name': col_name,'value':imp}"", '# d = pd.DataFrame(data =d)', ""# d = d.sort_values(['value'], ascending=False)"", ""# temp = d.set_index('name')"", '# temp[:50].iplot(kind=\'bar\',title=""Feature IMportant by LGBMClassifier "")', '# del clf_lgbm, temp', '# gc.collect()', '# ### XGBClassifier Algorithm', '# In[ ]:', '# clf_xgBoost = xgb.XGBClassifier(', ""#     learning_rate =0.01, n_estimators=1000, max_depth=4, min_child_weight=4, subsample=0.8, colsample_bytree=0.8, objective= 'binary:logistic', "", '#             nthread=4, scale_pos_weight=2, seed=27)', '# # Fit the models', '# clf_xgBoost.fit(data_only,labels)', '# In[ ]:', '# imp = clf_xgBoost.feature_importances_', '# col_name = data_only.columns', ""# d1 = {'name': col_name,'value':imp}"", '# d1 = pd.DataFrame(data =d1)', ""# d1 = d1.sort_values(['value'], ascending=False)"", ""# temp = d1.set_index('name')"", '# temp[:50].iplot(kind=\'bar\',title=""Feature IMportant by XGBClassifier"")', '# del clf_xgBoost, temp', '# gc.collect()', '# ### CatBoostClassifier Algorithm', '# In[ ]:', '# clf_catboost = CatBoostClassifier(iterations=1200,', '#                               learning_rate=0.1,', '#                               depth=7,', '#                               l2_leaf_reg=40,', ""#                               bootstrap_type='Bernoulli',"", '#                               subsample=0.7,', '#                               scale_pos_weight=5,', ""#                               eval_metric='AUC',"", '#                               metric_period=50,', ""#                               od_type='Iter',"", '#                               od_wait=45,', '#                               random_seed=15,', '#                               allow_writing_files=False)', '# clf_catboost.fit(data_only,labels,verbose=True)', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",282
home-credit-nn-ae-lgb.py,"['# coding: utf-8', '# **Importing libraries**', '# In[ ]:', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# **Application train and test data**', '# In[ ]:', '    # New features', '# **Bureau & Bureau_Balance**', '# In[ ]:', '    # getting the furthest date attached to bureau_id', '    # Status of bureau_id as per freshest month', '# **previous_application**', '# In[ ]:', '    # filtering the invalid contracts', '    # count of loan status', '    # new features', '# In[ ]:', '    # new features', '# **POS_CASH_balance**', '# In[ ]:', '# **installment_payments**', '# In[ ]:', '    # features for last month active loans', '# **credit_card_balance**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **Modeling**', '# In[ ]:', '# **LGBM**', '# In[ ]:', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '           # scale_pos_weight=1,', '    # Write submission file and plot feature importance', '# **ANN**', '# In[ ]:', '# **AE**', '# In[ ]:', '# **submission**', '# In[ ]:', '# **Prediction**', '# In[ ]:', '    # train test splitting', '    # up sampling', '# In[ ]:', '# In[ ]:']",50
home-credit-risk-soln-78-3.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '    # Get all the models tested so far in DataFrame format', '    # Get current parameters and the best parameters    ', '    # Save all model results', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# # Examine missing value', '# In[ ]:', '# Function to calculate missing values by column# Funct ', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[ ]:', '# Missing values statistics', '# In[ ]:', '# In[ ]:', '# Number of unique classes in each object column', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# #Pre-processing buro_balance', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# Pre-processing previous_application', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Pre-processing buro', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Pre-processing POS_CASH', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Pre-processing credit_card', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Pre-processing payments', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Join data bases', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ', '# #Remove features with many missing values', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",114
home-credit-risk-with-detailed-feature-engineering.py,"['# coding: utf-8', '# # DESCRIPTION', '# ', '# Many people struggle to get loans due to insufficient or non-existent credit histories. And, unfortunately, this population is often taken advantage of by untrustworthy lenders.', '# ', ""# Home Credit strives to broaden financial inclusion for the unbanked population by providing a positive and safe borrowing experience. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a variety of alternative data--including telco and transactional information--to predict their clients' repayment abilities."", '# ', ""# While Home Credit is currently using various statistical and machine learning methods to make these predictions, they're challenging Kagglers to help them unlock the full potential of their data. Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful."", '# # Data Description', '# ', '#     * application_{train|test}.csv', '#         This is the main table, broken into two files for Train (with TARGET) and Test (without TARGET).', '#         Static data for all applications. One row represents one loan in our data sample.', '# ', '#     * bureau.csv', ""#         All client's previous credits provided by other financial institutions that were reported to Credit Bureau (for clients who have a loan in our sample)."", '#         For every loan in our sample, there are as many rows as number of credits the client had in Credit Bureau before the application date.', '# ', '#     * bureau_balance.csv', '#         Monthly balances of previous credits in Credit Bureau.', '#         This table has one row for each month of history of every previous credit reported to Credit Bureau â€“ i.e the table has (#loans in sample * # of relative previous credits * # of months where we have some history observable for the previous credits) rows.', '# ', '#     * POS_CASH_balance.csv', '#         Monthly balance snapshots of previous POS (point of sales) and cash loans that the applicant had with Home Credit.', '#         This table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample â€“ i.e. the table has (#loans in sample * # of relative previous credits * # of months in which we have some history observable for the previous credits) rows.', '# ', '#     * credit_card_balance.csv', '#         Monthly balance snapshots of previous credit cards that the applicant has with Home Credit.', '#         This table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample â€“ i.e. the table has (#loans in sample * # of relative previous credit cards * # of months where we have some history observable for the previous credit card) rows.', '# ', '#     * previous_application.csv', '#         All previous applications for Home Credit loans of clients who have loans in our sample.', '#         There is one row for each previous application related to loans in our data sample.', '# ', '#     * installments_payments.csv', '#         Repayment history for the previously disbursed credits in Home Credit related to the loans in our sample.', '#         There is a) one row for every payment that was made plus b) one row each for missed payment.', '#         One row is equivalent to one payment of one installment OR one installment corresponding to one payment of one previous Home Credit credit related to loans in our sample.', '# ', '#     * HomeCredit_columns_description.csv', '#         This file contains descriptions for the columns in the various data files.', '# ', '# # Libraries', '# In[1]:', '# # Helper Functions', '# In[2]:', '# In[3]:', '# Display/plot feature importance', '# In[4]:', '# # application_train', '# In[5]:', '# # bureau & bureau_balance', '# In[6]:', '    # Degisken isimlerinin yeniden adlandirilmasi ', '    # Status_sum ile ilgili yeni bir degisken olusturma', '    # bureau_bb tablosundaki kategorik degiskenlere One Hot Encoding uygulanmasi', '    # CREDIT_CURRENCY degiskeninin %99u currency1, bu sebeple ayirt ediciligi olmayacagini dusundugumuz icin sildik  ', '    # bureau_bb_agg tablosuna aggreagation islemlerinin uygulanamasi  ', '    # Degisken isimlerinin yeniden adlandirilmasi ', '    # kisinin aldÄ±gÄ± en yuksek ve en dusuk kredinin farkÄ±nÄ± gÃ¶steren yeni degisken', '    # ortalama kac ayda bir kredi cektigini ifade eden  yeni degisken', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# # installments_payments', '# In[7]:', '    # Her bir taksit Ã¶demesinin gec olup olmama durumu 1: gec Ã¶dedi 0: erken Ã¶demeyi temsil eder', '    # Agrregation ve degisken tekillestirme', '    # Multi index problemi cÃ¶zÃ¼mÃ¼', '    # drop variables ', '    # Kredi Ã¶deme yÃ¼zdesi ve toplam kalan borc', '# # pos_cash_balance', '# In[ ]:', '# In[8]:', '    # Kategorik Degiskenimizi Dummy Degiskenine DÃ¶nÃ¼stÃ¼rme', '    # Aggregation Islemi - Tekillestirme', ""    # Multilayer index'i tek boyutlu index'e dÃ¶nÃ¼stÃ¼rme"", '    # SK_DPD kac kredide 0 olma durumu (SK_DPD MAX alacagiz 0 durumunu veriyor) ', '    # SK_DPD_DEF (SK_DPD_DEF_MAX sifir olma durumunu veriyor)', '    # CNT_INSTALMENT_FUTURE_MIN==0 oldugunda NAME_CONTRACT_STATUS_Completed_SUM==0 olma durumu ', '    # 1:kredi zamaninda kapanmamis 0:kredi zamaninda kapanmis', '# # credit_card_balance', '# In[9]:', ""    CCB = pd.get_dummies(CCB, columns= ['NAME_CONTRACT_STATUS'] )  # artik tumu sayisal "", '    # Bu fonksiyon, kac defa odemelerin geciktigini hesaplar   # Function to calculate number of times Days Past Due occurred ', '        # DPD ile beklenen bir seri: SK_DPD degiskeninin her bir prev_app daki gecmis kredi icin olan degerleri  # DPD is a series of values of SK_DPD for each of the groupby combination ', '        # We convert it to a list to get the number of SK_DPD values NOT EQUALS ZERO', '        P = len(M)        # P: taksit sayisi', '        # Find the count of transactions when Payment made is less than Minimum Payment ', ""    CCB['CASH_CARD_RATIO1'] = (CCB['DRAWINGS_ATM']/CCB['DRAWINGS_TOTAL'])*100  # ATM den cektigi nakit / toplam cektigi"", ""    CCB['DRAWINGS_RATIO1'] = (CCB['TOTAL_DRAWINGS']/CCB['NUMBER_OF_DRAWINGS'])*100     # yuzdelik degil, genisleme yapmis"", '# In[ ]:', '# # previous_application', '# In[10]:', '    # ""WEEKDAY_APPR_PROCESS_START""  deÄŸiÅŸkeninin  WEEK_DAY ve WEEKEND olarak iki kategoriye ayrÄ±lmasÄ±', '    # ""HOUR_APPR_PROCESS_START""  deÄŸiÅŸkeninin working_hours ve off_hours olarak iki kategoriye ayrÄ±lmasÄ±', '    # DAYS_DECISION deÄŸeri 1 yÄ±ldan kÃ¼Ã§Ã¼k olanlara 1, bÃ¼yÃ¼k olanlara 0 deÄŸeri verildi.', '    # ""NAME_TYPE_SUITE""  deÄŸiÅŸkeninin alone ve not_alone olarak iki kategoriye ayrÄ±lmasÄ±', '    # ""NAME_GOODS_CATEGORY""  deÄŸiÅŸkenindeki bu deÄŸerler others olarak kategorize edilecek', '    # ""NAME_SELLER_INDUSTRY""  deÄŸiÅŸkenindeki bu deÄŸerler others olarak kategorize edilecek', '    # Ä°stenilen krecinin verilen krediye oranÄ± iÃ§eren deÄŸiÅŸkeni tÃ¼retir', '    # Ä°stenilen krecinin verilen krediye oranÄ± iÃ§eren deÄŸiÅŸkeni tÃ¼retir', '    # Ã–deme gÃ¼nÃ¼nÃ¼ geciktirmiÅŸ mi bunu gÃ¶steren churn_prev deÄŸiÅŸkeni tÃ¼retilir.', '    # 1= geciktirmiÅŸ, 0 = geciktirmemiÅŸ, NaN = boÅŸ deÄŸer', '    # NFLAG_INSURED_ON_APPROVAL deÄŸiÅŸkeni yerine kullanÄ±lmak izere NEW_INSURANCE deÄŸiÅŸkeni tanÄ±mlandÄ±.', '    # INTEREST_RATE deÄŸiÅŸkenini oluÅŸturur.', '    # Previous tablosundaki kategorik deÄŸiÅŸkenlerin isimlerini tutar.', '# In[ ]:', '# # Combine', '# In[11]:', '# In[ ]:', '# # Model Tuning', '# In[12]:', '#              ""n_estimators"": [200, 500, 100],', '#              ""max_depth"":[1,2,35,8]}', '# In[13]:', '# In[ ]:', '# # Machine Learning', '# In[14]:', '# # main', '# In[15]:', '# In[16]:', '# In[ ]:', '# In[ ]:']",123
home-credit-risk.py,"['# coding: utf-8', '# # Main Work Flow', '# - **Import libraries**', '# - **Cleaning of training dataset**', '# - **Choice of method**', '# - **Preprocessing of testing dataset**', '# - **Transformation and post-processing**', '# In[ ]:', '# import lightgbm as lgb', '# In[ ]:', '# ## DATA READING', '# **Input File Names**', '# In[ ]:', '# del df_application_train', '# del df_application_test', ""# df_application_train = pd.read_csv('../input/application_train.csv')"", ""# df_application_test = pd.read_csv('../input/application_test.csv')"", '# In[ ]:', '# ## Data manupulation outliers', '# In[ ]:', '# ## TRAINING DATA SET', '# **Descriptive stats about the data set**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# df_bureau1 = pd.merge( ', ""#              pd.merge( df_application_test,df_bureau, on='SK_ID_CURR', how='left' ),"", ""#                        df_bureau_balance, on='SK_ID_BUREAU', how='left' )"", '# In[ ]:', ""# df_bureau_balance.set_index('SK_ID_BUREAU').head(2)"", '# In[ ]:', '# def join_df(a,b,key,rsuff):', ""#     temp = a.join(b.set_index(key), on=key, rsuffix=rsuff, how='left' )"", '#     return temp;', '# def join_df_serise(dfra, b1,b2, p1,p2,p3,p4):', ""#     tempb= join_df(b1,b2,'SK_ID_BUREAU','')"", '#     temp = join_df(', '#            join_df(', '#            join_df(', ""#            join_df(dfra,p1,'SK_ID_CURR','_p1'), "", ""#                         p2,'SK_ID_CURR','_p2'), "", ""#                         p3,'SK_ID_CURR','_p3') , "", ""#                         p4,'SK_ID_CURR','_p4')"", ""#     temp = join_df(temp,tempb,'SK_ID_CURR','_b')"", '#     del tempb', '#     return temp;', '# In[ ]:', '# In[ ]:', '    # Remove some empty features', '# In[ ]:', '# Remove some rows with values not present in test set', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Data Manipulation', '# In[ ]:', '# In[ ]:', '# In[ ]:', '#             print(col)', '#             print(len(df_list),df_list)', '# In[ ]:', '# ## EDA', '# In[ ]:', '# In[ ]:', ""# plt.yscale('log')"", '# plt.ylim(10**-1,10**7)', '# In[ ]:', '# In[ ]:', ""# plt.yscale('log')"", '# plt.ylim(10**3,10**7)', '# # Validation', ""# - The test data doesn't include y_train values "", '# - Test few methodologies to model the system ', '# - Test the accuracy of the methods', ""# **Let's split up the data into a training set and a test set!**"", '# ## Train', '# In[ ]:', '# In[ ]:', '# XX_train, XX_test, yy_train, yy_test = train_test_split(X_train, y_train, test_size=0.30)', '# ## Fit & Test', '# In[ ]:', '# import sklearn.pipeline', '# scaler = sklearn.preprocessing.StandardScaler()', '# import lightgbm as lgb', '# # train', ""# gbm = lgb.LGBMRegressor(objective='binary',#'regression',"", ""#                         metric = 'binary_logloss',"", ""#                         boosting_type='gbdt',"", '#                         num_leaves=1001,', '#                         learning_rate=0.0005,', '#                         n_estimators=200)', ""# steps = [('scaler', scaler),"", ""#         ('GBM', gbm)]"", '# pipeline = sklearn.pipeline.Pipeline(steps)', '# ### fit pipeline on X_train and y_train', '# pipeline.fit( XX_train, yy_train)', '# ### call pipeline.predict() on X_test data to make a set of test predictions', '# yy_gbm = pipeline.predict( XX_test )', '# In[ ]:', '# mean = 0.5', '# results = yy_gbm + (1-mean)', '# predictions  = list(map(int, results))', ""# print('MAE:', metrics.mean_absolute_error(yy_test, predictions))"", ""# print('MSE:', metrics.mean_squared_error(yy_test, predictions))"", ""# print('RMSE:', np.sqrt(metrics.mean_squared_error(yy_test, predictions)))"", '# # TEST Data', '# In[ ]:', '# In[ ]:', '#             print(col)', '#             print(len(df_list),df_list)', '# ## TEST DATA SET - Preprocessing', '# **(a) Train and Test Datasets**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# import sklearn.pipeline', '# scaler = sklearn.preprocessing.StandardScaler()', '# import lightgbm as lgb', '# # train', ""# # gbm = lgb.LGBMRegressor(objective='binary',#'regression',"", ""# #                         metric = 'binary_logloss',"", ""# #                         boosting_type='gbdt',"", '# #                         num_leaves=1001,', '# #                         learning_rate=0.0005,', '# #                         n_estimators=200)', '# gbm = lgb.LGBMRegressor(', '#             nthread=4,', '#             n_estimators=50000,', '#             learning_rate=0.0001,', '#             num_leaves=34,', '#             colsample_bytree=0.9497036,', '#             subsample=0.8715623,', '#             max_depth=8,', '#             reg_alpha=0.041545473,', '#             reg_lambda=0.0735294,', '#             min_split_gain=0.0222415,', '#             min_child_weight=39.3259775,', '#             silent=-1,', '#             verbose=-1) ', ""# steps = [('scaler', scaler),"", ""#         ('GBM', gbm)]"", '# pipeline = sklearn.pipeline.Pipeline(steps)', '# ### fit pipeline on X_train and y_train', '# pipeline.fit( X_train, y_train)', '# ### call pipeline.predict() on X_test data to make a set of test predictions', '# y_gbm = pipeline.predict( X_test )', '# In[ ]:', '# sns.distplot(y_gbm)', '# ## Saving predicted data to a file', '# In[ ]:', '# target = []', '# for y in y_gbm:', ""#     target.append( '{:.{prec}f}'.format(y, prec=1) ) "", '# In[ ]:', ""# pd.DataFrame( { 'SK_ID_CURR':list(df_test['SK_ID_CURR']),"", ""#                 'TARGET':target } ).set_index('SK_ID_CURR').to_csv('sample_submission.csv', sep=',')"", '# In[ ]:', '# In[ ]:', '        # LightGBM parameters found by Bayesian optimization', '#         clf = LGBMClassifier(', ""#             objective='binary',"", ""#             metric = 'auc',"", ""#             boosting_type='gbdt',"", '#             nthread=4,', '#             num_leaves=100,', '#             learning_rate=0.03,', '#             n_estimators=1000 )', '#         gc.collect()', '# In[ ]:', '    # Plot feature importances', '# In[ ]:', '    # Plot ROC curves', '        # Plot the roc curve', '# In[ ]:', '    # Plot ROC curves', '        # Plot the roc curve', '# In[ ]:', '# Create Folds', '# Train model and get oof and test predictions', '# Display a few graphs', '# In[ ]:', '# In[ ]:', '# In[ ]:']",185
home-credit.ipynb,[],0
home-credit.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# ### Creating combined dataframe from train and test file', '# - Purpuse of combining train and test file is to handle data modification at same time on both file', '# - Once data pre-processing is done we can easily split it again with below logic', '# - if TARGET=NaN meaning its test file else its train file', '# In[6]:', '# In[7]:', '# In[8]:', '# ### Considering basic numeric features', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# - Creating dataframe with required columns only', '# In[13]:', '# In[14]:', '# ## EDA And Pre-Processing ', '# In[15]:', '# In[16]:', '# ### Handling missing values', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[ ]:', '# In[24]:', '# In[25]:', '# In[26]:', '# Heatmap', '# - Name Type Suite and Occupation type has missing values', '# - Occupation type has lots of missing value so for now droping this column', '# - Name Type suite will create some dummy NTS_XNA category for now', '# In[ ]:', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# - Draw distribution of numeric features', '# In[40]:', '# In[41]:', '# In[42]:', '# In[43]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[44]:', '# In[45]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# - Handling Outlier', '# In[46]:', '# In[47]:', '# In[48]:', '# In[49]:', '# - found that DAYS_EMPLOYED has some anomalies', ""# - Around 18% of data amongs all data has some '365243' value in this fields"", '# - as its not make sence to current data so we need to handle it somehow', '# - so i am replacing this value with np.nan', '# - creating new column called DAYS_EMPLOYED_ANOM Anomalous flag which will have True or False value based on this field', '# In[50]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# After removing anomalies we can see above histogram that DAYS_EMPLOYED has maximum as 49 years and minimum is 0 year as discribe below', '# ### creating combined basic features from numerical and categorical', '# In[51]:', '# In[52]:', '# In[53]:', '# In[ ]:', '# In[54]:', '# In[55]:', '# In[56]:', '# In[57]:', '# In[58]:', '# In[59]:', '# In[60]:', '# In[61]:', '# ### Lable encoding for categorical features whose values are binary like Y/N, Yes/No, True/False, M/F etc.', '# In[62]:', '# In[63]:', '# Categorical features with Binary encode (0 or 1; two categories)', '# In[64]:', '# out of above basic categorical features we already encoded binary ', '# - FLAG_OWN_CAR', '# - FLAG_OWN_REALITY', '# - CODE_GENDER', '# - DAYS_EMPLYED_ANOM', '# ', '# Now doing one hot encoding for remaining features', '# - NAME_CONTRACT_TYPE', '# - NAME_TYPE_SUITE', '# - NAME_INCOME_TYPE', '# - NAME_EDUCATION_TYPE', '# - NAME_FAMILY_STATUS', '# - NAME_HOUSING_TYPE', '# - ORGANIZATION_TYPE', '# In[65]:', '# In[66]:', '# In[67]:', '# In[68]:', '# In[69]:', '# In[70]:', '# In[71]:', '# In[72]:', '# In[73]:', '# ### creating final dataframe with required features', '# In[74]:', '# In[75]:', '# In[76]:', '# In[77]:', '# In[78]:', '# ## Model 1 : Logistic Regression', '# In[79]:', '# Make the model with the specified regularization parameter', '# In[80]:', '# In[81]:', '# In[82]:', '# In[83]:', '# In[84]:', '# In[85]:', '# In[86]:', '# In[87]:', '# In[88]:', '# Train on the training data', '# In[89]:', '# Make predictions', '# Make sure to select the second column only', '# In[90]:', '# In[91]:', '# In[92]:', '# ## Dealing with Imbalance Data using SMOTE', '# In[93]:', '# In[94]:', '# In[95]:', '# In[96]:', '# In[97]:', '# In[ ]:', '# In[ ]:']",153
home-crerit-default-risk-002.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# One-hot encoding for categorical columns with get_dummies', '# In[4]:', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Categorical features: Binary features and One-Hot encoding', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Some simple new features (percentages)', '# In[5]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[6]:', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# In[7]:', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# In[8]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[9]:', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# In[10]:', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[14]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# In[15]:', '# Display/plot feature importance', '# In[16]:', '# In[ ]:', '# In[ ]:']",60
home-value-prediction-light.py,"['# coding: utf-8', '# In[ ]:', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', 'from sklearn.preprocessing import LabelEncoder # Machine learning', 'import seaborn as sns # data visualization', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[ ]:', '# In[ ]:', '# Align the training and testing data, keep only columns present in both dataframes', '# In[ ]:', '# Drop the target from the training data', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[ ]:', '# Format the training and testing data ', '# 10 fold cross validation', '# Validation and test predictions', '# Iterate through each fold', '    # Training data for the fold', '    # Validation data for the fold', '    # LightGBM classifier with hyperparameters', '    # Fit on the training data, evaluate on the validation data', '    # Validation preditions', '    # Testing predictions', '    # Display the performance for the current fold', '    # Delete variables to free up memory', '# In[ ]:', '# In[ ]:', '# In[ ]:']",43
homecredit-auc190927.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", '# éžæ•°é‡ç‰¹å¾One-hot encoding', '# å¤„ç†application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # å¤„ç†ä¸¤ç§å–å€¼çš„éžæ•°é‡ç‰¹å¾ (0 or 1; two categories)', '    # éžæ•°é‡ç‰¹å¾ with One-Hot encode', '# å¤„ç† bureau.csv and bureau_balance.csv', '    # bureau_balanceå¯¹è¡¨å†…ç›¸åŒSK_ID_BUREAUçš„æ‰€æœ‰è¡Œåˆå¹¶', '    # å¯¹bureau and bureau_balanceåˆå¹¶åŽçš„æŠ¥è¡¨ï¼Œæ•°é‡ç‰¹å¾çš„åˆå¹¶æ–¹å¼', '    # Bureau and bureau_balanceéžæ•°é‡ç‰¹å¾å¤„ç†', '    # bureauä¸\xad Closed credits,ç›¸åŒSK_ID_CURRæ‰€æœ‰è¡Œåˆå¹¶', '# å¤„ç†previous_applications.csv', '    # å…³äºŽæ—¥æœŸçš„æ˜Žæ˜¾é”™è¯¯å€¼æ›¿æ¢ä¸ºç©ºå€¼', '    # Previous applicationsçš„æ•°é‡ç‰¹å¾åˆå¹¶æ–¹æ³•', '    # Previous applicationséžæ•°é‡ç‰¹å¾', '    # Previous ApplicationæŒ‰ç…§NAME_CONTRACT_STATUS_Approvedåˆ†ä¸ºé€šè¿‡å’Œæ‹’ç»ä¸¤ç±»ï¼Œåˆ†åˆ«å¤„ç†', '    # Previous Applicationsä¸\xadé€šè¿‡ç”³è¯·çš„æ•°æ®ï¼Œå¯¹SK_ID_CURRç›¸åŒçš„è¡Œåˆå¹¶', '    # Previous Applicationsä¸\xadæ‹’ç»ç”³è¯·çš„æ•°æ®ï¼Œå¯¹SK_ID_CURRç›¸åŒçš„è¡Œåˆå¹¶', '# å¤„ç† POS_CASH_balance.csv', '    # POS_CASH_balanceç‰¹å¾åˆå¹¶æ–¹æ³•', '    # è®¡ç®—å®¢æˆ·pos cashè´¦æˆ·æ€»æ•°', '# å¤„ç†installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # åˆ›é€\xa0æ–°ç‰¹å¾ï¼šé€¾æœŸæ”¯ä»˜å’ŒæŒ‰æ—¶æ”¯ä»˜', '    # è®¡ç®—installments accountæ€»æ•°', '# å¤„ç†credit_card_balance.csv', '    # åˆå¹¶åŽä¸¢å¼ƒSK_ID_PREVç‰¹å¾', '    # è®¡ç®—credit cardè¡Œæ•°', '# LightGBM GBDT with KFold or Stratified KFold', '    # Divide in training/validation and test data', '    # äº¤å‰éªŒè¯æ¨¡åž‹', '    # åˆ›å»ºå‚¨å\xad˜æ¨¡åž‹è¿è¡Œç»“æžœçš„æ•°ç»„å’Œè¡¨', '        # è´å¶æ–¯ä¼˜åŒ–å¾—åˆ°çš„LightGBMè¶…å‚æ•°', '    # ä¿å\xad˜æµ‹è¯•é›†ç»“æžœå¹¶ç”»å‡ºç‰¹å¾é‡è¦æ€§å›¾æ\xa0‡', '# ç‰¹å¾é‡è¦æ€§ä½œå›¾']",40
homecredit-automated-hyperparameter-tuning.py,"['# coding: utf-8', '# In[ ]:', ""# Will Koehrsen's notebook used as a reference"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', 'import lightgbm as lgb # modelling', '# evaluating the model', '# visualization', '# governing choices for search', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# immporting datasets and its splitting', '# sampling 16000 rows (10000 for training, 6000 for testing)', '# selecting only numeric features', '# extracting labels', '# In[ ]:', '# training set', '# In[ ]:', '# default hyperparameters', '# using early stopping to determine number of estimators and therefore deleting the default value', '# performing cross validation with early stopping', '# highest score', '# standard deviation of best score', '# In[ ]:', '# evaluating the baseline model on the testing data', '# optimal number of estimators found in cv', '# training and making predictions with model', '# In[ ]:', '# Objective Function which takes a set of Hyperparameter values and returns the cross validation score on the training data', ""# the following excerpt about objective function in Hyperopt taken from Will Koehrsen's notebook for future reference"", '# An objective function in Hyperopt must return either a single real value to minimize, or a dictionary with a key ""loss"" ', '# with the score to minimize (and a key ""status"" indicating if the run was successful or not).', '# Optimization is typically about minimizing a value, and because our metric is Receiver Operating Characteristic Area Under the Curve (ROC AUC) ', '# where higher is better, the objective function will return  1âˆ’ROC AUC Cross Validation', '    # keeping track of evals', '    # using early stopping to find number of trees trained', '    # retrieving the subsample', '    # extracting the boosting types and subsample to top level keys', '    # ensuring the integer parameters remain as intergers', '    # performing n_folds cv', '    # extracting the best score', '    # minimizing loss', '    # boosting rounds that returned the highest score', '    # adding the number of estimators to the hyperparameters', ""    # writing to the csv file. 'a' mean append"", '    # dictionary with information for evaluation', '# In[ ]:', '# specifying domain (known as space in Hyperopt) is different from grid search. In Hyperopt and other Bayesian opt. frameworks', '# the domain is not a discrete grid but it consists of probability distribution of different hyperparameters', '# In[ ]:', '# again like grid search we will go through example of learning rate which is defined on a log scale', '# creating the learning rate', '# In[ ]:', '# visualization of the learning rate', '# drawing 1000 samples from the learning rate domain', '# In[ ]:', '# on the other, no. of leaves is an uniform distribution', '# sampling 10000 times from the number of leaves distribution', '# In[ ]:', '# conditional domain', '# using nested conditional statements to indicate hyperparameters that depend on other hyperparameters', '# for example, ""goss"" boosting_type cannot use subsampling, therefore we have to preset the ""subsample"" value as 1.0 in its case', '# boosting type domain', '# drawing a sample', '# In[ ]:', '# retrieve the subsample if present otherwise set it to a default of 1.0', '# extracting the boosting type', '# In[ ]:', ""# the gbm cannot use the distionary, therefore 'boosting_type' and 'subsample' have to be set as toplevel keys"", '# COMPLETE BAYESIAN DOMAIN', '# defining the search space', '# In[ ]:', '# sampling from the full space (domain)', '# conditional logic to assign top-level keys', '# will different outputs each time its run', '# In[ ]:', '# testing objective function with domain', '# creating a new file and opening a connection', '# writing column names', '# testing the objective function', '# results vary everytime', '# In[ ]:', '# OPTIMIZATION ALGORITHM', '# creating the algorithm', '# In[ ]:', '# automated hyperparameter tuning is informed unlike grid and random methods', '# hyperopt internally keeps a track of the results for the algos to use, but if we want to monitor the results and have a saved copy of the search, storage of results is required', '# Trials object stores the dictionary returned from the objective function', '# recording results', '# In[ ]:', '# Trials object will hold everything returned from objective functions in the .results attribute', '# Create a file and open a connection', '# Write column names', '# In[ ]:', '# now we have all the four parts of the hyperparameter optimization', '# In[ ]:', '# fmin takes the four parts defined above as well as the maximum number of iterations max_evals', '# running optimization', '# In[ ]:', '# the best object holds only the hyperparameter which returned the lowest loss function', '# for understanding how each search progresses, inspection of Trials object or csv file is required', '# sorting the trials with the lowest loss (highest AUC) first', '# In[ ]:', '# reading the csv file', '# In[ ]:', '# this function takes in the results, trains a model on the training data and evaluates on the testing data', '# returns a df of hyperparameters from the search. ', '# saving the results to a csv file converts the dictionary of hyperparameters to a string', '# mapping that back to a dictionary using ast.literal_eval', '    # string to dictionary', '    # sorting with the best values on top', '    # printing out cross validation high score', '    # using the best parameters to create a model', '    # training and making predictions', '    # creating dataframes of hyperparameters', '    # iterating through each set of hyperparameters that were evaluated', '    # putting the iteration and score in hyperparameter dataframe', '# In[ ]:', '# In[ ]:', '# continuing optimization', '# Hyperopt can continue searching where a previous search left off if we pass in a  Trials object that already has results', '# In[ ]:', '# saving the Trials object so it can be realater for more training', '# In[ ]:', '# to start the training from where it left off, simply load in the Trials object and pass it to an instance of fmin', '# Create a new file and open a connection', '# Write column names', '# Record results', '# Sort the trials with lowest loss (highest AUC) first', '# Save the trial results', '# In[ ]:', '# going through the results from 300 search iterations on the reduced dataset. Looking at the scores, the distribution of hyperparameter values tried, ', '# the evolution of values over time, and compare the hyperparameters values to those from random search.', '# In[ ]:', '# getting all the score in a df in order to plot them over the course of training', '# In[ ]:', '# best scores for plotting the best hyperparameter values', '# In[ ]:', '# plot of scores over the course of searching', '# In[ ]:', '# density plots of the learning rate distribution', '# In[ ]:', '# we can make the same plot now for all the hyperparameters', '# iterating through each hyperparameter', '# In[ ]:', '# evolution of hyperparameters over search', '# In[ ]:', '# Read in full dataset', '# Extract the test ids and train labels', '# In[ ]:', '# APPLYING TO FULL DATASET', '# In[ ]:', '# bayesian optimization on full dataset', '# cross validation with n_folds and early stopping', '# In[ ]:']",155
homecredit-default-risk-step-by-step-2nd-notebook.py,"['# coding: utf-8', '# ', '# ', '# ', '# ', '#  Home Credit Default Risk Step by Step: 2nd Notebook', '# ', '# ', '# ', '# ', '# ', '# [Home Credit Default Risk Step by Step: 1st Notebook](https://www.kaggle.com/ekrembayar/homecredit-default-risk-step-by-step-1st-notebook)', '# ', '# # 1. PACKAGES', '# In[1]:', '# 1. PACKAGES', '# -----------------------------------------------------------', '# Base', '# Model', '# Configuration', '# # 2. DATA', '# In[2]:', '# # 3. TRAIN-TEST SPLIT', '# In[3]:', '# Train-Test Split', '# # 4. MODEL', '# In[4]:', '# LightGBM parameters found by Bayesian optimization', '# # 5. Submission', '# In[5]:']",30
homecredit-morefiles.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# matplotlib', '# In[ ]:', '# Training data', '# In[ ]:', '# Testing data', '# In[ ]:', '# one-hot encoding of categorical variables', '# In[ ]:', '# Align the training and testing data. Keep only columns present in both dataframes', '# Add the target back in', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Replace the anomalous values with nan', '# In[ ]:', '# Drop the target from the training data', '# Copy the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# In[ ]:', '# split the training set', '# In[ ]:', '# Make the mode with the specified regularization parameter', '# Train on the training data', '# In[ ]:', '# In[ ]:', '# Make the mode with the specified regularization parameter', '# Train on the training data', '# In[ ]:', '# Make predictions. Select 2nd column only for the probabiliy of not paying a loan', '# In[ ]:', '# Submission dataframe', '# In[ ]:', '# Save the submission to a csv file', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Make a submission dataframe', '# Save the submission dataframe']",55
homecredit.py,"['# coding: utf-8', '# # Import', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Importing the dataset', '# # Preprocessing', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Destribution of target variable', '# In[ ]:', '# From the discributio it is clear that target class is imbalance', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Missing Values', '# I will create a datafram containing comulns and missing value percentage', '# In[ ]:', '# In[ ]:', '#  ## Treating Categorical Values', '#  First we will check total no of unique label in each column and for column containing <=2 label use LabelEncoding and for >2 OneHotEncoding', '# In[ ]:', '# ### Label Encoding', '# In[ ]:', '# ### One Hot Encoding', '# In[ ]:', '# ### Aligning training and test data', '# In[ ]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# ##  EDA', '# ### OUTLIERS', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ### CORRELATION', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# BINS', '# In[ ]:', '# Group by the bin and calculate averages', '# In[ ]:', '# In[ ]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[ ]:', '# In[ ]:', '# # Feature Engineering', '# ## Polynomial feature', '# In[ ]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', '# In[ ]:', '# Train the polynomial features', '# Transform the features', '# In[ ]:', '# In[ ]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# In[ ]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# ## Domain Knoledge Features', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[ ]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[ ]:', '# Make predictions', '# In[ ]:', '# # Submission dataframe', ""# submit = test[['SK_ID_CURR']]"", ""# submit['TARGET'] = y_pred"", '# submit.head(),submit.shape', '# In[ ]:', '# # Save the submission to a csv file', ""# submit.to_csv('log_reg_baseline.csv', index = False)"", '# ## Random Forest', '# In[ ]:', '# In[ ]:', '# Train on the training data', '# Extract feature importances', '# Make predictions on the test data', '# In[ ]:', '# # Make a submission dataframe', ""# submit = test[['SK_ID_CURR']]"", ""# submit['TARGET'] = predictions"", '# # Save the submission dataframe', ""# submit.to_csv('random_forest_baseline.csv', index = False)"", '# ### Adding Engineered Features', '# In[ ]:', '# Impute the polynomial features', '# Scale the polynomial features', '# In[ ]:', '# Train on the training data', '# Make predictions on the test data', '# In[ ]:', '# Make a submission dataframe', '# Save the submission dataframe']",127
homecreditdefaultrisk-mlnd-nachorovi.py,"['# coding: utf-8', '# # **Sections:**', '# [1. Import libraries & support functions](#import)  ', '# [2. Dataset preparation](#data_import)  ', '# [3. Exploratory Data Analysis (EDA)](#eda)  ', '# \xa0 [3.1 Datasets samples](#eda_ds_samples)  ', '# \xa0 [3.2 Datasets numerical statistics](#eda_ds_desc)  ', '# \xa0 [3.3 Datasets comparisons](#eda_ds_comparison)  ', '# \xa0 [3.4 Target Label](#eda_app_train_target)  ', '# \xa0 [3.5 Amounts comparison](#eda_amts)  ', '# \xa0 [3.6 Distribution of DAYS_BIRTH](#eda_days_birth)  ', '# \xa0 [3.7 Distribution of AMT_CREDIT](#eda_amt_credit)  ', '# \xa0 [3.8 Distribution of DAYS_ID_PUBLISH](#eda_days_id_publish)  ', '# \xa0 [3.9 Distribution of DAYS_REGISTRATION](#eda_days_registration)  ', '# \xa0 [3.10 Distribution of DAYS_EMPLOYED](#eda_days_employed)  ', '# [4. Data Preprocessing](#4)  ', '# [5. Split Data into Training and Validation](#5)  ', '# [6. Hyperparameter Tuning](#6)  ', '# [7. Model Fitting & Prediction](#7)  ', '# Acknowledgements:', '# - Dataset flattening, feature engineering, LGBM parameters: https://www.kaggle.com/shep312/lightgbm-harder-better-slower', '# - Dataset flattening, LGBM model starting point: https://www.kaggle.com/shivamb/homecreditrisk-extensive-eda-baseline-0-772', '# - General ideas: https://www.kaggle.com/ogrellier/good-fun-with-ligthgbm/code', '# - Reducing memory footprint: https://www.kaggle.com/gemartin/load-data-reduce-memory-usage', '# # 1 Import Libraries and create support functions', '# In[ ]:', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSVfile I/O (e.g. pd.read_csv)', '# http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html', '# http://lightgbm.readthedocs.io/en/latest/Python-Intro.html', '# https://github.com/Microsoft/LightGBM', ""# Add evaluation metric to measure the model's performance"", '# Regression metrics available:', '# http://scikit-learn.org/stable/modules/classes.html#regression-metrics', '# http://scikit-learn.org/stable/modules/model_evaluation.html#regression-metrics', '# http://scikit-learn.org/stable/modules/model_evaluation.html#receiver-operating-characteristic-roc', '# http://scikit-learn.org/stable/auto_examples/model_selection/plot_roc.html', '# http://scikit-learn.org/stable/modules/generated/sklearn.metrics.r2_score.html', '# Cannot use sklearn.metrics.accuracy_score as it is a Classification metric', 'from IPython.display import display # Allows the use of display() for DataFrames', '# http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html', '# In[ ]:', '# Support functions', '# In[ ]:', '# This implementation was copied from: https://www.kaggle.com/gemartin/load-data-reduce-memory-usage', '# # 2 Dataset Import', '# In[ ]:', '# List available data files', '# Load all the datasets and reduce the memory usage', '# # 3 Exploratory Data Analysis (EDA)', '# ## 3.1 Datasets samples', '# In[ ]:', '# Show first 5 rows of each dataset', '# ## 3.2 Datasets numerical statistics', '# In[ ]:', '# Show dataset descriptive statistics', '# ## 3.3 Datasets comparisons', '# In[ ]:', ""            np.sum(posc_bal.isnull().sum() > 0), posc_bal.isnull().sum().sum()], # Features don't include SK_ID_PREV and SK_ID_CURR"", ""            np.sum(bureau_bal.isnull().sum() > 0), bureau_bal.isnull().sum().sum()], # Features don't include SK_ID_BUREAU"", ""            np.sum(app_train.isnull().sum() > 0), app_train.isnull().sum().sum()], # Features don't include SK_ID_CURR or TARGET"", ""            np.sum(prev_app.isnull().sum() > 0), prev_app.isnull().sum().sum()], # Features don't include SK_ID_PREV and SK_ID_CURR"", ""            np.sum(inst_pay.isnull().sum() > 0), inst_pay.isnull().sum().sum()], # Features don't include SK_ID_PREV and SK_ID_CURR"", ""            np.sum(cc_bal.isnull().sum() > 0), cc_bal.isnull().sum().sum()], # Features don't include SK_ID_PREV and SK_ID_CURR"", ""            np.sum(app_test.isnull().sum() > 0), app_test.isnull().sum().sum()], # Features don't include SK_ID_CURR"", ""            np.sum(bureau.isnull().sum() > 0), bureau.isnull().sum().sum()], # Features don't include SK_ID_CURR and SK_ID_BUREAU"", '# ## 3.4 Target Label', '# In[ ]:', '# ## 3.5 Amounts comparison', '# In[ ]:', '# Implementation source: https://www.kaggleusercontent.com/kf/4442153/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Df_QZcauc2BVOOmdHRjw1Q.ruvOVG8p44cAqUgN2tZHTPK-y8DwzYtkIoGA39JWR938aOHRdCqQRYjQj1U8AAiXqRfoRScRMjXH_DrMDqBWO9JIBKjTxS7yQyC3ouVc-MuExzzH0lGZdfJT2HJGkjvqSVLm4gYg7ML3r_jmJ3dP--6dmgHGsW1TQ6D04GnZzk6xwZseKGjCzeIYavlz44Qj.WDYyfq5ILj9HsKasnQ37uA/__results__.html#Comparing-summary-statistics-between-defaulters-and-non---defaulters-for-loan-amounts-.', '# ## 3.6 Distribution of DAYS_BIRTH', '# In[ ]:', '# ## 3.7 Distribution of AMT_CREDIT', '# In[ ]:', '# ## 3.8 Distribution of DAYS_ID_PUBLISH', '# In[ ]:', '# ## 3.9 Distribution of DAYS_REGISTRATION', '# In[ ]:', '# ## 3.10 Distribution of DAYS_EMPLOYED', '# In[ ]:', '# # 4 Data Preprocessing', '# In[ ]:', '# Merge training and testing datasets - This will help in two ways:', '# When handling categorical variables it will ensure both datasets end up with the same features', '# When handling missing values, if we use the mean to fill in missing values, they will be more representative', '# data = pd.concat([app_train, app_test], axis=0, sort=False)', ""# ERROR: TypeError: concat() got an unexpected keyword argument 'sort'"", ""# Substract 4 from the features count for the columns 'TARGET', 'SK_ID_CURR', 'is_train', 'is_test' for app_train"", ""# And substract 3 for app_test, as it doesn't have a 'TARGET' column"", '# In[ ]:', '# Handle Categorical variables - Turn categorical variables into numerical features using the one-hot encoding scheme', '# Support function for one-hot encoding', '    # http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html', '# Handle categorical variables', ""# Substract 4 from the features count for the columns 'TARGET', 'SK_ID_CURR', 'is_train', 'is_test'"", '# In[ ]:', '# Keep a copy of the application_train & application_test datasets without merging with the rest of the datasets', '# In[ ]:', '# Merge Point of Sale Cash Balance dataset', ""# Count the number of previous applications for a given 'SK_ID_CURR', and create a new feature"", ""# Remove the 'SK_ID_PREV' column from the dataset as it doesn't add value"", '# Average values for all other features in previous applications', '# In[ ]:', '# Merge Bureau Balance dataset', ""# Count the number of previous applications for a given 'SK_ID_CURR', and create a new feature"", ""# Remove the 'SK_ID_PREV' column from the dataset as it doesn't add value"", '# Average values for all other features in previous applications', '# In[ ]:', '# Merge Previous Applications dataset', ""# Count the number of previous applications for a given 'SK_ID_CURR'"", ""# Remove the 'SK_ID_PREV' column from the dataset as it doesn't add value"", '# Average values for all other features in previous applications', '# In[ ]:', '# Merge Installments Payments dataset', ""# Count the number of installments payments for a given 'SK_ID_CURR', and create a new feature"", ""# Remove the 'SK_ID_PREV' column from the dataset as it doesn't add value"", '# In[ ]:', '# Merge Credit Card Balance dataset', ""# Count the number of previous applications for a given 'SK_ID_CURR', and create a new feature"", ""# Remove the 'SK_ID_PREV' column from the dataset as it doesn't add value"", '# In[ ]:', '# Merge Bureau dataset', ""# Count the number of credits registered in the bureau for a given 'SK_ID_CURR', and create a new feature"", ""# Remove the 'SK_ID_BUREAU' column from the dataset as it doesn't add value"", '# In[ ]:', '# Transforming skewed continuous features', '# I need to handle negative numbers, if x = -1 then it will throw an error; log(0) = Inf', '# In[ ]:', '# In[ ]:', '# Normalizing numerical features', '# Full list of top ten features, discounting EXT_SOURCE_X becuase they are already normalizaed:', ""# ['DAYS_BIRTH', 'AMT_ANNUITY', 'AMT_CREDIT', 'DAYS_ID_PUBLISH', 'pcb_CNT_INSTALMENT_FUTURE', 'DAYS_REGISTRATION', 'DAYS_EMPLOYED']"", ""# numerical = ['DAYS_BIRTH', 'AMT_ANNUITY', 'AMT_CREDIT', 'DAYS_ID_PUBLISH']"", ""# 12 entries in 'AMT_ANNUITY' are NaN - I need to fix that first before Normalizing"", ""# 'pcb_CNT_INSTALMENT_FUTURE' belongs to a different dataset"", ""# numerical = ['DAYS_BIRTH', 'AMT_CREDIT', 'DAYS_ID_PUBLISH']"", '# In[ ]:', ""data_to_use = 'ALL' # 'ALL' or 'data_train_test'"", '# In[ ]:', '# Handle missing data', '# https://pandas.pydata.org/pandas-docs/stable/missing_data.html#filling-with-a-pandasobject', '# https://www.kaggle.com/dansbecker/handling-missing-values', '# http://scikit-learn.org/dev/modules/generated/sklearn.impute.SimpleImputer.html', '# In[ ]:', '# Clean variables that are no longer needed', '# Not used yet: bureau_bal_count, bureau_bal_avg', '# In[ ]:', '# Separate the data into the original test and training datasets', ""# Remove columns 'TARGET', 'SK_ID_CURR', 'is_train', 'is_test' as they are not features"", ""# Separate the 'target label' from the training dataset"", '# To be used when preparing the submission', '# # 5 Split Data into Training and Validation', '# In[ ]:', ""# Split 'features' and 'target label' data into training and validation data using train_test_split"", '# http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html', '# In[ ]:', '# Run GridSearchCV or fully train an estimator', ""# 'grid_search_RFR', 'grid_search_LGBM', 'train_estimators', 'train_estimator_LGBM', 'train_estimator_RFR', 'LGBM_KFold'"", '# # 6 Hyperparameter Tuning', '# In[ ]:', '# Run GridSearchCV on LGBM', '          num_iteration=5000, # num_boost_round=5000,', '          # early_stopping_rounds=100', '          # ValueError: For early stopping, at least one dataset and eval metric is required for evaluation', ""          'boosting_type': ['gbdt'], # 'dart'"", ""          'min_data_in_leaf': [20], # [15, 20, 25],"", ""          'max_depth': [7], # [6, 7, 8],"", '    # Create a scorer to measure hyperparameters performance', '    # Create GridSearchCV grid object', '    # Fit the GridSearchCV grid object with the reduced training dataset and find the best hyperparameters', '    grid_fit_time = (end - start) / 60 # Ellapsed time in minutes', '    # Get the best estimator', '    # Get the best score', '    # Get the best parameters', '    # Make predictions with unoptimized estimator on the validation set', '    # Predict with the best estimator on the validation set', '# In[ ]:', '# Run GridSearchCV', '    # Initialize the Estimator (Learner or Regression Model)', '    # Determine which Parameters to tune', ""        'max_features': [0.2], # [0.18, 0.2, 0.23]"", ""        'min_samples_split': [2], # [2, 3]"", '    # Create a scorer to measure hyperparameters performance', '    # Create GridSearchCV grid object', '    # Fit the GridSearchCV grid object with the reduced training dataset and find the best hyperparameters', '    grid_fit_time = (end - start) / 60 # Ellapsed time in minutes', '    # Get the best estimator', '    # Get the best score', '    # Get the best parameters', '    # Make predictions with unoptimized estimator on the validation set', '    # Predict with the best estimator on the validation set', '    # Predict with the best estimator on the testing set', '# # 7 Model Fitting & Prediction', '# In[ ]:', '# Train estimator LGBM', ""    data_split = 'kfold' # Possible values: 'kfold' or 'train_test_split'"", '        # Using split merged datasets with train_test_split', '        # Using KFolds to split the merged dataset for cross-validation', '# In[ ]:', '# In[ ]:', '# Parameters from Aguiar https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features/code', '# Train estimator LGBM with KFold Cross-validation', '        # LightGBM parameters found by Bayesian optimization', '# In[ ]:', '# Train estimator LGBM with KFold Cross-validation', '    # Display feature importance', '# In[ ]:', '# Train estimator LGBM with KFold Cross-validation', '    # Prepare submission file', '# In[ ]:', '# Train estimator RandonForrestRegressor', '    # Initialize the Estimator (Learner or Regression Model) with the best hyperparameters', '    # Alternative: n_estimators=135, max_features=0.2, min_samples_split=2, min_samples_leaf=62', ""    # Alternative2: criterion='mae', # default='mse', VERY SLOW"", '    estimator = RandomForestRegressor(n_estimators=125, # default=10', ""                                      max_features=0.2, # default='auto'"", '                                      min_samples_split=2, # default=2', '                                      min_samples_leaf=75, # default=1', '                                      n_jobs=-1, # default=1', '                                      random_state=42, # default=None', '                                      verbose=0) # default=0', '    # Fit the estimator with the training dataset', '    # Predict with the validation dataset', '    # Determine the feature importance', '    # TODO: GRAPH THE FEATURE IMPORTANCE', '# In[ ]:', ""    # Predict using the 'test' dataset for submission"", '    # Prepare prediction for submission', '    # Replace any negative number with zero, required for https://www.kaggle.com/ogrellier/good-fun-with-ligthgbm/code', '    # pred_test[pred_test < 0] = 0', '# In[ ]:']",232
homecreditdefaultrisk_simpleblend_0_798.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.']",8
home_credit_default_risk_python.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '    # Print some summary information', '    # Return the dataframe with missing information', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# one-hot encoding of categorical variables', '# Align the training and testing data, keep only columns present in both dataframes', '# Add target back in to the data', '# Find correlations with the target and sort', '# Display correlations', '# Find the correlation of the positive days since birth and target', '# matplotlib and seaborn for plotting', '# Set the style of plots', '# Plot the distribution of ages in years', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', '# Age information into a separate dataframe', '# Bin the age data', '# Group by the bin and calculate averages', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# Extract the EXT_SOURCE variables and show correlations', '# Heatmap of correlations', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# Copy the data for plotting', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# Function to calculate correlation coefficient between two columns', '# Create the pairgrid object', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', '# Train the polynomial features', '# Transform the features', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# Drop the target from the training data', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# Make the model with the specified regularization parameter', '# Train on the training data', '# Make predictions', '# Make sure to select the second column only', '# Submission dataframe', '# Save the submission to a csv file']",74
home_credit_default_with_lgbm (1).py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Below ohe conversion is looking for 2d array. Need to convert pandas series to 2d array', '# Seggregate the train and test data']",9
home_credit_default_with_lgbm.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Below ohe conversion is looking for 2d array. Need to convert pandas series to 2d array', '# Seggregate the train and test data']",9
home_credit_submission.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '           # mx.fit_transform(numeric),', '       # )], axis=1)', '# Any results you write to the current directory are saved as output.   ']",10
home_rf_et_xgb_cb_stack_oof1_lb_0_789.py,"['SEED = 7    # CR7 always..', '    # # Add new features', '    # Amount loaned relative to salary', '    # Number of overall payments (I think!)', '    # Social features', '    # A lot of the continuous days variables have integers as missing value indicators.', '    # # Aggregate and merge supplementary datasets', '    # Previous applications', '    # Average the rest of the previous app data', '    # Previous app categorical features', '    # Credit card data - numerical features', '    # Credit card data - categorical features', '    # Credit bureau data - numerical features', '    # Bureau balance data', '    # Pos cash data - weight values by recency when averaging', '    # Unweighted aggregations of numeric features', '    # Pos cash data data - categorical features', '    # Installments data', '    # Add more value counts', '    # Label encode categoricals', '# Merge the datasets into a single one for training', '# Separate metadata', '# Process the data set.', '# Capture other categorical features not as object data types:', '# Re-separate into train and test', '# from https://www.kaggle.com/mmueller/stacking-starter?scriptVersionId=390867/code', '        oof_train[test_index] = clf.predict(x_te)[:,1]  # or [:,0]', '        oof_test_skf[i, :] = clf.predict(x_test)[:,1]  # or [:,0]', '        oof_train[test_index] = clf.predict(x_te)  # or [:,0]', '        oof_test_skf[i, :] = clf.predict(x_test)  # or [:,0]']",30
hybrid-jeepy-and-lgb-ii.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '    # Compute target mean ', '    # Compute smoothing', '    # Apply average function to all target data', '    # The bigger the count the less full_avg is taken into account', '    # Apply averages to trn and tst series', '    # pd.merge does not keep the index so restore it', '    # pd.merge does not keep the index so restore it', '# In[3]:', '# In[4]:', ""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:']",29
hybrid-jeepy-and-lgb.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '    # Compute target mean ', '    # Compute smoothing', '    # Apply average function to all target data', '    # The bigger the count the less full_avg is taken into account', '    # Apply averages to trn and tst series', '    # pd.merge does not keep the index so restore it', '    # pd.merge does not keep the index so restore it', '# In[3]:', '# In[4]:', ""# buro_full.columns = ['buro_' + f_ for f_ in buro_full.columns]"", '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:']",29
hyperparameter_tuning_with_caret.R,"['# Load application data (train, test)']",1
inefficient-feature-engineering.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '    # Import bureau and bureau_balance', '    # Search for categorical variables', '    # Search for numerical variables', '    # One hot encoding of balance categorical variables', '    # Aggregate all variables', '    # Groupby SK_ID_BUREAU and aggregate', ""    # Rename columns into 'column_name' + aggregation"", '    # Complete balance preprocessing', '    # Search for categorical variables', '    # Search for numerical variables', '    # One hot encoding of bureau categorical variables', '    # Merge balance and bureau dataframes', '    # Drop SK_ID_BUREAU as it is redundant now', '    # Aggregate variables', '    # Groupby SK_ID_CURR and aggregate accordingly', '    # Rename column names', '    # bureau and balance preprocessing complete', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# # Remove Collinear Variables #', '# In[ ]:', '# Remove Collinear Variables', '# Threshold for removing correlated variables', '# Absolute value correlation matrix', '# In[ ]:', '# Upper triangle of correlations', '# In[ ]:', '# Select columns with correlations above threshold', '# In[ ]:', '# # Remove Missing Values #', '# In[ ]:', '# Train missing values (in percent)', '# In[ ]:', '# Test missing values (in percent)', '# In[ ]:', '# Identify missing values above threshold', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",50
intro-home-credit-default-risk.py,"['# coding: utf-8', '# This is my introduction on the Home Credit Default Risk problem.  I first spend time reviewing the variables and examining the data in the training data.  Next, I move on to incorporating data from the other data files we have been given.  Then I begin paring down the data to the data I will use for modeling.', '# # Introduction', '# In[ ]:', '# imports', '# Suppress warnings ', '# In[ ]:', '# list of data files available', '# In[ ]:', '# training data', '# In[ ]:', '# testing data', '# In[ ]:', '# review target variable', '# In[ ]:', '# summary of training data', '# In[ ]:', '# join training and testing data sets so we keep the same number of features in both', ""# shape of combined dataset should be sum of rows in training and testing (307511 + 48744 = 356255) and 122 columns (testing data doesn't have target)"", '# In[ ]:', '# missing values', '# This is a lot of missing values to deal with.  A number of variables are missing over two-thirds of the data.', '# In[ ]:', '# types of data', '# In[ ]:', '# categorical data - how many different categories for each variable', '# In[ ]:', '# In[ ]:', '# use label encoding for categorical variables with only two categories', '# Note that four columns had two categories, but only three were label encoded - EMERGENCYSTATE_MODE was not.', '# This is because the three label encoded did not have any missing values, while EMERGENCYSTATE_MODE was missing values, so it really has three categories - Yes, No, and missing.', '# In[ ]:', '# use one-hot encoding for remaining categorical variables', '# Note that using one-hot encoding, we went from 122 variables to 243 variables - a significant increase.  At a later point, we will probably want to remove those that are not relevant.', '# # Explore the Data', ""# For the non-indicator variables, let's look at individual variables for outliers or other interesting information."", '# ## CNT_CHILDREN', '# In[ ]:', ""# Most applicants have no children or only one child.  However, the maximum is 20, which seems high.  Let's look closer at this data."", '# In[ ]:', '# In[ ]:', '# plot CNT_CHILDREN against the TARGET to better understand the data', ""# It appears that if CNT_CHILDREN is greater than six, the probability of default is higher.  From above, we know that on average the default rate is about 8.07%.  Let's look further at CNT_CHILDREN."", '# In[ ]:', '# In[ ]:', '# create a flag for outliers in the CNT_CHILDREN column, and then replace these values with nan', '# In[ ]:', '# review CNT_CHILDREN after our modifications', '# In[ ]:', '# ## AMT_INCOME_TOTAL', '# In[ ]:', '# In[ ]:', '# This looks to be close to what we would expect.  There are relatively fewer high incomes, and the mean is greater than the median.', '# ## AMT_CREDIT', '# In[ ]:', '# In[ ]:', '# This distribution is definitely skewed, but looks like we would expect for a distribution of credit.', '# ## AMT_ANNUITY', '# In[ ]:', '# In[ ]:', '# There do not appear to be any outliers here, though the distribution is definitely skewed.', '# ## AMT_GOODS_PRICE', '# In[ ]:', '# In[ ]:', '# Similar to the above, there do not appear to be any outliers here, though the distribution is also definitely skewed.', '# ## REGION_POPULATION_RELATIVE', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# plot REGION_POPULATION_RELATIVE against the TARGET to better understand the data', '# The larger values do not appear to be correlated with higher-than-average or lower-than-average default rates.  For now, I will leave these as is.', ""# ### Let's review the correlation matrix for the variables examined so far:"", '# In[ ]:', '# None of the above variables are significantly correlated with TARGET.  However, AMT_CREDIT, AMT_ANNUITY, and AMT_GOODS_PRICE are all highly correlated with each other, especially AMT_CREDIT and AMT_GOODS_PRICE.  It appears that we may need to drop at least one of these two variables.', '# ## DAYS_BIRTH', '# In[ ]:', '# In[ ]:', '# this variable appears to be equal to (date of birth) minus (date of application), which is producing negative numbers', '# if we look again at the data transformed into positive numbers and into years (by dividing by -365.25) we get the following', '# This distribution of ages at application date seems reasonable - no small children and reasonable max age.', '# In[ ]:', '# ## DAYS_EMPLOYED', '# In[ ]:', '# In[ ]:', '# this variable appears to be equal to (date of employment) minus (date of application), which is producing negative numbers', '# if we look again at the data transformed into positive numbers and into years (by dividing by -365.25) we get the following', '# In[ ]:', ""# it appears that a dummy value was used, possibly for people who didn't have a date of employment to enter into the application"", '# this group had 365243 in the data, which is approximately -1000 years', '# we should also look at the other side of the distribution - 49 years of employment is a long time', '# In[ ]:', '# In[ ]:', '# create a flag for outliers in the DAYS_EMPLOYED column, and then replace these values with nan', '# In[ ]:', '# review DAYS_EMPLOYED after our modifications', '# In[ ]:', '# While the distribution is skewed, it is now what we expect - long-tenure employees are rare and short-tenure employees are much more common.', '# ## DAYS_REGISTRATION', '# In[ ]:', '# In[ ]:', '# this variable appears to be equal to (date of registration) minus (date of application), which is producing negative numbers', '# if we look again at the data transformed into positive numbers and into years (by dividing by 365.25) we get the following', '# In[ ]:', '# The above looks as expected.', '# ## DAYS_ID_PUBLISH', '# In[ ]:', '# In[ ]:', '# convert to positive years again', '# In[ ]:', ""# I don't see any outliers, although the shape of this distribution is different from the others we have seen above."", ""# ### Let's review the correlation matrix for the additional variables examined so far:"", '# In[ ]:', '# DAYS_BIRTH appears to be the most correlated with TARGET so far.', '# ## OWN_CAR_AGE', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# it seems that there are some outliers on the car age, as the max is 91', ""# let's get a better look at the values in the tail and whether these have a higher probability of default than average"", '# In[ ]:', '# In[ ]:', '# create a flag for outliers in the OWN_CAR_AGE column, and then replace these values with nan', '# In[ ]:', '# review OWN_CAR_AGE after our modifications', '# In[ ]:', '# now this data should look more like we expect', '# ## CNT_FAM_MEMBERS', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# it seems that there are some outliers on the count of family members, as the max is 21', ""# let's look at the 99th percentile"", '# In[ ]:', ""# let's get a better look at the values in the tail and whether these have a higher probability of default than average"", ""# From the above, it appears that the probability of default for our outliers is 13.23%, which far exceeds that of the entire training data of 8.07%.  Let's remove these as outliers and keep track of which records are outliers."", '# In[ ]:', '# create a flag for outliers in the CNT_FAM_MEMBERS column, and then replace these values with nan', '# In[ ]:', '# review CNT_FAM_MEMBERS after our modifications', '# In[ ]:', '# ## REGION_RATING_CLIENT', '# In[ ]:', '# In[ ]:', '# ## REGION_RATING_CLIENT_W_CITY', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# how many are equal to -1 in the dataset?', '# In[ ]:', '# this appears to be a data entry error', ""# let's set the value of -1 equal to 1 instead"", '# In[ ]:', '# ## HOUR_APPR_PROCESS_START', '# In[ ]:', '# In[ ]:', ""# ### Let's review the correlation matrix for the additional variables examined so far:"", '# In[ ]:', '# REGION_RATING_CLIENT and REGION_RATING_CLIENT_W_CITY are the most correlated with our TARGET, though these two variables are highly correlated with each other.  We will probably want to include only one of these two.', '# ## EXT_SOURCE_1', '# In[ ]:', '# In[ ]:', '# this data looks pretty good from the above, check the histogram', '# ## EXT_SOURCE_2', '# In[ ]:', '# In[ ]:', '# this data also looks pretty good from the above, check the histogram', '# ## EXT_SOURCE_3', '# In[ ]:', '# In[ ]:', ""# this doesn't appear to have issues either, check the histogram"", ""# These three external sources variables appear similar but have different distributions.  Let's look at their correlations with each other and with our TARGET."", '# In[ ]:', '# These three are all strongly correlated with our TARGET, and they are not too highly correlated with each other.  These look like important variables for later.', '# ## OBS_30_CNT_SOCIAL_CIRCLE', '# In[ ]:', '# In[ ]:', '# there appear to be some outliers here we may need to deal with (max = 354??)', '# In[ ]:', ""# let's look more at these outliers and whether these have a higher probability of default than average"", '# In[ ]:', '# create a flag for outliers in the OBS_30_CNT_SOCIAL_CIRCLE column, and then replace these values with nan', '# In[ ]:', '# review OBS_30_CNT_SOCIAL_CIRCLE after our modifications', '# In[ ]:', '# ## DEF_30_CNT_SOCIAL_CIRCLE', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## OBS_60_CNT_SOCIAL_CIRCLE', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## DEF_60_CNT_SOCIAL_CIRCLE', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# Let's look at the correlations between these social variables and our TARGET."", '# In[ ]:', '# The DEF counts are highly correlated with each other, but none of these are very correlated with our TARGET.', '# ## DAYS_LAST_PHONE_CHANGE', '# In[ ]:', '# In[ ]:', ""# let's transform this into positive years, as we did with the other DAYS_ variables above"", '# In[ ]:', '# I am going to treat all of these credit bureau variables similarly.  I am going to remove the outliers but create a flag for the outliers.  As the period of evaluation increases (from hour to day to week, etc.), the cutoff for the outliers will also increase.', '# ## AMT_REQ_CREDIT_BUREAU_HOUR', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## AMT_REQ_CREDIT_BUREAU_DAY', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## AMT_REQ_CREDIT_BUREAU_WEEK', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## AMT_REQ_CREDIT_BUREAU_MON', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## AMT_REQ_CREDIT_BUREAU_QRT', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## AMT_REQ_CREDIT_BUREAU_YEAR', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# Let's look at the correlations of this last group of variables."", '# In[ ]:', ""# DAYS_LAST_PHONE_CHANGE is more correlated with our TARGET, while the credit bureau variables don't seem to be correlated with TARGET much at all."", '# # Additional Features to Add from the Training Data', '# Now that we have reviewed the initial data provided, there are a few more variables we can create from the existing data.  We can later determine if any of these interactions can add to our model.', '# ', '# New variables to try:', '# * EMPLOY_AGE = DAYS_EMPLOYED / DAYS_BIRTH: how long was the applicant employed relative to how old the applicant was - employed for a larger portion may indicate reliability', '# * INCOME_AGE = AMT_INCOME_TOTAL / DAYS_BIRTH: how large is the income relative to how old the applicant was - may indicate potential for income to rise and may repayment easier in the future', '# * CREDIT_AGE = AMT_CREDIT / DAYS_BIRTH: how much credit relative to how old the applicant was - may indicate sources of other financial stress', '# * CREDIT_INCOME = AMT_CREDIT / AMT_INCOME_TOTAL: how much credit relative to total income - too much credit may be too risky', '# * ANNUITY_INCOME = AMT_ANNUITY / AMT_INCOME_TOTAL: how large are the loan payments relative to total income - too large of payments may not be sustainable', '# * ANNUITY_CREDIT = AMT_ANNUITY / AMT_CREDIT: how large are the loan payments relative to the credit amount (how long will it take to pay it back, without accounting for different interest rates)', '# ', '# These may or may not be good predictors, but these were the ones I thought could be useful in the model.', '# In[ ]:', '# create new variables', '# In[ ]:', ""# let's look at the correlations of the new variables we created along with TARGET"", '# In[ ]:', '# EMPLOY_AGE seems to be most correlated with TARGET of our new variables', '# we can plot EMPLOY_AGE relative to TARGET using KDE', '# # Adding Features from the Other Data Files', '# In this section, I will begin adding to my data, incorporating the information from the other data files we were provided.', '# In[ ]:', '# the first file we will investigate is bureau', '# In[ ]:', '# In[ ]:', '# I will need to determine how to incorporate each of these items into the data.  Generally, for time measurements (numbers of days since something), I will want to use the max or min.  For other items, like amounts, I will want to use the mean instead.  I may also want to use count or sum, depending on the item.', '# ', '# To get this data into the main dataset file, I will need to group the data in the new file by SK_ID_CURR.  I will then apply the max or mean (or other function) to the data and merge this into the dataset file.', '# ## COUNT', '# In[ ]:', '# the first item to look at is how many records are in this for each applicant', '# In[ ]:', '# ## DAYS_CREDIT', '# In[ ]:', '# review the data, and divide by -365.25 to turn this into positive years', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# merge with the dataset', '# In[ ]:', '# what is the correlation of our new variable with TARGET', '# In[ ]:', '# evaluate the new variable with a KDE plot', '# ## CREDIT_DAY_OVERDUE', '# In[ ]:', '# In[ ]:', '# this looks like virtually all are zero, but there are some outliers', '# In[ ]:', ""# let's take the max of this variable"", '# In[ ]:', '# In[ ]:', '# most of the data in this column is zero', '# how many non-zero items exist?', '# In[ ]:', ""# let's turn this into a flag, since 99% of the data is zero"", '# In[ ]:', '# drop the max variable and merge in the flag', '# In[ ]:', '# ## DAYS_CREDIT_ENDDATE', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's take the max of this variable"", '# In[ ]:', '# it appears that we have a few outliers around -41875', '# In[ ]:', '# merge both our max variable and outlier flag into the dataset', '# In[ ]:', '# ## DAYS_ENDDATE_FACT', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's take the average of this variable"", '# In[ ]:', '# In[ ]:', '# it appears that we have a few outliers around -8000 days that we can handle', '# In[ ]:', '# merge both our mean variable and outlier flag into the dataset', '# In[ ]:', '# In[ ]:', '# evaluate the new variable with a KDE plot', '# ## AMT_CREDIT_MAX_OVERDUE', '# In[ ]:', '# In[ ]:', ""# let's take the max of this variable"", '# In[ ]:', ""# I'm also curious on the average of this variable"", '# In[ ]:', ""# I'm not sure which of these two variables may work better in this case, so let's bring them both into the dataset for now"", '# In[ ]:', '# These two are very similarly correlated with our TARGET.  For now, we will keep both of these, but we may remove one later on.', '# ## CNT_CREDIT_PROLONG', '# In[ ]:', '# In[ ]:', ""# since these are counts, let's sum this variable"", '# In[ ]:', '# merge into our dataset', '# In[ ]:', '# ## AMT_CREDIT_SUM', '# In[ ]:', '# In[ ]:', ""# since these are amounts, let's average this variable"", '# In[ ]:', '# merge into our dataset', '# In[ ]:', '# ## AMT_CREDIT_SUM_DEBT', '# In[ ]:', '# In[ ]:', ""# since these are amounts, let's average this variable"", '# In[ ]:', '# merge into our dataset and look at the correlation', '# ## AMT_CREDIT_SUM_LIMIT', '# In[ ]:', '# In[ ]:', ""# since these are amounts, let's average this variable"", '# In[ ]:', '# merge into our dataset and look at the correlation', '# ## AMT_CREDIT_SUM_OVERDUE', '# In[ ]:', '# In[ ]:', ""# since these are amounts, let's average this variable"", '# In[ ]:', '# merge into our dataset and look at the correlation', '# ## DAYS_CREDIT_UPDATE', '# In[ ]:', '# divide by -365.25 to turn this into positive years', '# In[ ]:', ""# since this is a days variable, let's use max"", '# In[ ]:', '# merge into our dataset and look at the correlation', '# ## AMT_ANNUITY', '# In[ ]:', '# In[ ]:', ""# since these are amounts, let's average this variable"", '# In[ ]:', '# merge into our dataset and look at the correlation', '# ## Categoricals in Bureau data', '# ', ""# Now let's look at the categorical variables that are left in this data.  There are three of them that we need to deal with."", '# In[ ]:', '# In[ ]:', ""# let's use one-hot encoding on these variables"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# the next file we will investigate is bureau_balance', '# ## MONTHS_BALANCE', '# In[ ]:', '# this appears to be the number of months of balance relative to the application date', ""# let's start with the count"", '# In[ ]:', ""# let's also look at the mean"", '# In[ ]:', '# In[ ]:', ""# now let's get our categoricals"", '# In[ ]:', '# In[ ]:', ""# now let's merge the MONTHS_BAL with our categoricals by SK_ID_BUREAU, then merge with bureau to add in SK_ID_CURR"", '# Now we will take the mean when grouping by SK_ID_CURR for each of the above variables and then add them to our dataset.  There are more possibilities here (min, max, count, sum, etc.) but we will just do mean for now.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's free up some memory by deleting some of the dataframes we are done with"", '# In[ ]:', '# the next file we will investigate is credit_card_balance', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# now let's deal with our one categorical variable, NAME_CONTRACT_STATUS"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Now we have all of this data by previous ID, but we need to aggregate this on SK_ID_CURR.  We will repeat what we did above for the bureau balance data, averaging these variables for each applicant.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's free up some memory by deleting some of the dataframes we are done with"", '# In[ ]:', '# the next file we will investigate is installments_payments', ""# For this file, I think we want to look at creating a couple of additional variables.  For the dates of payments, I would like to see the difference between the due date and the actual payment date.  For the amounts of payments, I would like to see the difference between the amount owed and the actual amount paid.  So let's create a few new variables."", '# In[ ]:', '# create the additional variables', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# capture the mean, max, and min for DAYS_DIFF', '# In[ ]:', '# capture the mean, max, and min for AMT_DIFF', '# In[ ]:', '# Now we have all of this data by previous ID, but we need to aggregate this on SK_ID_CURR.  We will repeat what we did above for the credit data.  For most cases, I will use the average to combine.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's free up some memory by deleting some of the dataframes we are done with"", '# In[ ]:', '# the next file we will investigate is POS_CASH_balance', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# now let's deal with our one categorical variable, NAME_CONTRACT_STATUS, in this cash file"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# let's free up some memory by deleting some of the dataframes we are done with"", '# In[ ]:', '# # Feature Selection', '# In this next section, I will work on reducing the number of variables.  I will do this by getting rid of collinear variables, variables with too many missing values, and feature importance.  After completing these steps, we will have a dataset better suited for modeling.', '# In[ ]:', ""# let's review our dataset data types"", '# In[ ]:', '# it looks like we have a couple of objects still in our data?', '# In[ ]:', '# our outlier variables appear to still be in the format of True or False, so we need to fix this before continuing.', '# In[ ]:', '# check again', '# In[ ]:', '# ## Start with collinear variables', '# In[ ]:', ""# because the dataset file is so large, let's use a subsample of the data to evaluate the collinear variables"", '# In[ ]:', ""# let's first make the correlation matrix"", '# In[ ]:', '# In[ ]:', ""# let's drop any columns with correlations above 0.9"", '# In[ ]:', '# now we can drop these columns from the full dataset file', '# In[ ]:', ""# delete the dataframes we don't need anymore"", '# ## Next look at missing values', '# In[ ]:', '# missing values (in percent)', '# In[ ]:', ""# let's remove columns with more than 75% missing data"", '# In[ ]:', ""# let's drop these columns"", '# Next we will look at feature importance.  But before we do so, we will need to split our data back into test and train.', '# In[ ]:', '# separate training and testing data for modeling', '# In[ ]:', '# separate training data', '# In[ ]:', '# ## Feature Importance', '# To evaluate feature importance, I will use the LightGBM model.  I will run the model twice to capture the feature importances, and then average the results.', '# In[ ]:', '# create a dataframe of all zeroes to hold feature importance calculations', '# In[ ]:', '# create the model to use', '# for the parameters, objective is binary (as this is either default or no default that we are predicting),', '# boosting type is gradient-based one-side sampling (larger gradients contribute more to information gain so this keeps those ', '# with larger gradients and only randomly drops those with smaller), class weight is balanced', '# (automatically adjust the weights to be inversely proportional to the frequencies)', '# In[ ]:', '# we will fit the model twice and record the feature importances each time', '# note that we will use auc (area under the curve) for evaluation, as on this is what our model will be judged', '# In[ ]:', '# review features with most importance', '# In[ ]:', '# review features with zero importance', '# In[ ]:', ""# let's drop the features with zero importance"", '# In[ ]:', '# # Modeling', ""# Let's begin the modeling section now.  We will use LightGBM with cross validation."", '# In[ ]:', '# dataframe to hold predictions', '# dataframe for out of fold validation predictions', '# lists for validation and training scores', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# iterate through each of the five folds', '    # create the model, similar to the one used above for feature importances', '    # train the model', '    # record the best iteration', '    # test predictions', '    # out of fold predictions', '    # record scores', '    # Clean up memory', '# In[ ]:', '# scores', '# In[ ]:', '# In[ ]:', '# make submission file']",617
intro-to-model-tuning-grid-and-random-search.py,"['# coding: utf-8', '# # Introduction: Hyperparameter Tuning using Grid and Random Search', '# ', '# In this notebook, we will explore two methods for hyperparameter tuning a machine learning model. [In contrast](https://machinelearningmastery.com/difference-between-a-parameter-and-a-hyperparameter/) to model __parameters__ which are learned during training, model __hyperparameters__ are set by the data scientist ahead of training and control implementation aspects of the model. The weights learned during training of a linear regression model are parameters while the number of trees in a random forest is a model hyperparameter because this is set by the data scientist. Hyperparameters can be thought of as model settings. These settings need to be tuned for each problem because the best model hyperparameters for one particular dataset will __not be__ the best across all datasets. The process of [hyperparameter tuning (also called hyperparameter optimization)](https://en.wikipedia.org/wiki/Hyperparameter_optimization) means finding the combination of hyperparameter values for a machine learning model that performs the best - as measured on a validation dataset - for a problem. ', '# ', ""# (__Quick Note__: a lot of data scientists use the terms _parameters_ and _hyperparameters_ interchangeably to refer to the model settings. While this is technically incorrect, it's pretty common practice and it's usually possible to tell when they are referring to parameters learned during training versus hyperparameters. I'll try to stick to using model hyperparameters or model settings and I'll  point out when I'm talking about a parameter that is learned during training. If you're still confused, [this article](https://machinelearningmastery.com/difference-between-a-parameter-and-a-hyperparameter/) may help you out!)"", '# ', '# __Additional Notebooks__ ', '# ', ""# If you haven't checked out my other work on this problem, here is a complete list of the notebooks I have completed so far:"", '# ', '# * [A Gentle Introduction](https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction)', '# * [Manual Feature Engineering Part One](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering)', '# * [Manual Feature Engineering Part Two](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering-p2)', '# * [Introduction to Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/automated-feature-engineering-basics)', '# * [Advanced Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/tuning-automated-feature-engineering-exploratory)', '# * [Feature Selection](https://www.kaggle.com/willkoehrsen/introduction-to-feature-selection)', '# * [Intro to Model Tuning: Grid and Random Search](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search)', '# * [Automated Model Tuning](https://www.kaggle.com/willkoehrsen/automated-model-tuning)', '# ', '# There are several approaches to hyperparameter tuning', '# ', '# 1. __Manual__: select hyperparameters based on intuition/experience/guessing, train the model with the hyperparameters, and score on the validation data. Repeat process until you run out of patience or are satisfied with the results. ', '# 2. __Grid Search__: set up a grid of hyperparameter values and for each combination, train a model and score on the validation data. In this approach, every single combination of hyperparameters values is tried which can be very inefficient!', '# 3. __Random search__: set up a grid of hyperparameter values and select _random_ combinations to train the model and score. The number of search iterations is set based on time/resources. ', '# 4. __Automated Hyperparameter Tuning__: use methods such as gradient descent, Bayesian Optimization, or evolutionary algorithms to conduct a guided search for the best hyperparameters.', '# ', '# (This [Wikipedia Article](https://en.wikipedia.org/wiki/Hyperparameter_optimization) provides a good high-level overview of tuning options with links for more details)', '# ', '# In this notebook, we will implement approaches 2 and 3 for a Gradient Boosting Machine Learning Model. In a future notebook, we will implement automated hyperparameter tuning using Bayesian optimization, specifically the Hyperopt library. If you want to get an idea of how automated hyperparameter tuning is done, check out [this article](https://towardsdatascience.com/automated-machine-learning-hyperparameter-tuning-in-python-dfda59b72f8a). ', '# ', '# ## Model: Gradient Boosting Machine ', '# ', '# The [Gradient Boosting Machine (GBM)](https://machinelearningmastery.com/gentle-introduction-gradient-boosting-algorithm-machine-learning/) has recently emerged as one of the top machine learning models. The GBM is extremely effective on structured data - where the information is in rows and columns - and medium sized datasets - where there are at most a few million observations. We will focus on this model because it is currently the top performing method for most competitions on Kaggle and because the performance is highly dependent on the hyperparameter choices. The basics you need to know about the GBM are that it is an ensemble method that works by training many individual learners, almost always decision trees. However, unlike in a random forest where the trees are trained in __parallel__, in a GBM, the trees are trained __sequentially__ with each tree learning from the mistakes of the previous ones. The hundreds or thousands of weak learners are combined to make a single strong ensemble learner with the contributions of each individual learned during training using Gradient Descent (the weights of the individual trees would therefore be a model _parameter_). ', '# ', '# The GBM [has many hyperparameters to tune](http://lightgbm.readthedocs.io/en/latest/Parameters.html) that control both the overall ensemble (such as the learning rate) and the individual decision trees (such as the number of leaves in the tree or the maximum depth of the tree). It is difficult to know which combination of hyperparameters will work best based only on theory because there are complex interactions between hyperparameters. Hence the need for hyperparameter tuning: the only way to find the optimal hyperparameter values is to try many different combinations on a dataset!', '# ', '# We will use the implementation of the Gradient Boosting Machine in the [LightGBM library](http://lightgbm.readthedocs.io/en/latest/). This is a much faster (and some say more accurate) implementation than that available in Scikit-Learn.', '# ', '# For more details of the Gradient Boosting Machine (GBM), check out this [high-level blog post](http://blog.kaggle.com/2017/01/23/a-kaggle-master-explains-gradient-boosting/), or this [in depth technical article.](https://brage.bibsys.no/xmlui/bitstream/handle/11250/2433761/16128_FULLTEXT.pdf) ', '# ', '# ### Getting Started', '# ', ""# With the necessary background out of the way, let's get started. For this notebook, we will work with a subset of the data consisting of 10000 rows. Hyperparameter tuning is extremely computationally expensive and working with the full dataset in a Kaggle Kernel would not be feasible for more than a few search iterations. However, the same ideas that we will implement here can be applied to the full dataset and while this notebook is specifically aimed at the GBM, the methods can be applied for any machine learning model. "", '# ', '# To ""test"" the tuning results, we will save some of the training data, 6000 rows, as a separate testing set. When we do hyperparameter tuning, it\'s crucial to __not tune the hyperparameters on the testing data__. We can only use the testing data __a single time__ when we evaluate the final model that has been tuned on the validation data. To actually test our methods from this notebook, we would need to train the best model on all of the training data, make predictions on the actual testing data, and then submit our answers to the competition. ', '# In[ ]:', '# Data manipulation', '# Modeling', '# Splitting data', '# Below we read in the data and separate into a training set of 10000 observations and a ""testing set"" of 6000 observations. After creating the testing set, we cannot do any hyperparameter tuning with it! ', '# In[ ]:', '# Sample 16000 rows (10000 for training, 6000 for testing)', '# Only numeric features', '# Extract the labels', '# Split into training and testing data', '# We will also use only the numeric features to reduce the number of dimensions which will help speed up the hyperparameter search. Again, this is something we would not want to do on a real problem, but for demonstration purposes, it will allow us to see the concepts in practice (rather than waiting days/months for the search to finish).', '# In[ ]:', '# # Cross Validation', '# ', '# To evaluate each combination of hyperparameter values, we need to score them on a validation set. The hyperparameters __can not be tuned on the testing data__. We can only use the testing data __once__ when we evaluate the final model. The testing data is meant to serve as an estimate of the model performance when deployed on real data, and therefore we do not want to optimize our model to the testing data because that will not give us a fair estimate of the actual performance. The correct approach is therefore to use a validation set. However, instead of splitting the valuable training data into a separate training and validation set, we use [KFold cross validation](https://www.youtube.com/watch?v=TIgfjmp-4BA). In addition to preserving training data, this should give us a better estimate of generalization performance on the test set than using a single validation set (since then we are probably overfitting to that validation set). The performance of each set of hyperparameters is determined by Receiver Operating Characteristic Area Under the Curve (ROC AUC) from the cross-validation.', '# ', '# In this example, we will use 5-fold cross validation which means training and testing the model with each set of hyperparameter values 5 times to assess performance. Part of the reason why hyperparameter tuning is so time-consuming is because of the use of cross validation. If we have a [large enough training set, we can probably get away with just using a single separate validation set](https://www.coursera.org/lecture/deep-neural-network/train-dev-test-sets-cxG1s), but cross validation is a safer method to avoid overfitting. ', '# ', '# To implement KFold cross validation, we will use the LightGBM cross validation function, `cv`, because this allows us to use a critical technique for training a GBM, early stopping. (For other machine learning models where we do not need to use early stopping, we can use the Scikit-Learn functions `RandomizedSearchCV` or `GridSearchCV`.)', '# ', '# ## Early Stopping', '# ', ""# One of the most important hyperparameters in a Gradient Boosting Machine is the number of estimators (the number of decision trees trained sequentially). We could set this as another hyperparameter in our search, but there's a better method: [early stopping](https://en.wikipedia.org/wiki/Early_stopping). Early stopping means training until the validation error does not decrease for a specified number of iterations. In the case of the GBM, this means training more decision trees, and in this example, we will use early stopping with 100 rounds, meaning that the training will continue until validation error has not decreased for 100 rounds. Then, the number of estimators that yielded the best score on the validation data will be chosen as the number of estimators to use in the final model."", '# ', ""# The concept of early stopping is commonly applied to the GBM and to deep neural networks so it's a great technique to understand. This is one of many forms of regularization that aims to improve generalization performance on the testing set by not overfitting to the training data. If we keep adding estimators, the training error will always decrease because the capacity of the model increases. Although this might seem positive, it means that the model will start to memorize the training data and then will not perform well on new testing data. The __variance__ of the model increases as we continue adding estimators because the model starts to rely too heavily on the training data (high variance means overfitting)."", '# ', '# Early stopping is simple to implement with the LightGBM library in the cross validation function. We simply need to pass in the number of early stopping rounds.', '# ', '# ### Example of Cross Validation and Early Stopping ', '# ', '# To use the `cv` function, we first need to make a LightGBM `dataset`. ', '# In[ ]:', '# Create a training and testing dataset', ""# We have to pass in a set of hyperparameters to the cross validation, so we will use the default hyperparameters in LightGBM. In the `cv` call, the `num_boost_round` is set to 10,000 (`num_boost_round` is the same as `n_estimators`), but this number won't actually be reached because we are using early stopping. As a reminder, the metric we are using is Receiver Operating Characteristic Area Under the Curve (ROC AUC)."", '# ', '# The code below carries out both cross validation with 5 folds and early stopping with 100 early stopping rounds. ', '# In[ ]:', '# Get default hyperparameters', '# Remove the number of estimators because we set this to 10000 in the cv call', '# Cross validation with early stopping', '# The `cv_results` is a dictionary with lists for the `metric` mean and the `metric` standard deviation. The last entry (index of -1) contains the best performing score. The length of each list in the dictionary will be the ""optimal"" number of estimators to train.', '# In[ ]:', '# We can use this result as a baseline model to beat. To find out how well the model does on our ""test"" data, we will retrain it on all the training data with the best number of estimators found during cross validation with early stopping.', '# In[ ]:', '# In[ ]:', '# Optimal number of esimators found in cv', '# Train and make predicions with model', '# This is the baseline score _before hyperparameter tuning_. The only difference we made from the default model was using early stopping to set the number of estimators (which by default is 100). ', '# ## Hyperparameter Tuning Implementation', '# ', '# Now we have the basic framework in place: we will use cross validation to determine the performance of model hyperparameters and early stopping with the GBM so we do not have to tune the number of estimators. The basic strategy for both grid and random search is simple: for each hyperparameter value combination, evaluate the cross validation score and record the results along with the hyperparameters. Then, at the end of searching, choose the hyperparameters that yielded the highest cross-validation score, train the model on all the training data, and make predictions on the test data.', '# ', '# # Four parts of Hyperparameter tuning', '# ', ""# It's helpful to think of hyperparameter tuning as having four parts (these four parts also will form the basis of Bayesian Optimization):"", '# ', '# 1. Objective function: a function that takes in hyperparameters and returns a score we are trying to minimize or maximize', '# 2. Domain: the set of hyperparameter values over which we want to search. ', '# 3. Algorithm: method for selecting the next set of hyperparameters to evaluate in the objective function.', '# 4. Results history: data structure containing each set of hyperparameters and the resulting score from the objective function.', '# ', '# Switching from grid to random search to Bayesian optimization will only require making minor modifications to these four parts. ', '# ', '# ## Objective Function', '# ', '# The objective function takes in hyperparameters and outputs a value representing a score. Traditionally in optimization, this is a score to minimize, but here our score will be the ROC AUC which of course we want to maximize. Later, when we get to Bayesian Optimization, we will have to use a value to minimize, so we can take $1 - \\text{ROC AUC}$ as the score. What occurs in the middle of the objective function will vary according to the problem, but for this problem, we will use cross validation with the specified model hyperparameters to get the cross-validation ROC AUC. This score will then be used to select the best model hyperparameter values. ', '# ', '# In addition to returning the value to maximize, our objective function will return the hyperparameters and the iteration of the search. These results will let us go back and inspect what occurred during a search. The code below implements a simple objective function which we can use for both grid and random search.', '# In[ ]:', '    # Number of estimators will be found using early stopping', '     # Perform n_folds cross validation', '    # results to retun', '# In[ ]:', '# # Domain', '# ', '# The domain, or search space, is all the possible values for all the hyperparameters that we want to search over. For random and grid search, the domain is a hyperparameter grid and usually takes the form of a dictionary with the keys being the hyperparameters and the values lists of values for each hyperparameter.', '# ', '# ## Hyperparameters for GBM', '# ', ""# To see which settings we can tune, let's make a model and print it out. You can also refer to the [LightGBM documentation](http://lightgbm.readthedocs.io/en/latest/Parameters.html) for the description of all the hyperparameters."", '# In[ ]:', '# Create a default model', '# Some of these we do not need to tune such as `silent`, `objective`, `random_state`, and `n_jobs`, and we will use early stopping to determine perhaps the most important hyperparameter, the number of individual learners trained, `n_estimators` (also referred to as `num_boost_rounds` or the number of iterations). Some of the hyperparameters do not need to be tuned if others are: for example, `min_child_samples` and `min_child_weight` both limit the complexity of individual decision trees by adjusting the minimum leaf observation requirements and therefore we will only adjust one. However, there are still many hyperparameters to optimize, and we will choose 10 to tune. ', '# ', ""# Choosing a hyperparameter grid is probably the most difficult part of hyperparameter tuning: it's nearly impossible ahead of time to say which values of hyperparameters will work well and the optimal settings will depend on the dataset. Moreover, the hyperparameters have complex interactions with each other which means that just tuning one at a time doesn't work because when we start changing other hyperparameters that will affect the one we just tuned! "", '# ', ""# If we have prior experience with a model, we might know where the best values for the hyperparameters typically lie, or what a good search space is. However, if we don't have much experience, we can simply define a large search space and hope that the best values are in there somewhere. Typically, when first using a method, I define a wide search space centered around the default values. Then, if I see that some values of hyperparameters tend to work better, I can concentrate the search around those values. "", '# ', '# A complete grid for the 10 hyperparameter is defined below. Each of the values in the dicionary must be a list, so we use `list` combined with `range`, `np.linspace`, and `np.logspace` to define the range of values for each hyperparameter. ', '# In[ ]:', '# Hyperparameter grid', '# One aspect to note is that if `boosting_type` is `goss`, then we cannot use `subsample` (which refers to training on only a fraction of the rows in the training data, a technique known as [stochastic gradient boosting](https://en.wikipedia.org/wiki/Gradient_boosting#Stochastic_gradient_boosting)). Therefore, we will need a line of logic in our algorithm that sets the `subsample` to 1.0 (which means use all the rows) if `boosting_type=goss`. As an example below, if we randomly select a set of hyperparameters, and the boosting type is ""goss"", then we set the `subsample` to 1.0.', '# In[ ]:', '# Randomly sample a boosting type', '# Set subsample depending on boosting type', '# The `boosting_type` and `is_unbalance` domains are pretty simple because these are categorical variables. For the hyperparameters that must be integers (`num_leaves`, `min_child_samples`), we use `range(start, stop, [step])` which returns a range of numbers from start to stop spaced by step (or 1 if not specified). `range` always returns integers, which means that if we want evenly spaced values that can be fractions, we need to use `np.linspace(start, stop, [num])`.  This works the same way except the third argument is the number of values (by default 100).', '# ', '# Finally, `np.logspace(start, stop, [num = 100], [base = 10.0])` returns values evenly spaced on a logarithmic scale. According to the [the docs](https://docs.scipy.org/doc/numpy/reference/generated/numpy.logspace.html) ""In linear space, the sequence starts at $base^{start}$ (base to the power of start) and ends with $base ^{stop}$ "" This is useful for values that differ over several orders of magnitude such as the learning rate.', '# In[ ]:', '# Learning rate histogram', '# ### Learning Rate Domain', '# ', '# The learning rate domain is from 0.005 to 0.5. Using a logarithmic uniform distribution allows us to create a domain where there are as many values from 0.005 to 0.05 as from 0.05 to 0.5. In a linear space, there would be far more values from 0.05 to 0.5 because this represents a larger distance in linear space but in logarithmic space each of these two intervals is the same width because they are multiples of 10 of each other. (Think about going from 1 to 10 and then from 10 to 100. On a logarithmic scale, these intervals are the same size, but on a linear scale the latter is 10 times the size of the former). In other words, a logarithmic uniform distribution lets us sample more evenly from a domain that varies over several orders of magnitude. ', '# ', ""# If that's a little confusing, perhaps the graph above makes it clearer. We can also do a sanity check to make sure the spacing is correct by counting the number of values in each interval."", '# In[ ]:', '# Check number of values in each category', '    # Check values', '# As an example of a simple domain, the `num_leaves` is a uniform distribution. This means values are evenly spaced on a linear scale.', '# In[ ]:', '# number of leaves domain', '# # Algorithm for selecting next values', '# ', ""# Although we don't generally think of them as such, both grid and random search are algorithms. In the case of grid search, we input the domain and the algorithm selects the next value for each hyperparameter in an ordered sequence. The only requirement of grid search is that it tries every combination in a grid once (and only once). For random search, we input the domain and each time the algorithm gives us a random combination of hyperparameter values to try. There are no requirements for random search other than that the next values are selected at random. "", '# ', '# We will implement these algorithms very shortly, as soon as we cover the final part of hyperparameter tuning.', '# # Results History', '# ', '# The results history is a data structure that contains the hyperparameter combinations and the resulting score on the objective function. When we get to Bayesian Optimization, the model actually _uses the past results to decide on the next hyperparmeters_ to evaluate. Random and grid search are _uninformed_ methods that do not use the past history, but we still need the history so we can find out which hyperparameters worked the best! ', '# ', '# A dataframe is a useful data structure to hold the results.', '# In[ ]:', '# Dataframes for random and grid search', '# # Grid Search Implementation', '# ', '# Grid search is best described as exhuastive guess and check. We have a problem: find the hyperparameters that result in the best cross validation score, and a set of values to try in the hyperparameter grid - the domain. The grid search method for finding the answer is to try all combinations of values in the domain and hope that the best combination is  in the grid (in reality, we will never know if we found the best settings unless we have an infinite hyperparameter grid which would then require an infinite amount of time to run).', '# ', ""# Grid search suffers from one limiting problem: it is extremely computationally expensive because we have to perform cross validation with every single combination of hyperparameters in the grid! Let's see how many total hyperparameter settings there are in our simple little grid we developed."", '# In[ ]:', ""# Until Kaggle upgrades the kernels to quantum computers, we are not going to be able to run evan a fraction of the combinations! Let's assume 100 seconds per evaluation and see how many years this would take:"", '# In[ ]:', ""# I think we're going to need a better approach! Before we discuss alternatives, let's walk through how we would actually use this grid and evaluate all the hyperparameters."", '# ', '# The code below shows the ""algorithm"" for grid search. First, we [unpack the values](https://www.geeksforgeeks.org/packing-and-unpacking-arguments-in-python/) in the hyperparameter grid (which is a Python dictionary) using the line `keys, values = zip(*param_grid.items())`.  The key line is `for v in itertools.product(*values)` where we iterate through all the possible combinations of values in the hyperparameter grid one at a time.  For each combination of values, we create a dictionary `hyperparameters = dict(zip(keys, v))` and then pass these to the objective function defined earlier. The objective function returns the cross validation score from the hyperparameters which we record in the dataframe. This process is repeated for each and every combination of hyperparameter values. By using `itertools.product` (from [this Stack Overflow Question and Answer](https://codereview.stackexchange.com/questions/171173/list-all-possible-permutations-from-a-python-dictionary-of-lists)), we create a [generator](http://book.pythontips.com/en/latest/generators.html) rather than allocating a list of all possible combinations which would be far too large to hold in memory. ', '# In[ ]:', '    # Dataframe to store results', '    # https://codereview.stackexchange.com/questions/171173/list-all-possible-permutations-from-a-python-dictionary-of-lists', '    # Iterate through every possible combination of hyperparameters', '        # Create a hyperparameter dictionary', '        # Set the subsample ratio accounting for boosting type', '        # Evalute the hyperparameters', '        # Normally would not limit iterations', '    # Sort with best score on top', '# Normally, in grid search, we do not limit the number of evaluations. The number of evaluations is set by the total combinations in the hyperparameter grid (or the number of years we are willing to wait!). So the lines ', '# ', '# ```', '#         if i > MAX_EVALS:', '#             break', '# ```', '# ', '# would not be used in actual grid search. Here we will run grid search for 5 iterations just as an example. The results returned will show us the validation score (ROC AUC), the hyperparameters, and the iteration sorted by best performing combination of hyperparameter values.', '# In[ ]:', '# Now, since we have the best hyperparameters, we can evaluate them on our ""test"" data (remember not the real test data)!', '# In[ ]:', '# Get the best parameters', '# Create, train, test model', ""# It's interesting that the model scores better on the test set than in cross validation. Usually the opposite happens (higher on cross validation than on test) because the model is tuned to the validation data. In this case, the better performance is probably due to small size of the test data and we get very lucky (although this probably does not translate to the actual competition data). "", '# To get a sense of how grid search works, we can look at the progression of hyperparameters that were evaluated.', '# In[ ]:', '# Look at the `subsample` and the `is_unbalance` because these are the only hyperparameters that change. In fact, the effect of  changing these values is so small that validation scores literally did not change across runs (indicating this small of a change has no effect on the model). This is grid search trying every single value in the grid! No matter how small the increment between subsequent values of a hyperparameter, it will try them all. Clearly, we are going to need a more efficient approach if we want to find better hyperparameters in a reasonable amount of time. ', '# #### Application', '# ', '# If you want to run this on the entire dataset feel free to take these functions and put them in a script. However, I would advise against using grid search unless you have a very small hyperparameter grid because this is such as exhaustive method! ', '# Later, we will look at results from 1000 iterations of grid and random search run on the same small subset of data as we used above. I have not tried to run any form of grid search on the full data (and probably will not try this method).', '# # Random Search', '# ', '# Random search is surprisingly efficient compared to grid search. Although grid search will find the optimal value of hyperparameters (assuming they are in your grid) eventually, random search will usually find a ""close-enough"" value in far fewer iterations. [This great paper explains why this is so](http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf): grid search spends too much time evaluating unpromising regions of the hyperparameter search space because it has to evaluate every single combination in the grid. Random search in contrast, does a better job of exploring the search space and therefore can usually find a good combination of hyperparameters in far fewer iterations. ', '# ', ""# As [this article](https://medium.com/rants-on-machine-learning/smarter-parameter-sweeps-or-why-grid-search-is-plain-stupid-c17d97a0e881) lays out, random search should probably be the first hyperparameter optimization method tried because of its effectiveness. Even though it's an _uninformed_ method (meaning it does not rely on past evaluation results), random search can still usually find better values than the default and is simple to run."", '# ', '# Random search can also be thought of as an algorithm: randomly select the next set of hyperparameters from the grid! We can build a dictionary of hyperparameters by selecting one random value for each hyperparameter as follows (again accounting for subsampling):', '# In[ ]:', '# Randomly sample from dictionary', '# Deal with subsample ratio', '# Next, we define the `random_search` function. This takes the same general structure as `grid_search` except for the method used to select the next hyperparameter values. Moreover, random search is always run with a limit on the number of search iterations.', '# In[ ]:', '    # Dataframe for results', '    # Keep searching until reach max evaluations', '        # Choose random hyperparameters', '        # Evaluate randomly selected hyperparameters', '    # Sort with best score on top', '# In[ ]:', '# We can also evaluate the best random search model on the ""test"" data.', '# In[ ]:', '# Get the best parameters', '# Create, train, test model', '# Finally, we can view the random search sequence of hyperparameters.', '# In[ ]:', '# This time we see hyperparameter values that are all over the place, almost as if they had been selected at random! Random search will do a much better job than grid search of exploring the search domain (for the same number of iterations). If we have a limited time to evaluate hyperparameters, random search is a better option than grid search for exactly this reason.', '# ', '# ### Stacking Random and Grid Search', '# ', '# One option for a smarter implementation of hyperparameter tuning is to combine random search and grid search: ', '# ', '# 1. Use random search with  a large hyperparameter grid ', '# 2. Use the results of random search to build a focused hyperparameter grid around the best performing hyperparameter values.', '# 3. Run grid search on the reduced hyperparameter grid. ', '# 4. Repeat grid search on more focused grids until maximum computational/time budget is exceeded.', '# ', '# In a later notebook (upcoming), we will look at methods that use the past evaluation results to pick the next hyperparameter values to try in the objective function. These methods (including [Bayesian optimization](https://sigopt.com/static/pdf/SigOpt_Bayesian_Optimization_Primer.pdf)) are essentially doing what we would do in the strategy outlined above: adjust the next values tried in the search from the previous results. The overall objective of these _informed methods_ is to limit evaluations of the objective function by reasoning about the next values to try based on past evaluation results. These algorithms are therefore able to save time by evaluating more promising values of hyperparameters. This is a really cool topic and [Bayesian optimization](http://gpss.cc/gpmc17/slides/LancasterMasterclass_1.pdf) is fascinating so stay tuned for this upcoming notebook. ', '# ## Next Steps', '# ', '# We can now take these random and grid search functions and use them on the complete dataset or any dataset of our choosing. These search methods are very expensive, so expect the hyperparameter tuning to take a while.(I am currently running this script on a full set of features for 500 iterations and will make the results public when they are available. )', '# ', '# For now, we will turn to implementing random and grid search on the reduced dataset for 1000 iterations just to compare the results (I took the code below and already ran it because even with the small dataset, it takes a very long time. The results are available as part of the data in this kernel). ', '# ', '# ## Writing to File to Monitor Progress', '# ', ""# When we run these searches for a long time, it's natural to want to track the performance while the search is going on. We can print information to the command prompt, but this will grow cluttered after 1000 iterations and the results will be gone if we close the command prompt. A better solution (although not perfect) is to write a line to a csv (comma separated value) file on each iteration. Then, we can look at the file to track progress while the searching is running, and eventually, have the entire results saved when the search is complete."", '# ', '# ### Extremely Important Note about Checking Files', '# ', ""# When you want to check the csv file, __do not open it in Excel while the search is ongoing__. This will cause a permission error in Python and the search will be terminated. Instead, you can view the end of the file by typing `tail out_file.csv` from Bash where `out_file.csv` is the name of the file being written to. There are also some text editors, such as notepad or Sublime Text, where you can open the results safely while the search is occurring. However, __do not use Excel to open a file that is being written to in Python__. This is a mistake I've made several times so you do not have to! "", '# Below is the code we need to run before the search. This creates the csv file, opens a connection, writes the header (column names), and then closes the connection. This will overwrite any information currently in the `out_file`, so change to a new file name every time you want to start a new search.', '# In[ ]:', '# Create file and open connection', '# Write column names', '# Now we must slightly modify `random_search` and `grid_search` to write to this file every time. We do this by opening a connection, this time using the `""a""` option for append (the first time we used the `""w""` option for write) and writing a line with the desired information (which in this case is the cross validation score, the hyperparameters, and the number of the iteration). Then we close the connection until the function is called again.', '# In[ ]:', '    # Dataframe for results', '        # Choose random hyperparameters', '        # Evaluate randomly selected hyperparameters', '        # open connection (append option) and write results', '        # make sure to close connection', '    # Sort with best score on top', '# In[ ]:', '    # Dataframe to store results', '    # https://codereview.stackexchange.com/questions/171173/list-all-possible-permutations-from-a-python-dictionary-of-lists', '    # Iterate through every possible combination of hyperparameters', '        # Select the hyperparameters', '        # Set the subsample ratio accounting for boosting type', '        # Evalute the hyperparameters', '        # open connection (append option) and write results', '        # make sure to close connection', '        # Normally would not limit iterations', '    # Sort with best score on top', '# To run these functions for 1000 iterations (or however many you choose) uncomment the cell below. Otherwise, I have run these functions on the reduced dataset and attached the results to this kernel.', '# In[ ]:', '# MAX_EVALS = 1000', '# # Create file and open connection', ""# out_file = 'grid_search_trials_1000.csv'"", ""# of_connection = open(out_file, 'w')"", '# writer = csv.writer(of_connection)', '# # Write column names', ""# headers = ['score', 'hyperparameters', 'iteration']"", '# writer.writerow(headers)', '# of_connection.close()', '# grid_results = grid_search(param_grid, out_file)', '# # Create file and open connection', ""# out_file = 'random_search_trials_1000.csv'"", ""# of_connection = open(out_file, 'w')"", '# writer = csv.writer(of_connection)', '# # Write column names', ""# headers = ['score', 'hyperparameters', 'iteration']"", '# writer.writerow(headers)', '# of_connection.close()', '# random_results = random_search(param_grid, out_file)', '# # Results on Limited Data', '# ', '# We can examine 1000 search iterations of the above functions on the reduced dataset. Later, we can try the hyperparameters that worked the best for the small versions of the data on a complete dataset to see if the best hyperparameters translate when increasing the size of the data 30 times! The 1000 search iterations were not run in a kernel, although they might be able to finish (no guarantees) in the 12 hour time limit. ', '# ', '# First we can find out which method returned the best results. ', '# In[ ]:', '# When we save the results to a csv, for some reason the dictionaries are saved as strings. Therefore we need to convert them back to dictionaries after reading in the results using the `ast.literal_eval` function.', '# In[ ]:', '# Convert strings to dictionaries', ""# Now let's make a function to parse the results from the hyperparameter searches. This returns a dataframe where each column is a hyperparameter and each row has one search result (so taking the dictionary of hyperparameters and mapping it into a row in a dataframe)."", '# In[ ]:', '    # Sort with best values on top', '    # Print out cross validation high score', '    # Use best hyperparameters to create a model', '    # Train and make predictions', '    # Create dataframe of hyperparameters', '    # Iterate through each set of hyperparameters that were evaluated', '    # Put the iteration and score in the hyperparameter dataframe', '# In[ ]:', '# In[ ]:', '# # Visualizations', '# ', ""# Visualizations are both enjoyable to make, and can give us an intuitive look into a technique. Here we will make a few simple plots using matplotlib, seaborn, and Altair! __Unfortunately, the Altair visualizations do not show up when the notebook is rendered. To view the Altair figures, you'll have to run the notebook yourself!__"", '# First we can plot the validation scores versus the iteration. Here we will use the [Altair](https://altair-viz.github.io/) visualization library to make some plots! First, we need to put our data into a long format dataframe.', '# In[ ]:', '# In[ ]:', '# Combine results into one dataframe', '# In[ ]:', '# Below, we make the same plot using seaborn because the Altair visualizations do not show up in the rendered notebook. ', '# In[ ]:', '# In[ ]:', '# Plot of scores over the course of searching', '# In[ ]:', '# The grid cross validation score increases over time. This indicates that whatever hyperparameters are changing in grid search are gradually increasing the score. The random cross validation scores on the other hand are all over the place as expected. This grid search appears to be stuck in a relatively low-performing region of the search space, and because it is constrained to try all the values in the grid, it is not able to try significantly different hyperparameter values that would perform better (as occurs in random search). The random search method does a very good job of exploring the search space as we will see when we look at the hyperparameter values searched. ', '# ## Distribution of Search Values', '# ', ""# We can show the distribution of search values for random search (grid search is very uninteresting). Even though we expect these to be _random_, it's always a good idea to check our code both quantitatively and visually. "", '# In[ ]:', '# Create bar chart', '# Add text for labels', '# Display', '# The boosting type should be evenly distributed for random search. ', '# ', '# Again, we have to remake this chart in seaborn to have the visualization appear in the rendered notebook (if anyone knows how to address this issue, please tell me in the comments!)', '# In[ ]:', '# Bar plots of boosting type', ""# Next, for the numeric hyperparameters, we will plot both the sampling distribution (the hyperparameter grid) and the results from random search in a kernel density estimate (KDE) plot. (The grid search results are completely uninteresting). As random search is just drawing random values, we would expect the random search distribution to align with the sampling grid (although it won't be perfectly aligned because of the limited number of searches). "", '# ', '# As an example, below we plot the distribution of learning rates from both the sampling distribution and the random search results. The vertical dashed line indicates the optimal value found from random search.', '# In[ ]:', '# In[ ]:', '# Density plots of the learning rate distributions ', '# The following code repeats this plot for all the of the numeric hyperparameters. ', '# In[ ]:', '# Iterate through each hyperparameter', '        # Plot the random search distribution and the sampling distribution', '# ## Sequence of Search Values', '# ', '# Finally, we can plot the sequence of search values against the iteration for random search. Clearly there will not be any order, but this can let us visualize what happens in a random search!', '# ', '# The star indicates the best value of the hyperparameter that was found.', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# In[ ]:', '# Scatterplot of next four hyperparameters', '# ## Score versus Hyperparameters', '# As a final plot, we can show the score versus the value of each hyperparameter. We need to keep in mind that the hyperparameters are not changed one at a time, so if there are relationships between the values and the score, they do not mean that particular hyperparameter is influencing the score. However, we might be able to identify values of hyperparameters that seem more promising. Mostly these plots are for my own interest, to see if there are any trends! ', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# Scatterplot of next four hyperparameters', '# We want to avoid placing too much emphasis on any of these relationships because we were not changing one hyperparameter at a time (although we could carry out experiments where we only change one hyperparameter and observes the effects on the score) and so the trends are not due solely to the single hyperparameter we show. If we could plot this in higher dimensions, it might be interesting to see if there are more promising regions of the search space but here we are limited to one dimension (a single hyperparameter versus the score).  If we want to observe the effects of one hyperparameter on the cross validation score, we could alter only that hyperparameter while holding all the others constant. However, the hyperparameters do not act by themselves and there are complex interactions between the model settings.', '# # Testing Results on Full Data', '# ', '# We can take the best hyperparameters found from the 1000 iterations of random search on the reduced training data and try these on an entire training dataset. Here, we will use the features from the `[Updated 0.792 LB] LightGBM with Simple Features', '# `(https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) kernel (I did not develop these features and want to give credit to the numerous people, including [Aguiar](https://www.kaggle.com/jsaguiar) and [olivier](https://www.kaggle.com/ogrellier),  who have worked on these features. Please check out their [kernels](https://www.kaggle.com/ogrellier/lighgbm-with-selected-features)!). ', '# ', '# The code below uses the best random search hyperparameters to build a model, train on the full features from `[Updated 0.792 LB] LightGBM with Simple Features', '# `(https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features), and test on the testing features. The test data is the actual competition data, so we can then submit these and see how well the score translates to a full dataset! ', '# In[ ]:', '# Read in full dataset', '# Extract the test ids and train labels', '# First we will test the cross validation score using the best model hyperparameter values from random search. This can give us an idea of the generalization error on the test set. We will delete the number of estimators found from the smaller dataset and use early stopping to find the best number of decision trees to train. ', '# In[ ]:', '# Cross validation with n_folds and early stopping', '# In[ ]:', '# The public leaderboard score is only calculated on 10% of the test data, so the cross validation score might actually give us a better idea of how the model will perform on the full test set. Usually we expect the cross validation score to be higher than on the testing data, but because of the small size of the testing data, this might be reversed for this problem.', '# ', '# Next, we will make predictions on the test data that can be submitted to the competition. ', '# In[ ]:', '# Train the model with the optimal number of estimators from early stopping', '# Predictions on the test data', '# In[ ]:', '# The score when submitting to the test competition is __0.782__. The original score from the kernel where I got these features was 0.792, so we can conclude that the results from random search on the smaller dataset to not translate to a full dataset. I currently am running random search with 500 iterations on the full dataset, and will make those results publicly available when the search is complete! ', '# ## Model Tuning Next Steps', '# ', ""# From here, we might want to take the functions we wrote and apply them to a complete dataset. The results are likely to be different because we were only using a random subset of the training data. However, this will take much longer (300000+ observations instead of 10000). I'm currently running the random search on the full dataset from the Kernel referenced above, and will see how the results turn out. (Sampling some of the observations is not inherently negative, and it can help us get reasonable answers in a much shorter time frame. However, if we are using such a small portion of the data that is not representative of the entire dataset, then we should not expect the tuning to translate to the full dataset.)"", '# ', ""# In an upcoming notebook, we will turn to automated hyperparameter tuning, in particular, Bayesian Optimization. We will implement automated optimization of machine learning hyperparameters step-by-step using the Hyperopt open-source Python library. I'll provide the link here as soon as this notebook is finished, but if you want to get an idea of Bayesian optimization, you can check out [this introductory article](https://towardsdatascience.com/an-introductory-example-of-bayesian-optimization-in-python-with-hyperopt-aae40fff4ff0), or [this article on automated hyperparameter tuning](https://towardsdatascience.com/automated-machine-learning-hyperparameter-tuning-in-python-dfda59b72f8a). These topics are pretty neat and it's incredible that they are available in an easy-to-use format for anyone to take advantage of. I'll see you in the next notebook! "", '# # Conclusions', '# ', '# Model tuning is the process of finding the best machine learning model hyperparameters for a particular problem. Random and grid search are two uniformed methods for hyperparameter tuning that search by selecting hyperparameter values from a grid domain. ', '# The four parts of hyperparameter tuning are:', '# ', '# 1. Objective function: takes in hyperparameters and returns the cross validation score we want to maximize or minimize', '# 2. Domain of hyperparameters: values over which we want to search', '# 3. Algorithm: method for selecting the next hyperparameter values to evaluate in the objective function', '# 4. Results: history of hyperparameters and cross validation scores', '# ', ""# These four parts apply to grid and random search as well as to Bayesian optimization, a form of automated hyperparameter tuning. In this notebook, we implemented both random and grid search on a reduced dataset, inspected the results, and tried to translate the optimal hyperparameters to a full dataset (from [this kernel](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features)). As a small note, it's important to remember that we tune the hyperparameters to the training data - using cross validation - so the hyperparameter values we find are only optimal for the training data. Although the best hyperparameters from the smaller dataset did not work that well on the full dataset, we were still able to see the ideas behind these two tuning methods. Moreover, we can take the functions developed here and apply them to any dataset or to any machine learning model, not just the gradient boosting machine. "", '# ', '# Random search turns out to work pretty well in practice (because it is good at exploring the search domain), but it still is not a reasoning method because it does not use past evaluation results to choose the next hyperparameter values. A better approach would be to use the past results to reason about the best values to try next in the objective function, especially because as we saw, evaluating the objective function is time-consuming! In future work, we will look at [implementing automated hyperparameter tuning](https://towardsdatascience.com/automated-machine-learning-hyperparameter-tuning-in-python-dfda59b72f8a) using Bayesian optimization. ', '# ', ""# Hyperparameter tuning is a crucial part of the machine learning pipeline because the performance of a model can depend strongly on the choices of the hyperparameter values. Random and grid search are two decent methods to start tuning a model (at least they are better than manual tuning) and are important tools to have in the data science skillset. Thanks for reading and I'll see you in the next notebook!"", '# ', '# As always, I welcome feedback and constructive criticism. I write for Towards Data Science at https://medium.com/@williamkoehrsen/ and can be reached on Twitter at https://twitter.com/koehrsen_will', '# ', '# Will', '# In[ ]:']",423
introduction-to-feature-selection.py,"['# coding: utf-8', '# # Introduction: Feature Selection', '# ', '# In this notebook we will apply feature engineering to the manual engineered features built in two previous kernels. We will reduce the number of features using several methods and then we will test the performance of the features using a fairly basic gradient boosting machine model. ', '# ', '# The main takeaways from this notebook are:', '# ', '# * Going from 1465 total features to 536 and an AUC ROC of 0.783 on the public leaderboard', '# * A further optional step to go to 342 features and an AUC ROC of 0.782', '# ', '# The full set of features was built in [Part One](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering) and [Part Two](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering-p2) of Manual Feature Engineering', '# ', '# We will use three methods for feature selection:', '# ', '# 1. Remove collinear features', '# 2. Remove features with greater than a threshold percentage of missing values', '# 3. Keep only the most relevant features using feature importances from a model', '# ', '# We will also take a look at an example of applying PCA although we will not use this method for feature reduction. ', '# Standard imports for data science work. The LightGBM library is used for the gradient boosting machine.', '# In[1]:', '# pandas and numpy for data manipulation', '# featuretools for automated feature engineering', '# matplotlit and seaborn for visualizations', '# Suppress warnings from pandas', '# modeling ', '# utilities', '# memory management', '# * `train_bureau` is the training features built manually using the `bureau` and `bureau_balance` data', '# * `train_previous` is the training features built manually using the `previous`, `cash`, `credit`, and `installments` data', '# ', '# We first will see how many features we built over the manual engineering process. Here we use a couple of set operations to find the columns that are only in the `bureau`, only in the `previous`, and in both dataframes, indicating that there are `original` features from the `application` dataframe. Here we are working with a small subset of the data in order to not overwhelm the kernel. This code has also been run on the full dataset (we will take a look at some of the results).', '# In[2]:', '# Read in data', '# All columns in dataframes', '# In[3]:', '# Bureau only features', '# Previous only features', '# Original features will be in both datasets', '# That gives us the number of features in each dataframe. Now we want to combine the data without creating any duplicate rows. ', '# In[4]:', '# Merge the dataframes avoiding duplicating columns by subsetting train_previous', ""# Next we want to one-hot encode the dataframes. This doesn't give the full features since we are only working with a sample of the data and this will not create as many columns as one-hot encoding the entire dataset would. Doing this to the full dataset results in 1465 features."", '# ', '# An important note in the code cell is where we __align the dataframes by the columns.__ This ensures we have the same columns in the training and testing datasets.', '# In[5]:', '# One hot encoding', '# Match the columns in the dataframes', '# When we do this to the full dataset, we get __1465__ features. ', '# ### Admit and Correct Mistakes!', '# ', '# When doing manual feature engineering, I accidentally created some columns derived from the client id, `SK_ID_CURR`. As this is a unique identifier for each client, it should not have any predictive power, and we would not want to build a model trained on this ""feature"". Let\'s remove any columns built on the `SK_ID_CURR`.', '# In[6]:', '# After applying this to the full dataset, we end up with __1416 __ features. More features might seem like a good thing, and they can be if they help our model learn. However, irrelevant features, highly correlated features, and missing values can prevent the model from learning and decrease generalization performance on the testing data. Therefore, we perform feature selection to keep only the most useful variables.', '# ', '# We will start feature selection by focusing on collinear variables.', '# # Remove Collinear Variables', '# ', ""# Collinear variables are those which are highly correlated with one another. These can decrease the model's availablility to learn, decrease model interpretability, and decrease generalization performance on the test set. Clearly, these are three things we want to increase, so removing collinear variables is a useful step. We will establish an admittedly arbitrary threshold for removing collinear variables, and then remove one out of any pair of variables that is above that threshold. "", '# ', '# The code below identifies the highly correlated variables based on the absolute magnitude of the Pearson correlation coefficient being greater than 0.9. Again, this is not entirely accurate since we are dealing with such a limited section of the data. This code is for illustration purposes, but if we read in the entire dataset, it would work (if the kernels allowed it)! ', '# ', '# This code is adapted from [work by Chris Albon](https://chrisalbon.com/machine_learning/feature_selection/drop_highly_correlated_features/).', '# ### Identify Correlated Variables', '# In[7]:', '# Threshold for removing correlated variables', '# Absolute value correlation matrix', '# In[8]:', '# Upper triangle of correlations', '# In[9]:', '# Select columns with correlations above threshold', '# #### Drop Correlated Variables', '# In[10]:', '# Applying this on the entire dataset __results in 538  collinear features__ removed.  ', '# ', ""# This has reduced the number of features singificantly, but it is likely still too many. At this point, we'll read in the full dataset after removing correlated variables for further feature selection."", '# ', '# The full datasets (after removing correlated variables) are available in `m_train_combined.csv` and `m_test_combined.csv`.', '# ### Read in Full Dataset', '# ', '# Now we are ready to move on to the full set of features. These were built by applying the above steps to the entire `train_bureau` and `train_previous` files (you can do the same if you want and have the computational resources)!', '# In[ ]:', '# In[ ]:', '# # Remove Missing Values', '# ', '# A relatively simple choice of feature selection is removing missing values. Well, it seems simple, at least until we have to decide what percentage of missing values is the minimum threshold for removing a column. Like many choices in machine learning, there is no right answer, and not even a general rule of thumb for making this choice. In this implementation, if any columns have greater than 75% missing values, they will be removed. ', '# ', ""# Most models (including those in Sk-Learn) cannot handle missing values, so we will have to fill these in before machine learning. The Gradient Boosting Machine ([at least in LightGBM](https://github.com/Microsoft/LightGBM/blob/master/docs/Advanced-Topics.rst)) can handle missing values. Imputing missing values always makes me a little uncomfortable because we are adding information that actually isn't in the dataset. Since we are going to be evaluating several models (in a later notebook), we will have to use some form of imputation. For now, we will focus on removing columns above the threshold."", '# In[33]:', '# Train missing values (in percent)', '# In[34]:', '# Test missing values (in percent)', '# In[35]:', '# Identify missing values above threshold', ""# Let's drop the columns, one-hot encode the dataframes, and then align the columns of the dataframes."", '# In[36]:', '# Need to save the labels because aligning will remove this column', '# In[37]:', '# # Feature Selection through Feature Importances', '# ', '# The next method we can employ for feature selection is to use the feature importances of a model. Tree-based models (and consequently ensembles of trees) can determine an ""importance"" for each feature by measuring the reduction in impurity for including the feature in the model. I\'m not really sure what that means (any explanations would be welcome) and the absolute value of the importance can be difficult to interpret. However, the relative value of the importances can be used as an approximation of the ""relevance"" of different features in a model. Moreover, we can use the feature importances to remove features that the model does not consider important. ', '# ', '# One method for doing this automatically is the [Recursive Feature Elimination method](http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html) in Scikit-Learn. This accepts an estimator (one that either returns feature weights such as a linear regression, or feature importances such as a random forest) and a desired number of features. In then fits the model repeatedly on the data and iteratively removes the lowest importance features until the desired number of features is left. This means we have another arbitrary hyperparameter to use in out pipeline: the number of features to keep! ', '# ', ""# Instead of doing this automatically, we can perform our own feature removal by first removing all zero importance features from the model. If this leaves too many features, then we can consider removing the features with the lowest importance. We will use a Gradient Boosted Model from the LightGBM library to assess feature importances. If you're used to the Scikit-Learn library, the LightGBM library has an API that makes deploying the model very similar to using a Scikit-Learn model. "", '# Since the LightGBM model does not need missing values to be imputed, we can directly `fit` on the training data. We will use Early Stopping to determine the optimal number of iterations and run the model twice, averaging the feature importances to try and avoid overfitting to a certain set of features.', '# In[38]:', '# Initialize an empty array to hold feature importances', '# Create the model with several hyperparameters', '# In[39]:', '# Fit the model twice to avoid overfitting', '    # Split into training and validation set', '    # Train using early stopping', '    # Record the feature importances', '# In[40]:', '# Make sure to average feature importances! ', '# In[48]:', '# Find the features with zero importance', ""# We see that one of our features made it into the top 5 most important! That's a good sign for all of our hard work making the features. It also looks like many of the features we made have literally 0 importance. For the gradient boosting machine, features with 0 importance are not used at all to make any splits. Therefore, we can remove these features from the model with no effect on performance (except for faster training). "", '# In[41]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '    # Cumulative importance plot', '# In[42]:', ""# Let's remove the features that have zero importance."", '# In[44]:', '# At this point, we can re-run the model to see if it identifies any more features with zero importance. In a way, we are implementing our own form of recursive feature elimination. Since we are repeating work, we should probably put the zero feature importance identification code in a function.', '# In[45]:', '    # Initialize an empty array to hold feature importances', '    # Create the model with several hyperparameters', '    # Fit the model multiple times to avoid overfitting', '        # Split into training and validation set', '        # Train using early stopping', '        # Record the feature importances', '    # Find the features with zero importance', '# In[46]:', ""# There are now no 0 importance features left (I guess we should have expected this). If we want to remove more features, we will have to start with features that have a non-zero importance. One way we could do this is by retaining enough features to account for a threshold percentage of importance, such as 95%. At this point, let's keep enough features to account for 95% of the importance. Again, this is an arbitrary decision! "", '# In[47]:', ""# We can keep only the features needed for 95% importance. This step seems to me to have the greatest chance of harming the model's learning ability, so rather than changing the original dataset, we will make smaller copies. Then, we can test both versions of the data to see if the extra feature removal step is worthwhile. "", '# In[49]:', '# Threshold for cumulative importance', '# Extract the features to keep', '# Create new datasets with smaller features', '# In[50]:', '# # Test New Featuresets', '# ', '# The last step of feature removal we did seems like it may have the potential to hurt the model the most. Therefore we want to test the effect of this removal. To do that, we can use a standard model and change the features. ', '# ', ""# We will use a fairly standard LightGBM model, similar to the one we used for feature selection. The main difference is this model uses five-fold cross validation for training and we  use it to make predictions. There's a lot of code here, but that's because I included documentation and a few extras (such as feature importances) that aren't strictly necessary. For now, understanding the entire model isn't critical, just know that we are using the same model with two different datasets to see which one performs the best."", '# In[52]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# ### Test ""Full"" Dataset', '# ', '# This is the expanded dataset. To recap the process to make this dataset we:', '# ', '# * Removed collinear features as measured by the correlation coefficient greater than 0.9', '# * Removed any columns with greater than 80% missing values in the train or test set', '# * Removed all features with non-zero feature importances', '# In[53]:', '# In[54]:', '# In[55]:', '# The full features after feature selection score __0.783__ when submitted to the public leaderboard. ', '# ### Test ""Small"" Dataset', '# ', '# The small dataset requires one additional step over the ful l dataset:', '# ', '# * Keep only features needed to reach 95% cumulative importance in the gradient boosting machine', '# In[56]:', '# In[57]:', '# In[58]:', '# The smaller featureset scores __0.782__ when submitted to the public leaderboard.', '# # Other Options for Dimensionality Reduction', '# ', '# We only covered a small portion of the techniques used for feature selection/dimensionality reduction. There are many other methods such as:', '# ', '# * PCA: Principle Components Analysis (PCA)', '# * ICA: Independent Components Analysis (ICA)', '# * Manifold learning: [also called non-linear dimensionality reduction](https://stats.stackexchange.com/questions/247907/what-is-the-difference-between-manifold-learning-and-non-linear-dimensionality-r)', '# ', ""# PCA is a great method for reducing the number of features provided that you do not care about model interpretability. It projects the original set of features onto a lower dimension, in the process, eliminating any physical representation behind the features. Here's a pretty thorough introduction to the math for anyone interested. PCA also assumes that the data is Gaussian distributed, which may not be the case, especially when dealing with real-world human generated data. "", '# ', '# ICA representations also obscure any physical meaning behind the variables and presevere the most ""independent"" dimensions of the data (which is different than the dimensions with the most variance). ', '# ', '# Manifold learning is more often used for low-dimensional visualizations (such as with T-SNE or LLE) rather than for dimensionality reduction for a classifier. These methods are heavily dependent on several hyperparameters and are not deterministic which means that there is no way to apply it to new data (in other words you cannot `fit` it to the training data and then separately `transform` the testing data). The learned representation of a dataset will change every time you apply manifold learning so it is not generally a stable method for feature selection.', '# ## PCA Example', '# ', '# We can go through a quick example to show how PCA is implemented. Without going through too many details, PCA finds a new set of axis (the principal components) that maximize the amount of variance captured in the data. The original data is then projected down onto these principal components. The idea is that we can use fewer principal components than the original number of features while still capturing most of the variance. PCA is implemented in Scikit-Learn in the same way as preprocessing methods. We can either select the number of new components, or the fraction of variance we want explained in the data. If we pass in no argument, the number of principal components will be the same as the number of original features. We can then use the `variance_explained_ratio_` to determine the number of components needed for different threshold of variance retained.', '# In[59]:', '# Make sure to drop the ids and target', '# Make a pipeline with imputation and pca', '# Fit and transform on the training data', '# transform the testing data', '# In[ ]:', '# Extract the pca object', '# Plot the cumulative variance explained', '# We only need a few prinicipal components to account for the majority of variance in the data. We can use the first two principal components to visualize the entire dataset. We will color the datapoints by the value of the target to see if using two principal components clearly separates the classes.', '# In[ ]:', '# Dataframe of pca results', '# Plot pc2 vs pc1 colored by target', '# In[ ]:', '# Even though we have accounted for most of the variance, that does not mean the pca decomposition makes the problem of identifying loans repaid vs not repaid any easier. PCA does not consider the value of the label when projecting the features to a lower dimension. Feel free to try a classifier on top of this data, but when I have done so, I noticed that it was not very accurate. ', '# # Conclusions', '# ', '# In this notebook we employed a number of feature selection methods. These methods are necessary to reduce the number of features to increase model interpretability, decrease model runtime, and increase generalization performance on the test set. The methods of feature selection we used are:', '# ', '# 1. Remove highly collinear variables as measured by a correlation coefficient greater than 0.9', '# 2. Remove any columns with more than 75% missing values.', '# 3. Remove any features with a zero importance as determined by a gradient boosting machine.', '# 4. (Optional) keep only enough features to account for 95% of the importance in the gradient boosting machine.', '# ', '# Using the first three methods, we reduced the number of features from __1465__ to __536__ with a 5-fold cv AUC ROC score of 0.7838 and a public leaderboard score of 0.783.', '# ', '# After applying the fourth method, we end up with 342 features with a 5-fold cv AUC SCORE of 0.7482 and a public leaderboard score of 0.782. ', '# ', '# Going forward, we might actually want to add _more_ features except this time, instead of naively applying aggregations, think about what features are actually important from a domain point of view. There are a number of kernels that have created useful features that we can add to our set here to improve performance. The process of feature engineering - feature selection is iterative, and it may require several more passes before we get it completely right! ', '# In[ ]:']",256
kernal-for-credit.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", '# to get a better understanding of kaggle and how to use different frameworks/languages ', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[ ]:', '# Missing values statistics', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[ ]:', '# one-hot encoding of categorical variables', '# In[ ]:', '# In[ ]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Replace the anomalous values with nan', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Display correlations', '# In[ ]:', '# In[ ]:', '# Set the style of plots', '# Plot the distribution of ages in years', '# In[ ]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', '# In[ ]:', '# Bin the age data', '# In[ ]:', '# In[ ]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# In[ ]:', '# In[ ]:', '# Heatmap of correlations', '# In[ ]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# In[ ]:', '# Copy the data for plotting', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# Function to calculate correlation coefficient between two columns', '# Create the pairgrid object', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# In[ ]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[ ]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",112
kernel24647bb75c.py,"['# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",37
kernel7c8856c435.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Function to calculate missing values by column# Funct ', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Number of unique classes in each object column', '# In[ ]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[ ]:', '# one-hot encoding of categorical variables', '# In[ ]:', '# Align the training and testing data, keep only columns present in both dataframes', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# In[ ]:', '# In[ ]:', '# Find correlations with the target and sort', '# Display correlations', '# In[ ]:', '# Find the correlation of the positive days since birth and target', '# In[ ]:', '# Set the style of plots', '# Plot the distribution of ages in years', '# In[ ]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', '# In[ ]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[ ]:', '# Group by the bin and calculate averages', '# In[ ]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# In[ ]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[ ]:', '# Heatmap of correlations', '# In[ ]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# In[ ]:', '# Copy the data for plotting', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# Function to calculate correlation coefficient between two columns', '# Create the pairgrid object', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# In[ ]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', '# In[ ]:', '# Train the polynomial features', '# Transform the features', '# In[ ]:', '# In[ ]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# In[ ]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# iterate through the new features', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# In[ ]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# Median imputation of missing values', '# Scale each feature to 0-1', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[ ]:', '# Make the model with the specified regularization parameter', '# Train on the training data', '# In[ ]:', '# Make predictions', '# Make sure to select the second column only', '# In[ ]:', '# Submission dataframe', '# In[ ]:', '# Save the submission to a csv file', '# In[ ]:']",135
kernelf68f763785.py,"['# coding: utf-8', '# In[1]:', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# In[3]:', '    # è®¡ç®—å½“å‰å†…å\xad˜', '        # è¿™é‡Œåªè¿‡æ»¤äº†objectdæ\xa0¼å¼ï¼Œå¦‚æžœä½\xa0çš„ä»£ç\xa0ä¸\xadè¿˜åŒ…å«å…¶ä»–ç±»åž‹ï¼Œè¯·ä¸€å¹¶è¿‡æ»¤', '# In[4]:', '# One-hot encoding for categorical columns with get_dummies', '# Create a label encoder object', '# In[5]:', '    # Read data and merge', '    # Remove some rows with values not present in test set', '    # Remove some empty features', '     # Replace some outliers', '    # Some simple new features (percentages)', '    # Some new features', '# In[6]:', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '    # Time based aggregations: last x months', '    # Last loan max overdue', '    # Ratios: total debt/total credit and active loans debt/ active loans credit', '# In[7]:', '    # Replace some outliers', '    # Some new features', '    # Categorical features with One-Hot encode', '    # Aggregations for application set', '    # Previous Applications: Approved Applications', '    # Previous Applications: Refused Applications', '# In[8]:', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[9]:', '    # prepare data', '    # parameters', '    # range ', '    # optimize', '    # output optimization process', '    # return best parameters', '# In[10]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '# def kfold_lightgbm(df, num_folds, stratified = False, debug= False):', '#     # Divide in training/validation and test data', ""#     train_df = df[df['TARGET'].notnull()]"", ""#     test_df = df[df['TARGET'].isnull()]"", '#     print(""Starting LightGBM. Train shape: {}, test shape: {}"".format(train_df.shape, test_df.shape))', '#     del df', '#     gc.collect()', '#     # Cross validation model', '#     if stratified:', '#         folds = StratifiedKFold(n_splits= num_folds, shuffle=True, random_state=47)', '#     else:', '#         folds = KFold(n_splits= num_folds, shuffle=True, random_state=47)', '#     # Create arrays and dataframes to store results', '#     oof_preds = np.zeros(train_df.shape[0])', '#     sub_preds = np.zeros(test_df.shape[0])', '#     feature_importance_df = pd.DataFrame()', ""#     feats = [f for f in train_df.columns if f not in ['TARGET','SK_ID_CURR','SK_ID_BUREAU','SK_ID_PREV','index']]"", ""#     for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['TARGET'])):"", ""#         train_x, train_y = train_df[feats].iloc[train_idx], train_df['TARGET'].iloc[train_idx]"", ""#         valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['TARGET'].iloc[valid_idx]"", '#         # LightGBM parameters found by Bayesian optimization', '#         clf = LGBMClassifier(', '#             nthread=4,', '#             #is_unbalance=True,', '#             n_estimators=10000,', '#             learning_rate=0.02,', '#             num_leaves=32,', '#             colsample_bytree=0.9497036,', '#             subsample=0.8715623,', '#             max_depth=8,', '#             reg_alpha=0.04,', '#             reg_lambda=0.073,', '#             min_split_gain=0.0222415,', '#             min_child_weight=40,', '#             silent=-1,', '#             verbose=-1,', '#             #scale_pos_weight=11', '#             )', '#         clf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], ', ""#             eval_metric= 'auc', verbose= 400, early_stopping_rounds= 200)"", '#         oof_preds[valid_idx] = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]', '#         sub_preds += clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] / folds.n_splits', '#         fold_importance_df = pd.DataFrame()', '#         fold_importance_df[""feature""] = feats', '#         fold_importance_df[""importance""] = clf.feature_importances_', '#         fold_importance_df[""fold""] = n_fold + 1', '#         feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)', ""#         print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(valid_y, oof_preds[valid_idx])))"", '#         del clf, train_x, train_y, valid_x, valid_y', '#         gc.collect()', ""#     print('Full AUC score %.6f' % roc_auc_score(train_df['TARGET'], oof_preds))"", '#     # Write submission file and plot feature importance', '#     if not debug:', ""#         test_df['TARGET'] = sub_preds"", ""#         test_df[['SK_ID_CURR', 'TARGET']].to_csv(submission_file_name, index= False)"", '#     display_importances(feature_importance_df)', '#     return feature_importance_df', '# # Display/plot feature importance', '# def display_importances(feature_importance_df_):', '#     cols = feature_importance_df_[[""feature"", ""importance""]].groupby(""feature"").mean().sort_values(by=""importance"", ascending=False)[:40].index', '#     best_features = feature_importance_df_.loc[feature_importance_df_.feature.isin(cols)]', '#     plt.figure(figsize=(8, 10))', '#     sns.barplot(x=""importance"", y=""feature"", data=best_features.sort_values(by=""importance"", ascending=False))', ""#     plt.title('LightGBM Features (avg over folds)')"", '#     plt.tight_layout()', ""#     plt.savefig('lgbm_importances01.png')"", '#     with timer(""Run LightGBM with kfold""):', '#         #print(df.shape)', '#         #df.drop(features_with_no_imp_at_least_twice, axis=1, inplace=True)', '#         #gc.collect()', '#         print(df.shape)', '#         feat_importance = kfold_lightgbm(df, num_folds= 5, stratified= False, debug= debug)', '#     submission_file_name = ""submission_kernel.csv""']",127
kernelfadb0573fe.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# Ð’Ñ‹Ñ€Ð°Ð²Ð½Ð¸Ð²Ð°Ð½Ð¸Ðµ - ÑÐ¾Ñ…Ñ€Ð°Ð½ÑÑ‚ÑÑ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ ÑÑ‚Ð¾Ð»Ð±Ñ†Ñ‹. Ð¸Ð¼ÐµÑŽÑ‰Ð¸ÐµÑÑ Ð² Ð¾Ð±Ð¾Ð¸Ñ… Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ð°Ñ…', '# Add target back in to the data', '# In[6]:', '# ÑÐ¾Ð·Ð´Ð°Ð´Ð¸Ð¼ Ð½Ð¾Ð²Ñ‹Ð¹ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼ Ð´Ð»Ñ Ð¿Ð¾Ð»Ð¸Ð½Ð¾Ð¼Ð¸Ð°Ð»ÑŒÐ½Ñ‹Ñ… Ð¿Ñ€Ð¸Ð·Ð½Ð°ÐºÐ¾Ð²', '# Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ð°ÐµÐ¼ Ð¾Ñ‚ÑƒÑÑ‚Ð²ÑƒÑŽÑ‰Ð¸Ðµ Ð´Ð°Ð½Ð½Ñ‹Ðµ', '# Ð¡Ð¾Ð·Ð´Ð°Ð´Ð¸Ð¼ Ð¿Ð¾Ð»Ð¸Ð½Ð¾Ð¼Ð¸Ð°Ð»ÑŒÐ½Ñ‹Ð¹ Ð¾Ð±ÑŠÐµÐºÑ‚ ÑÑ‚ÐµÐ¿ÐµÐ½Ð¸ 3', '# Ð¢Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²ÐºÐ° Ð¿Ð¾Ð»Ð¸Ð½Ð¾Ð¼Ð¸Ð°Ð»ÑŒÐ½Ñ‹Ñ… Ð¿Ñ€Ð¸Ð·Ð½Ð°ÐºÐ¾Ð²', '# Ð¢Ñ€Ð°Ð½ÑÑ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸Ñ Ð¿Ñ€Ð¸Ð·Ð½Ð°ÐºÐ¾Ð²', '# In[7]:', '# In[8]:', '# Ð”Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼ Ð´Ð»Ñ Ð½Ð¾Ð²Ñ‹Ñ… Ñ„Ð¸Ñ‡ ', '# Ð”Ð¾Ð±Ð°Ð²Ð¸Ð¼ Ñ‚Ð°Ñ€Ð³ÐµÑ‚', '# Ñ€Ð°ÑÑÑ‡Ð¸Ñ‚Ð°ÐµÐ¼ ÐºÐ¾Ñ€Ñ€ÐµÐ»ÑÑ†Ð¸ÑŽ', '# ÐžÑ‚Ð¾Ð±Ñ€Ð°Ð·Ð¸Ð¼ Ð¿Ñ€Ð¸Ð·Ð½Ð°ÐºÐ¸ Ñ Ð½Ð°Ð¸Ð²Ñ‹ÑÑˆÐµÐ¹ ÐºÐ¾Ñ€Ñ€ÐµÐ»ÑÑ†Ð¸ÐµÐ¹', '# In[9]:', '# Ð·Ð°Ð³Ñ€ÑƒÐ·Ð¸Ð¼ Ñ‚ÐµÑÑ‚Ð¾Ð²Ñ‹Ðµ Ð¿Ñ€Ð¸Ð·Ð½Ð°ÐºÐ¸ Ð² Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼', '# Ð¾Ð±ÑŠÐµÐ´Ð¸Ð½Ð¸Ð¼ Ñ‚Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²Ð¾Ñ‡Ð½Ñ‹Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ñ‹', '# Ð¾Ð±ÑŠÐµÐ´Ð¸Ð½Ð¸Ð¼ Ñ‚ÐµÑÑ‚Ð¾Ð²Ñ‹Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ñ‹', '# Ð’Ñ‹Ñ€Ð¾Ð²Ð½ÑÐµÐ¼ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ñ‹', '# ÐŸÐ¾ÑÐ¼Ð¾Ñ‚Ñ€Ð¸Ð¼ Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚', '# In[10]:', '# Ð£Ð±ÐµÑ€ÐµÐ¼ Ñ‚Ð°Ñ€Ð³ÐµÑ‚ Ð¸Ð· Ñ‚Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²Ð¾Ñ‡Ð½Ñ‹Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# ÐºÐ¾Ð¿Ð¸Ñ€ÑƒÐµÐ¼ Ñ‚ÐµÑÑ‚Ð¾Ð²Ñ‹Ðµ Ð´Ð°Ð½Ð½Ñ‹Ðµ', '# Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸Ð¼ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°ÑŽÑ‰ÐµÐµ Ð¿Ð¾ Ð¼ÐµÐ´Ð¸Ð°Ð½Ðµ', '# ÐÐ¾Ñ€Ð¼Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ', '# Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ Ñ‚Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²Ð¾Ñ‡Ð½Ð¾Ð¹ Ð²Ñ‹Ð±Ð¾Ñ€ÐºÐ¸', '# Ð¢Ñ€Ð°Ð½ÑÐ¾Ñ„Ñ€Ð¼Ð°Ñ†Ð¸Ñ Ñ‚Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²Ð¾Ñ‡Ð½Ð¾Ð¹ Ð¸ Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð¹ Ð²Ñ‹Ð±Ð¾Ñ€Ð¾Ðº', '# Ñ‚Ð¾ Ð¶Ðµ ÑÐ°Ð¼Ð¾Ðµ Ñ Ð½Ð¾Ñ€Ð¼Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸ÐµÐ¹', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# Ð¡Ð¾Ð·Ð´Ð°ÐµÐ¼ Ð¼Ð¾Ð´ÐµÐ»ÑŒ', '# Ð¢Ñ€ÐµÐ½Ð¸Ñ€ÑƒÐµÐ¼ Ð¼Ð¾Ð´ÐµÐ»ÑŒ', '# ÐŸÑ€ÐµÐ´ÑÐºÐ°Ð·Ð°Ð½Ð¸Ðµ Ð½Ð° Ñ‚ÐµÑÑ‚Ð¾Ð²Ñ‹Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ð° Ð´Ð»Ñ Ð·Ð°Ð³Ñ€ÑƒÐ·ÐºÐ¸', '# Ð¡Ð¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ', '# In[22]:', '# In[23]:', '# Ð¡Ð¾Ð·Ð´Ð°Ð´Ð¸Ð¼ ÐºÐ»Ð°ÑÑÐ¸Ñ„Ð¸ÐºÐ°Ñ‚Ð¾Ñ€', '# Ð¢Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²ÐºÐ° Ð½Ð° Ñ‚ÐµÑ€Ð½Ð¸Ñ€Ð¾Ð²Ð¾Ñ‡Ð½Ñ‹Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# ÐŸÑ€ÐµÐ´ÑÐºÐ°Ð·Ð°Ð½Ð¸Ðµ Ð½Ð° Ñ‚ÐµÑÑ‚Ð¾Ð²Ñ‹Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ð° Ð´Ð»Ñ Ð·Ð°Ð³Ñ€ÑƒÐ·ÐºÐ¸', '# Ð¡Ð¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ', '# In[24]:', '# Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð¸ Ñ‚Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²ÐºÐ° Ð¾Ð±ÑŠÐµÐºÑ‚Ð° Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°ÑŽÑ‰Ð¸Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# ÐÐ¾Ñ€Ð¼Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ', '# Ð¢Ñ€ÐµÐ½Ð¸Ñ€Ð¾Ð²ÐºÐ° Ð½Ð° Ð¿Ð¾Ð»Ð¸Ð½Ð¾Ð¼Ð¸Ð°Ð»ÑŒÐ½Ñ‹Ñ… Ð´Ð°Ð½Ð½Ñ‹Ñ…', '# ÐŸÑ€ÐµÐ´ÑÐºÐ°Ð·Ð°Ð½Ð¸Ñ', '# Ð”Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼ Ð´Ð»Ñ Ð·Ð°Ð³Ñ€ÑƒÐ·ÐºÐ¸', '# Ð¡Ð¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ð°', '# In[25]:', '# Ð”Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼ Ð´Ð»Ñ Ð·Ð°Ð³Ñ€ÑƒÐ·ÐºÐ¸', '# Ð¡Ð¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð´Ð°Ñ‚Ð°Ñ„Ñ€ÐµÐ¹Ð¼Ð°', '# In[26]:', '# In[27]:']",75
kfold-lightgbm.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# In[ ]:', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# In[ ]:', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[ ]:', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# In[ ]:', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# In[ ]:', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# In[ ]:', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[ ]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# In[ ]:', '# Display/plot feature importance', '# In[ ]:', '# In[ ]:', '# In[ ]:']",54
lanasore-ver2.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# ### ë¼ì´ë¸ŒëŸ¬ë¦¬ì™€ app ë°ì´í„° ì„¸íŠ¸ ë¡œë”©', '# In[2]:', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# In[3]:', '# ### Application_trainì— ëŒ€í•œ EDA ì§„í–‰', '# In[4]:', '# app_trainì˜ ì\xa0„ì²´ ì»¬ëŸ¼ ê°œìˆ˜ëŠ” 122ê°œ ì´ë©°, ì´ ì¤‘ì—ì„œ ê²°ì¸¡ì¹˜ê°€ ìžˆëŠ” ì»¬ëŸ¼ ê°œìˆ˜ëŠ” 67ê°œ ', '# In[5]:', '# In[6]:', '# In[7]:', '# #### ì—°ì†í˜• ìˆ«ìž featureë“¤ì— ëŒ€í•´ì„œ TARGETê°’ì´ ê°ê° 0ê³¼ 1ì¼ë•Œì˜ Histogram ì‹œê°í™”', '# -  featureë“¤ì— ëŒ€í•´ TATGETê°’ ë¶„í¬ë„ ë¹„êµ ì‹œê°í™”', '# In[8]:', '# In[9]:', '# Feature Importances ì—ì„œ ì¤‘ìš”í•˜ê²Œ ë‚˜ì™”ë˜ ì¹¼ëŸ¼ë§Œ ê°€ì\xa0¸ì˜´', '# In[10]:', '# DAYS_BIRTHì˜ ì\xa0ˆëŒ€ê°’ê³¼ TARGETë³€ìˆ˜ì™€ì˜ ìƒê´€ê³„ìˆ˜', '# In[11]:', '# ê³\xa0ê° ë‚˜ì´ì— ëŒ€í•œ ížˆìŠ¤í†\xa0ê·¸ëž¨ ë¶„í¬ í™•ì¸', '# In[12]:', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=0)', '# ì\xa0œë•Œ ëŒ€ì¶œì„ ìƒí™˜í•˜ì§€ëª»í•˜ëŠ” ê³\xa0ê°ì˜ ë‚˜ì´ plot (TARGET=1)', '# ### ìŒì˜ ìƒê´€ì´ ê°€ìž¥ ë†’ì•˜ë˜ 3ê°œì˜ ë³€ìˆ˜ EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 ì‹œê°í™”', '# In[13]:', '#', '# In[14]:', '# In[15]:', '# TARGET ë³€ìˆ˜ì™€ EXT_SOURCEì™€ì˜ ìƒê´€ê´€ê³„ì™€ EXT_SOURCE ì„œë¡œê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ ì‚´í•Œ', '# In[16]:', '# In[17]:', '# ê° EXT_SOURCE ë¥¼ TARGETê°’ ë³„ë¡œ ë‚˜ëˆ\xa0ì„œ ë¶„í¬ë¥¼ ì‚´í•Œ', '# In[18]:', '# iterate through the sources', '# ### category í”¼ì²˜(object ì»¬ëŸ¼)ì„ TARGET ìœ\xa0í˜•ì— ë”°ë¼ Count ë¹„êµ', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# ëŒ€ì¶œ íšŸìˆ˜ ëŒ€ë¹„ ì—°ì²´ ë¹„ìœ¨ì´ ë‚¨ì„±ì´ ì—¬ì„±ë³´ë‹¤ ë†’ìŒ --> ì´ë¥¼ value_counts()ë¡œ í™•ì¸', '# ### ë°ì´í„° ê°€ê³µ ì\xa0„ í•™ìŠµê³¼ í…ŒìŠ¤íŠ¸ìš© ë°ì´í„° ì„¸íŠ¸ ê²°í•©', '# In[23]:', '# ###  Application ë°ì´í„° ì„¸íŠ¸ì— ë‹¤ì–‘í•œ feature engineering ìˆ˜í–‰', '# In[24]:', '# In[25]:', '# In[26]:', '# ë\xa0ˆì½”ë“œë‹¨ meanê³¼ std ë§Œ êµ¬í•¨', '# max, min ë„ í•´ë³¼ ìˆ˜ ìžˆì§€ë§Œ, ìƒê´€ê´€ê³„ê°€ ë†’ì€ ê²ƒì— ëŒ€í•´ ë„ˆë¬´ ê°€ê³µí•˜ë©´ ì„±ëŠ¥ì´ ì˜¤ížˆë\xa0¤ ë–¨ì–´ì§ˆ ìˆ˜ ìžˆìœ¼ë¯€ë¡œ meanê³¼ std ë§Œ êµ¬í•¨', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# AMT_CREDIT ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# In[31]:', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# AMT_INCOME_TOTAL ë¹„ìœ¨ë¡œ ëŒ€ì¶œ ê¸ˆì•¡ ê´€ë\xa0¨ í”¼ì²˜ ê°€ê³µ', '# ê°€ì¡±ìˆ˜ë¥¼ ê³\xa0ë\xa0¤í•œ ê°€ì²˜ë¶„ ì†Œë“ í”¼ì²˜ ê°€ê³µ. ', '# In[32]:', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ Feature ê°€ê³µ', '# DAYS_BIRTH, DAYS_EMPLOYED ë¹„ìœ¨ë¡œ ì†Œë“/ìžì‚° ê´€ë\xa0¨ Feature ê°€ê³µ. ', '# In[33]:', '# ë°ì´í„° ë\xa0ˆì´ë¸” ì¸ì½”ë”©, NULLê°’ì€ LightGBM ë‚´ë¶€ì—ì„œ ì²˜ë¦¬í•˜ë„ë¡ íŠ¹ë³„í•œ ë³€ê²½í•˜ì§€ ì•ŠìŒ', '# ### í•™ìŠµ ë°ì´í„°ì™€ í…ŒìŠ¤íŠ¸ ë°ì´í„° ë‹¤ì‹œ ë¶„ë¦¬', '# In[34]:', '# #### í•™ìŠµ ë°ì´í„°ë¥¼ ê²€ì¦ ë°ì´í„°ë¡œ ë¶„ë¦¬í•˜ê³\xa0 LGBM Classifierë¡œ í•™ìŠµ ìˆ˜í–‰', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# #### í•™ìŠµëœ Classifierë¥¼ ì´ìš©í•˜ì—¬ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡í•˜ê³\xa0 ê²°ê³¼ë¥¼ Kaggleë¡œ Submit ìˆ˜í–‰', '# In[39]:', '# In[40]:', '# In[ ]:', '# In[ ]:']",85
level-3-home-credit-a-gentle-introduction.py,"['# coding: utf-8', '# # Level 3. Home Credit Default Risk', '# ### - Start Here: A Gentle Introduction -', '# # **ì£¼íƒ ëŒ€ì¶œ ë¯¸ìƒí™˜ ê³\xa0ê° ì˜ˆì¸¡**', '# ## ì\xa0œìž‘ìž : ì„œìƒí›ˆ', '# ---', '# ', '#  - ì»¤ë¦¬í˜ëŸ¼ : https://kaggle-kr.tistory.com/32?category=868318', '# ', '#  - ì›ë¬¸ : https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction', '# ---', '# # ëª©ì°¨', '# 1. ì†Œê°œ', '# ', '# ', '# 2. ë¬¸ì\xa0œ ì\xa0•ì˜, ë°ì´í„° ì„¤ëª…', '# 2-1. ë¬¸ì\xa0œ ì\xa0•ì˜', '# 2-2. ë°ì´í„° ì\xa0•ì˜', '# 2-3. ë°ì´í„° ë¶ˆëŸ¬ì˜¤ê¸°', '# ', '# ', '# 3. EDA ( íƒìƒ‰ì\xa0 ë°ì´í„° ë¶„ì„ )', '# ', '# 4. Feature Engineering', '# 4-1. Polynomial Features', '# 4-2. Domain Knowledge Features', '# ', '# 5. ë°ì´í„° ëª¨ë¸ë§', '# # 1. ì†Œê°œ', '# >ë³¸ ë…¸íŠ¸ëŠ” ë¨¸ì‹\xa0ëŸ¬ë‹ì— ìµìˆ™í•˜ì§€ ì•Šê±°ë‚˜ ë¬¸ì\xa0œì— ì‰½ê²Œ ì´í•´í•\xa0 ìˆ˜ ìžˆëŠ” ì‚¬ëžŒë“¤ì„ ìœ„í•œ ê²ƒì´ë‹¤. ', '# ', '# ì´ì— ë”°ë¼ ë³µìž¡í•œ ëª¨ë¸ì„ ì‚¬ìš©í•˜ê±°ë‚˜ ë§Žì€ ë°ì´í„°ë¥¼ ê²°í•©í•˜ëŠ” ê²ƒì„ í•˜ì§€ ì•ŠëŠ”ë‹¤.', '# ', '# ì´ ì±Œë¦°ì§€ì˜ ëª©ì\xa0ì€ ëŒ€ì¶œ ì‹\xa0ì²\xadìžê°€ ëŒ€ì¶œì„ ìƒí™˜í•\xa0 ìˆ˜ ìžˆëŠ”ì§€ ', '# ì—¬ë¶€ë¥¼ ì˜ˆì¸¡í•˜ê¸° ìœ„í•´ ê³¼ê±° ëŒ€ì¶œ ì‹\xa0ì²\xad ë°ì´í„°ë¥¼ í™œìš©í•œë‹¤.', '# ', '# ë³¸ ë…¸íŠ¸ì˜ ëª©í‘œëŠ” ìµœëŒ€í•œ ì‰½ê²Œ ì˜ˆì¸¡ê°’ì„ ë„ì¶œí•\xa0 ìˆ˜ ìžˆë„ë¡ í•œë‹¤.', '# ë\xa0ˆì´ë¸”ì˜ ë¶„ë¥˜ëŠ” ë‹¤ìŒê³¼ ê°™ì€ ì´ì§„ ë¶„ë¥˜ë¡œ ì´ë£¨ì–´ì§„ë‹¤.', '#  - 0 ( ì\xa0•ì‹œ ëŒ€ì¶œ ìƒí™˜ )', '#  - 1 ( ì\xa0•ì‹œ ëŒ€ì¶œ ìƒí™˜ ì–´ë\xa0¤ì›€ )', '# # 2. ë¬¸ì\xa0œ ì\xa0•ì˜, ë°ì´í„° ì\xa0•ì˜', '# ## 2-1. ë¬¸ì\xa0œ ì\xa0•ì˜', '# ì—¬ê¸°ì„œ í”„ë¡œì\xa0íŠ¸ì˜ ëª©í‘œëŠ” ì´ë¯¸ ì\xa0œì‹œë˜ì—ˆë‹¤.', '# ', '# > "" ê° ì‹\xa0ì²\xadìžê°€ ëŒ€ì¶œì„ ìƒí™˜ í•\xa0 ìˆ˜ìžˆëŠ” ëŠ¥ë\xa0¥ì„ ì˜ˆì¸¡í•˜ì‹œì˜¤.""', '# ', '# ì•„ëž˜ëŠ” Home Credit í”„ë¡œì\xa0íŠ¸ì˜ ìš”ì•½ë³¸ì´ë‹¤.', '# ', '# > 1997ë…„ ì²´ì½”ì—ì„œ ì„¤ë¦½ëœ ë¹„ì€í–‰ ê¸ˆìœµ ê¸°ê´€ìž…ë‹ˆë‹¤. ', '# ì‹\xa0ìš©ê¸°ë¡ì´ ì\xa0ê±°ë‚˜ ì\xa0„í˜€ ì—†ëŠ” ì‚¬ëžŒë“¤ì„ ëŒ€ìƒìœ¼ë¡œ ëŒ€ì¶œì— ì¤‘ì\xa0ì„ ë‘ê³\xa0 ìžˆìŠµë‹ˆë‹¤.', '# ë³¸ ì‚¬ì˜ Home Credit ì€ ê¸ì\xa0•ì\xa0ì´ê³\xa0 ì•ˆì\xa0„í•œ ëŒ€ì¶œ ê²½í—˜ì„ ì\xa0œê³µí•¨ìœ¼ë¡œì¨ ê³\xa0ê°ì„ í™•ë³´í•˜ë\xa0¤ ë…¸ë\xa0¥í•©ë‹ˆë‹¤.', '# ì´ëŸ¬í•œ ì¸êµ¬ë“¤ì´ ê¸ì\xa0•ì\xa0ì¸ ëŒ€ì¶œ ê²½í—˜ì„ ê°–ë„ë¡ í•˜ê¸° ìœ„í•´ Home Creditì€ ê³\xa0ê°ì˜ ìƒí™˜ ëŠ¥ë\xa0¥ì„ ì˜ˆì¸¡í•˜ê¸° ìœ„í•´ ', '# ì\xa0„í™” ë° ê±°ëž˜ ì\xa0•ë³´ë¥¼ í¬í•¨í•œ ë‹¤ì–‘í•œ ë°ì´í„°ë¥¼ í™œìš©í•©ë‹ˆë‹¤. ì´ë¥¼ í†µí•´ ìƒí™˜ ê°€ëŠ¥í•œ ê³\xa0ê°ì´ ê±°ë¶€ë˜ì§€ ì•Šê³\xa0 ', '# ëŒ€ì¶œì— ì„±ê³µí•\xa0 ìˆ˜ ìžˆë„ë¡ í•˜ëŠ” ê²ƒì´ ëª©í‘œìž…ë‹ˆë‹¤. Home Creditì€ í˜„ìž¬ ì´ëŸ¬í•œ í†µê³„ë¥¼ ì˜ˆì¸¡í•˜ê¸° ìœ„í•´ ', '# ë‹¤ì–‘í•œ í†µê³„ ë° ë¨¸ì‹\xa0 ëŸ¬ë‹ ë°©ë²•ì„ ì‚¬ìš©í•˜ê³\xa0 ìžˆì§€ë§Œ, Kagglersë“¤ì˜ ë°©ë²•ì„ ë³´ê¸° ìœ„í•´ ì´ ì±Œë¦°ì§€ë¥¼ ì\xa0œì•ˆí•©ë‹ˆë‹¤.', '# ## 2-2. ë°ì´í„° ì\xa0•ì˜', '# ', '# ë°ì´í„°ëŠ” Home Credit ì— ì˜í•´ì„œ ì\xa0œê³µë˜ë©°, ì´ 7ê°€ì§€ë¡œ êµ¬ì„±ëœë‹¤.', '# ', '#  - application_train/application_test ', '#  Home Creditì˜ ê° ëŒ€ì¶œ ì‹\xa0ì²\xadì— ëŒ€í•œ ì\xa0•ë³´ë¥¼ ê°€ì§„ ë°ì´í„°', '#  ëª¨ë“\xa0 ëŒ€ì¶œë‚´ì—\xadì€ ê° í–‰ì„ ê°€ì§€ë©°, SK_ID_CURR featureë¡œ íŒë‹¨í•˜ë©°, ê·¸ ê¸°ì¤€ì€', '#  0 : ëŒ€ì¶œìƒí™˜ ë˜ì—ˆìŒ, 1 : ëŒ€ì¶œìƒí™˜ ë˜ì§€ ì•Šì•˜ìŒ ìœ¼ë¡œ ë‚˜ë‰œë‹¤.', '#  - bureau ', '#  ë‹¤ë¥¸ ê¸ˆìœµ ê¸°ê´€ìœ¼ë¡œë¶€í„°ì˜ ê³\xa0ê°ì˜ ì´ì\xa0„ ëŒ€ì¶œ ë‚´ì—\xad', '#  - bureau_balance ', '#  bureauì— ëŒ€í•œ ì›”ë³„ ë°ì´í„°', '#  - previous_application ', '#  Home Credit ìœ¼ë¡œë¶€í„°ì˜ ê³\xa0ê°ì˜ ì´ì\xa0„ ëŒ€ì¶œ ë‚´ì—\xad', '#  SK_ID_PREV feature ë¡œ íŒë‹¨í•œë‹¤.', '#  - POS_CASH_balance ', '#  application data ì— ëŒ€ì¶œì´ ìžˆëŠ” ê³\xa0ê°ì˜ ì´ì\xa0„ ëŒ€ì¶œ ì‹\xa0ì²\xad ë‚´ì—\xad', '#  - credit_card_balance ', '#  Home Credit ì„ ì‚¬ìš©í•˜ëŠ” ê³\xa0ê°ì˜ ì‹\xa0ìš© ì¹´ë“œ ë‚´ì—\xad, ì›”ë³„ ë°ì´í„°', '#  - installments_payment ', '#  Home Credit ì„ ì‚¬ìš©í–ˆë˜ ê³\xa0ê°ì˜ ëŒ€ì¶œ ìƒí™˜ ë‚´ì—\xad', '#  ', '#  ì•„ëž˜ì˜ í‘œëŠ” ëª¨ë“\xa0 ë°ì´í„°ê°€ ì–´ë–»ê²Œ ì—°ê´€ë˜ì–´ìžˆëŠ”ì§€ ë³´ì—¬ì¤€ë‹¤.', '# ', '# ![home_credit](https://user-images.githubusercontent.com/53182751/69926570-4f1d8100-14f8-11ea-8111-1f6dfc90f867.png)', '# ', '# ì´ë¥¼ ë²”ì£¼ë¡œ ë‚˜íƒ€ë‚´ë©´ 6ê°€ì§€ë¡œ ë‚˜ëˆ„ì–´ ë³¼ ìˆ˜ ìžˆë‹¤.', '# 1. ì¸êµ¬í†µê³„ì\xa0 íŠ¹ì„±', '# 2. ì§ì—… ë° ì†Œë“ ê´€ë\xa0¨ íŠ¹ì„±', '# 3. ê¸°ë³¸ ìžì‚° í˜„í™©', '# 4. ê±°ì£¼ì§€ ê´€ë\xa0¨ íŠ¹ì„±', '# 5. ì™¸ë¶€ ì‹\xa0ìš©í‰ê°€ ìžë£Œ', '# 6. ì‹\xa0ì²\xadí•œ ëŒ€ì¶œì˜ íŠ¹ì„±', '# ', '# ìš°ë¦¬ëŠ” ì´ ê²½ìŸì—ì„œ ìˆœìœ„ë¥¼ ë†’ì´ê¸° ìœ„í•œ ê²ƒì´ ì•„ë‹Œ ìž…ë¬¸ìžë¡œì„œ', '# ìµœëŒ€í•œ í•˜ë‚˜ì”© ì´í•´í•˜ëŠ” ê²ƒì´ ëª©í‘œì´ë¯€ë¡œ, ë³¸ ë…¸íŠ¸ì—ì„œëŠ” ', '# application_train application_test ë§Œ ì‚¬ìš©í•\xa0 ê²ƒì´ë‹¤.', '# ## 2-3. ë°ì´í„° ë¶ˆëŸ¬ì˜¤ê¸°', '# ', '# íŒŒì´ì¬ íŒ¨í‚¤ì§€ë¡œëŠ” numpy, pandas, sklearn, matplotlib ë¥¼ ì‚¬ìš©í•\xa0 ì˜ˆì\xa0•ì´ë‹¤.', '# In[1]:', '# ì˜¤ë¥˜ ë¬´ì‹œ', '# ì‹œê°í™”ë¥¼ ìœ„í•œ íŒ¨í‚¤ì§€', '# In[2]:', '# print(os.listdir(""../input/""))', '# íŒŒì¼ëª… í™•ì¸', '# In[3]:', '# Training data í™•ì¸', '# Training data ëŠ” 307,511 ê°œì˜ í–‰ê³¼ 122ê°œì˜ ì—´(feature)ì„ ê°€ì§€ê³\xa0 ìžˆë‹¤.', '# In[4]:', '# Testing data í™•ì¸', '# Test data ëŠ” Training ë³´ë‹¤ í–‰ì´ ì\xa0ìœ¼ë©°, ëª©í‘œ(TARGET) ì—´ì´ ì—†ë‹¤.', '# # 3. EDA (íƒìƒ‰ì\xa0 ë°ì´í„° ë¶„ì„)', '# ', '# EDA ëŠ” ë°ì´í„°ë¥¼ ë³´ê³\xa0 ë°ì´í„°ì˜ ì¶”ì„¸, ì´ìƒ, íŒ¨í„´ ë˜ëŠ” ê´€ê³„ë¥¼ ì°¾ê¸° ìœ„í•œ ê²ƒì´ë‹¤.', '# ì´ë¥¼ í†µí•´ ë°ì´í„°ê°€ ë¬´ì—‡ì„ ë§í•˜ëŠ”ì§€ íŒŒì•…í•˜ê³\xa0 ëª¨ë¸ë§ ì„\xa0íƒì— ë„ì›€ì„ ì¤„ ìˆ˜ ìžˆë‹¤.', '# ', '# ê° ë°ì´í„°ê°€ ì–´ë–»ê²Œ ì´ë£¨ì–´ì¡ŒëŠ”ì§€ ì•Œì•„ë³´ìž.', '# ### Target ì˜ ë¶„í¬ ì¡°ì‚¬', '# In[5]:', '# In[6]:', '# ìœ„ì˜ 0(ëŒ€ì¶œ ì\xa0•ì‹œ ìƒí™˜)ì´ 1(ëŒ€ì¶œ ì\xa0•ì‹œ ìƒí™˜ x) ì— ë¹„í•´ ë†’ë‹¤ ë¼ëŠ” ', '# ë°ì´í„°ë¥¼ í†µí•´ ì´ ë¬¸ì\xa0œê°€ ì§€ë‚œ 2ë²ˆ ì£¼ì\xa0œì¸ Porto ì˜ ë°ì´í„° ì…‹ê³¼ ë§ˆì°¬ê°€ì§€ë¡œ', '# ë¶ˆê·\xa0í˜• ë¬¸ì\xa0œì¸ ê²ƒì„ ì•Œ ìˆ˜ ìžˆë‹¤.', '# ### ê²°ì¸¡ê°’ ì¡°ì‚¬', '# In[7]:', '        # ì´ ê²°ì¸¡ê°’', '        # ê²°ì¸¡ê°’ì˜ ë¹„ìœ¨', '        # ê²°ê³¼ë¥¼ í…Œì´ë¸”ì— ì\xa0€ìž¥', '        # ì—´ì˜ ì´ë¦„ ìˆ˜ì\xa0•', '        # ê²°ì¸¡ê°’ ë‚´ë¦¼ì°¨ìˆœìœ¼ë¡œ ì\xa0•ë\xa0¬', '        # ìš”ì•½', '        # return', '# In[8]:', '# ê²°ì¸¡ê°’ í†µê³„', '# ë¨¸ì‹\xa0ëŸ¬ë‹ ëª¨ë¸ë§ì„ í•\xa0 ë•Œ, ìœ„ì˜ ê²°ì¸¡ê°’ì„ ì§€ìš°ê±°ë‚˜ ì±„ì›Œì•¼ í•œë‹¤.', '# ìš°ë¦¬ëŠ” ê²°ì¸¡ê°’ì´ ë†’ì€ feature ë¥¼ ì—†ì•\xa0ì§€ ì•Šê³\xa0 ìµœëŒ€í•œ ëª¨ë‘ ì´ìš©í•\xa0 ê²ƒì´ë‹¤.', '# ', '# ì¶”í›„ XGBoost ê°™ì€ ëª¨ë¸ì„ ì‚¬ìš©í•\xa0 ë•Œì—ëŠ” ê²°ì¸¡ê°’ì„ ì²˜ë¦¬í•˜ëŠ” ë°©ë²•ì´ ë³´ë‹¤ ë‹¤ì–‘í•˜ë‹¤.', '# ### ê° ì—´ì˜ íƒ€ìž… íŒŒì•…', '# In[9]:', '# ê° ì—´ì˜ íƒ€ìž… ê°œìˆ˜', '# In[10]:', '# Number of unique classes in each object column', '# object ì—´(ë²”ì£¼í˜• ë³€ìˆ˜)ì˜ ê³\xa0ìœ\xa0 í•\xadëª© ìˆ˜ íŒŒì•…', '# ### ë²”ì£¼í˜• ë³€ìˆ˜ ì¸ì½”ë”©', '# ', '# ë” ë‚˜ì•„ê°€ê¸° ì\xa0„ì—, ë²”ì£¼í˜• ë³€ìˆ˜ë“¤ì„ ë‹¤ë£° í•„ìš”ê°€ ìžˆë‹¤.', '# ë¨¸ì‹\xa0ëŸ¬ë‹ì˜ ëŒ€ë¶€ë¶„ ëª¨ë¸ë“¤ì€ ë²”ì£¼í˜• ë³€ìˆ˜ë¥¼ ë‹¤ë£° ìˆ˜ ì—†ë‹¤. (LightGBM ë“±ì„ ì\xa0œì™¸)', '# ë”°ë¼ì„œ ì´ëŸ¬í•œ ë²”ì£¼í˜• ë³€ìˆ˜ë“¤ì„ ìˆ«ìžë¡œ ì¸ì½”ë”© í•\xa0 ìˆ˜ ìžˆëŠ” ë°©ë²•ì„ ì°¾ì•„ì•¼ í•œë‹¤.', '# ì¸ì½”ë”© í•˜ëŠ” ë°©ë²•ì€ 2ê°€ì§€ê°€ ìžˆë‹¤.', '# ', '#  - Label encoding ', '#  ![label_encoding](https://user-images.githubusercontent.com/53182751/69928041-ba1d8680-14fd-11ea-91c6-c502b8638dc1.png)', '# ', '#  - one-hot encoding ', '#  ![one_hot_encoding](https://user-images.githubusercontent.com/53182751/69928068-d4576480-14fd-11ea-8ba6-ff8e93312f6e.png)', '#  ', '#  ì¼ë°˜ì\xa0ìœ¼ë¡œ ë²”ì£¼í˜• ë³€ìˆ˜(ë‚¨ì„±/ì—¬ì„± ë“±)ê°€ 2ê°œì˜ ê³\xa0ìœ\xa0 ê°’ë§Œ ê°€ì§€ê³\xa0 ìžˆë‹¤ë©´', '#  Lable encoding ì€ ê´œì°®ì§€ë§Œ, 2ê°œ ì´ìƒì˜ ê³\xa0ìœ\xa0 ê°’ì„ ê°€ì§€ê³\xa0 ìžˆë‹¤ë©´', '#  One-hot encoding ì„ ì‚¬ìš©í•˜ëŠ” ê²ƒì´ ê´œì°®ìœ¼ë¯€ë¡œ ë³¸ ë…¸íŠ¸ì—ì„œëŠ”', '#  2ê°œì˜ ë³€ìˆ˜ë¥¼ ê°€ì§€ê³\xa0 ìžˆëŠ” ë²”ì£¼í˜• ë³€ìˆ˜ëŠ” Label encoding', '#  2ê°œ ì´ì‚¬ìœ¼ì´ ë³€ìˆ˜ë¥¼ ê°€ì§€ê³\xa0 ìžˆëŠ” ë²”ì£¼í˜• ë³€ìˆ˜ëŠ” one-hot encoding ì„ ì§„í–‰í•œë‹¤.', '# ', '# ### Label Encoding and One-Hot Encoding', '# In[11]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '            # Train on the training data', '            # Transform both training and testing data', '            # Keep track of how many columns were label encoded', '# In[12]:', '# one-hot encoding of categorical variables', '# ### Train, Test ë°ì´í„°ì˜ ì—´ ì\xa0•ë\xa0¬', '# ', '# Train, Test ë°ì´í„°ê°€ ë™ì¼í•œ ì—´ì˜ ê°œìˆ˜ë¥¼ ê°€ì§€ê³\xa0 ìžˆì–´ì•¼ í•œë‹¤.', '# ', '# one-hot encoding ì„ ì§„í–‰í•˜ë©´ì„œ ìƒê¸´ dummy ë¡œ ì»¬ëŸ¼ì´ ë” ìƒê²¨ ì´ë¥¼ Test ì—´ì˜ ìˆ˜ì™€ ë™ì¼í•˜ê²Œ ë§Œë“¤ì–´ì£¼ìž.', '# In[13]:', '# TARGET ì„ ë³´ì¡´í•˜ê¸° ìœ„í•´ ì¶”ì¶œ', '# ë°ì´í„° í”„ë\xa0ˆìž„ìœ¼ë¡œ Train, Test ë°ì´í„° ì\xa0•ë\xa0¬ ( ì—´ì˜ ê°œìˆ˜ ë§žì¶¤ )', '# TARGET ì¶”ê°€', '# ### ë‹¤ì‹œ EDA ', '# ', '# #### ì´ìƒ ìœ\xa0ë¬´ íŒŒì•…', '# ', '# EDAë¥¼ ìˆ˜í–‰í•\xa0 ë•Œ í•\xadìƒ ì¡°ì‹¬í•´ì•¼ í•\xa0 ê²ƒì€ ë°ì´í„° ë‚´ì˜ ì´ìƒì´ë‹¤.', '# ì´ëŠ” ì¸¡ì\xa0• ìž¥ë¹„ì˜ ì˜¤ë¥˜, ìœ\xa0íš¨í•˜ì§€ë§Œ ê·¹ë‹¨ì\xa0ì¸ ì¸¡ì\xa0• ë“±ì´ ìžˆë‹¤.', '# ', '# DAYS_BIRTH ë¥¼ ì‚´íŽ´ë³´ìž', '# ì—¬ê¸°ì„œ DAYS_BIRTH ëž€, ë‚˜ì´ë¥¼ ì˜ë¯¸í•œë‹¤.', '# ì´ ì™¸ì—ë„ DAYS_EMPLOYED ë“± DAYS ë¡œ ì‹œìž‘ë˜ëŠ” ë³€ìˆ˜ê°€ ìžˆëŠ”ë°,', '# ì´ëŸ° ë³€ìˆ˜ë“¤ì€ ""ëŒ€ì¶œ ì‹\xa0ì²\xad ì‹œì\xa0 - í•´ë‹¹ ì‚¬ê±´ ë°œìƒ ì‹œì\xa0""ìœ¼ë¡œ ê³„ì‚°í•˜ê¸° ë–„ë¬¸ì—', '# ë§ˆì´ë„ˆìŠ¤(-) í˜•íƒœë¡œ í‘œì‹œë˜ëŠ” ê²ƒì— ì£¼ì˜ í•´ì•¼ í•œë‹¤.', '# ', '# ì´ ë°ì´í„°ë¥¼ ìž˜ í™œìš©í•˜ë©´ ë§Žì€ ë¶„ì„ì„ í•\xa0 ìˆ˜ ìžˆëŠ”ë°, ê°€ë\xa0¹ DAYS_BIRTH ë¥¼', '# ì–‘ìˆ˜ë¡œ ë°”ê¾¸ê³\xa0 365ë¡œ ë‚˜ëˆ„ê²Œ ë˜ë©´ ë‚˜ì´ê°€ ê³„ì‚°ë˜ê³\xa0, ì´ë¥¼ 10ì‚´ ì”© ë¬¶ê²Œ ë˜ë©´', '# ì—°ë\xa0¹ëŒ€ë³„ íŠ¹ì„±ì´ ì–´ë–»ê²Œ ë‚˜íƒ€ë‚˜ëŠ”ì§€ ë¶„ì„ì´ ê°€ëŠ¥í•˜ë‹¤.', '# ', '# ì´ì\xa0œ ë‚˜ì´ì— ë”°ë¥¸ ì´ìƒ ìœ\xa0ë¬´ë¥¼ íŒŒì•…í•´ë³´ìž.', '# In[14]:', '# ë‚˜ì´ íŠ¹ì´ì¹˜', '# ìœ„ì˜ ê²°ê³¼ë¥¼ ë³´ë©´ ë‚˜ì´ëŒ€ê°€ í•©ë¦¬ì\xa0ìœ¼ë¡œ ë³´ì¸ë‹¤.', '# ë†’ì€ ìª½ì´ë‚˜ ë‚®ì€ ìª½ì— íŠ¹ì´ì¹˜ê°€ ì—†ì–´ ë³´ì¸ë‹¤.', '# ', '# ë‹¤ìŒìœ¼ë¡œ ê³\xa0ìš©ì¼ì„ ë³´ìž', '# In[15]:', '# ìµœëŒ€ ê°€ì¹˜ê°€ 1000ë…„ì´ë¯€ë¡œ ì´ ë°ì´í„°ëŠ” ì´ìƒì´ ìžˆë‹¤ê³\xa0 ë³¼ ìˆ˜ ìžˆë‹¤.', '# In[16]:', '# ë‹¤ìŒìœ¼ë¡œ ë³€ì¹™ì\xa0ì¸ ê³\xa0ê°ë“¤ì´ ì¼ë°˜ì\xa0ì¸ ê³\xa0ê°ì— ë¹„í•´ ', '# ëŒ€ì¶œ ìƒí™˜ë¥\xa0ì˜ ê²½í–¥ì´ ì–´ë–¤ì§€ íŒŒì•…í•´ë³´ìž.', '# In[17]:', '# ì´ìƒ ê³\xa0ê°ì˜ ëŒ€ì¶œ ìƒí™˜ë¥\xa0ì´ ì¼ë°˜ì\xa0ì¸ ê³\xa0ê°ë³´ë‹¤ ë‚®ë‹¤ëŠ” ê²ƒì„ ì•Œ ìˆ˜ ìžˆë‹¤!', '# In[18]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# In[19]:', '# ## ìƒê´€ê´€ê³„', '# ', '# ë²”ì£¼í˜• ë³€ìˆ˜ì™€ ì´ìƒì¹˜ë¥¼ ë‹¤ë£¨ì—ˆìœ¼ë‹ˆ EDAë¥¼ ê³„ì†í•´ë³´ìž.', '# ë°ì´í„°ë¥¼ ì´í•´í•˜ê¸° ìœ„í•´ì„œëŠ” feature ê°„ì˜ ìƒê´€ê´€ê³„ë¥¼ íŒŒì•…í•˜ëŠ” ê²ƒì´ë‹¤.', '# ', '# ìƒê´€ê³„ìˆ˜ì˜ ì\xa0ˆëŒ€ê°’ì— ëŒ€í•œ ì¼ë°˜ì\xa0ì¸ í•´ì„ì€ ë‹¤ìŒê³¼ ê°™ë‹¤.', '# ', '#  - .00-.19 â€œë§¤ìš° ì•½í•œ ìƒê´€ê´€ê³„â€', '#  - .20-.39 â€œì•½í•œ ìƒê´€ê´€ê³„â€', '#  - .40-.59 â€œì¤‘ê°„ ìƒê´€ê´€ê³„â€', '#  - .60-.79 â€œê°•í•œ ìƒê´€ê´€ê³„â€', '#  - .80-1.0 â€œë§¤ìš° ê°•í•œ ìƒê´€ê´€ê³„â€', '# In[20]:', '# Find correlations with the target and sort', '# Display correlations', '# ### ë‚˜ì´ê°€ ëŒ€ì¶œ ìƒí™©ì— ë¯¸ì¹˜ëŠ” ì˜í–¥ íŒŒì•…', '# In[21]:', '# Find the correlation of the positive days since birth and target', '# ì´ë¥¼ í•´ì„í•´ë³´ë©´ ê³\xa0ê°ì˜ ë‚˜ì´ê°€ ë“¤ìˆ˜ë¡ ëŒ€ì¶œê¸ˆì„ ë” ìžì£¼', '# ìƒí™˜í•˜ëŠ” ê²½í–¥ì´ ìžˆë‹¤ëŠ” ëª©í‘œ ì˜ë¯¸ì™€ ë¶€ì\xa0•ì\xa0ì¸ ì„\xa0í˜• ê´€ê³„ê°€ ìžˆë‹¤.', '# In[22]:', '# Set the style of plots', '# Plot the distribution of ages in years', '# In[23]:', '# ì\xa0•ì‹œ ìƒí™˜ëœ ëŒ€ì¶œì˜ ë‚˜ì´ ë¶„í¬', '# ì\xa0•ì‹œ ìƒí™˜ë˜ì§€ ì•Šì€ ëŒ€ì¶œì˜ ë‚˜ì´ ë¶„í¬', '# Labeling of plot', '# ì—°ë\xa0¹ì´ ë‚®ì„ ìˆ˜ë¡ ëŒ€ì¶œ ìƒí™˜ ëŠ¥ë\xa0¥ì´ ë–¨ì–´ì§€ëŠ” ê²ƒì„ ë³¼ ìˆ˜ ìžˆë‹¤.', '# ', '# ì¢€ ë” ì\xa0œëŒ€ë¡œ íŒŒì•…í•˜ê¸° ìœ„í•´ êµ¬ê°„ì„ ë¶„í•\xa0í•´ë³´ìž.', '# In[24]:', '# Age information into a separate dataframe', '# Bin the age data', '# In[25]:', '# Group by the bin and calculate averages', '# In[26]:', '# Graph the age bins and the average of the target as a bar plot', '# Plot labeling', '# ì´ë¥¼ í•´ì„í•´ë³´ë©´ ë‚˜ì´ê°€ ì\xa0Šì„ìˆ˜ë¡ ëŒ€ì¶œê¸ˆì„ ', '# ìƒí™˜í•˜ì§€ ì•Šì„ ê°€ëŠ¥ì„±ì´ ë†’ë‹¤ëŠ” ê²ƒì„ ì•Œ ìˆ˜ ìžˆë‹¤.', '# ### ì™¸ë¶€ ê¸ˆìœµê¸°ê´€ìœ¼ë¡œë¶€í„°ì˜ ë°ì´í„°', '# ', '# TARGET ê³¼ ê°€ìž¥ ê°•í•œ ìŒì˜ ìƒê´€ê´€ê³„ë¥¼ ê°–ëŠ” 3ê°œì˜ ë³€ìˆ˜ëŠ”', '# EXT_SURCE_1, EXT_SURCE_2, EXT_SURCE_3 ë¬¸ì„œì— ë”°ë¥´ë©´', '# ì´ feature ë“¤ì€ ì‹\xa0ìš©ë“±ê¸‰ì„ ì˜ë¯¸í•œë‹¤.', '# In[27]:', '# Extract the EXT_SOURCE variables and show correlations', '# In[28]:', '# Heatmap of correlations', '# 3 ê°€ì§€ EXT_SOURCE ê¸°ëŠ¥ ëª¨ë‘ TARGET ê³¼ ìŒì˜ ìƒê´€ê´€ê³„ë¥¼ ê°€ì§€ê³\xa0 ìžˆì–´', '# EXT_SOURCE ì˜ ê°€ì¹˜ê°€ ì¦ê°€í•¨ì— ë”°ë¼ ê³\xa0ê°ì´ ëŒ€ì¶œê¸ˆì„ ìƒí™˜í•\xa0 ê°€ëŠ¥ì„±ì´', '# ë†’ë‹¤ëŠ” ê²ƒì„ ë‚˜íƒ€ë‚¸ë‹¤.', '# ', '# ë˜í•œ DayS_BIRTHì™€ EXT_SOURCE_1 ê³¼ ì–‘ì˜ ìƒê´€ê´€ê³„ë¥¼ ë³´ìž„ìœ¼ë¡œì¨ ì´ ì\xa0ìˆ˜ì˜', '# ìš”ì¸ ì¤‘ í•˜ë‚˜ê°€ ê³\xa0ê° ì—°ë\xa0¹ìž„ì„ ì•Œ ìˆ˜ ìžˆë‹¤.', '# In[29]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# ìœ„ì˜ ê·¸ëž˜í”„ë¥¼ í•´ì„í•´ë³´ë©´ EXT_SOURCE_3ì´ ëŒ€ìƒ ê°’ ì‚¬ì´ì˜ í° ì°¨ì´ë¥¼ ë³´ì´ë¯€ë¡œ,', '# ì´ íŠ¹ì§•ì´ ì‹\xa0ì²\xadìžê°€ ëŒ€ì¶œê¸ˆì„ ìƒí™˜í•\xa0 ê°€ëŠ¥ì„±ê³¼ ì–´ë–¤ ê´€ê³„ê°€ ìžˆì„ì„ ì•Œ ìˆ˜ ìžˆë‹¤.', '# ## Pairs Plot', '# ', '# ìµœì¢… íƒìƒ‰ì\xa0 ê·¸ëž˜í”„ë¡œì„œ, EXT_SOURCE ë³€ìˆ˜ì™€ DatS_BIRTH ë³€ìˆ˜ì˜ ê·¸ëž˜í”„ë¥¼ ë§Œë“¤ ìˆ˜ ìžˆë‹¤.', '# In[30]:', '# Copy the data for plotting', '# Add in the age of the client in years', '# Drop na values and limit to first 100000 rows', '# Function to calculate correlation coefficient between two columns', '# Create the pairgrid object', '# Upper is a scatter plot', '# Diagonal is a histogram', '# Bottom is density plot', '# # 4. Feature Engineering', '# ', '# ## 4-1. Polynomial Features', '# In[31]:', '# êµí˜¸ ìž‘ìš© ë³€ìˆ˜ë“¤ì„ ë§Œë“¤ê¸° ìœ„í•´ ì•„ëž˜ì˜ ë³€ìˆ˜ë“¤ì„ ë¶ˆëŸ¬ì˜¤ìž', '# ê²°ì¸¡ê°’ ì±„ìš°ê¸°', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', 'poly_transformer = PolynomialFeatures(degree = 3) # ì—¬ê¸°ì„œ degree ëŠ” ë‹¤í•\xadì‹ì„ ì˜ë¯¸', '# In[32]:', '# Train the polynomial features', '# Transform the features', '# In[33]:', '# In[34]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# ìƒˆë¡\xadê²Œ ìƒì„±í•œ ë³€ìˆ˜ ì¤‘ ëª‡ëª‡ ë³€ìˆ˜ëŠ” ê¸°ì¡´ì˜ ë³€ìˆ˜ë³´ë‹¤ TARGET ê³¼ ', '# ë” í° ìƒê´€ ê´€ê³„ë¥¼ ê°–ëŠ”ë‹¤. ì´ë¥¼ Train, Test ë°ì´í„°ì— ', '# ë„£ì—ˆì„ ë•Œì™€ ë„£ì§€ ì•Šì•˜ì„ ë•Œë¥¼ ë¹„êµ í›„ íš¨ê³¼ë¥¼ ì‹œí—˜í•´ ë³¼ ìˆ˜ ìžˆë‹¤. ', '# ', '# ìƒˆë¡\xadê²Œ ìƒì„±í•œ ê°’ë“¤ì´ ì˜í–¥ì´ ìžˆì„ì§€ ëª¨ë¥´ì§€ë§Œ, ë³¸ ì»¤ë„ì˜ ì› ì\xa0€ìžëŠ” mergeë¥¼ ì‹œì¼œì¤€ë‹¤.', '# ê¸°ì¡´ì˜ app_train ì´ë¼ëŠ” ì›ë³¸ ë°ì´í„°ì—ì„œ SK_ID_CURRì„ ê°€ì\xa0¸ì˜¨ ë’¤ poly_featureì— ë„£ì–´ì£¼ê³\xa0', '# ì¡°ì¸ì„ ì‹œì¼œì¤€ë‹¤. ê·¸ë¦¬ê³\xa0 ë‹¤ì‹œ ì\xa0•ë\xa0¬í•˜ìž.', '# ', '# In[35]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# ## 4-2. Domain Knowledge Features', '# ', '# êµí˜¸ ìž‘ìš© ë³€ìˆ˜ ì™¸ì—ë„ ê³\xa0ê°ì˜ ëŒ€ì¶œ ë°˜í™˜ ì—¬ë¶€ë¥¼ íŒë‹¨í•˜ëŠ” ë°ì—', '# ëª‡ ê°€ì§€ featureë¥¼ ë” ë§Œë“¤ ìˆ˜ ìžˆë‹¤.', '# ', '#  - CREDIT_INCOME_PERCENT ', '#  ê³\xa0ê° ì†Œë“ì— ëŒ€í•œ ì‹\xa0ìš© ê¸ˆì•¡ì˜ ë°±ë¶„ìœ¨', '#  - ANNUILY_INCOME_PERCENT ', '#  ê³\xa0ê° ì†Œë“ì— ëŒ€í•œ ëŒ€ì¶œ ì—°ê¸ˆì˜ ë°±ë¶„ìœ¨', '#  - CREDIT_TERM ', '#  ì›” ì§€ë¶ˆì˜ê¸°ê°„', '#  - DAYS_EMPLOYEM_PERCENT ', '#  ê³\xa0ê°ì˜ ì—°ë\xa0¹ì— ë¹„í•´ ê³\xa0ìš©ëœ ì¼ì˜ ë°±ë¶„ìœ¨', '# In[36]:', '# In[37]:', '# ìƒˆë¡\xadê²Œ ì¶”ê°€ëœ ë³€ìˆ˜ì™€ TARGET ì„ ì‹œê°í™” í•´ë³´ìž', '# In[38]:', '# iterate through the new features', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# ìƒˆë¡\xadê²Œ ì¶”ê°€í•œ featureì˜ íš¨ê³¼ë¥¼ ì‹œí—˜í•˜ë\xa0¤ë©´ í…ŒìŠ¤íŠ¸ í•˜ëŠ” ìˆ˜ ë°–ì— ì—†ë‹¤.', '# ## 5. ë°ì´í„° ëª¨ë¸ë§', '# ', '# ### ëžœë¤ í¬ë\xa0ˆìŠ¤íŠ¸', '# In[39]:', '# Drop the target from the training data', '# Feature names', '# Copy of the testing data', '# ê²°ì¸¡ê°’ì˜ ì¤‘ì•™ê°’ìœ¼ë¡œ ì±„ìš°ê¸°', '# ìŠ¤ì¼€ì¼ì„ 0~1ë¡œ ì§€ì\xa0•', '# Fit on the training data', '# Transform both training and testing data', '# Repeat with the scaler', '# In[40]:', '# Make the random forest classifier', '# In[41]:', '# Train on the training data', '# Extract feature importances', '# Make predictions on the test data', '# In[42]:', '# ì´ì\xa0œ ê²°ê³¼ë¥¼ ì\xa0œì¶œí•˜ìž', '# In[43]:', '# Make a submission dataframe', '# Save the submission dataframe', '# In[ ]:', '# ëžœë¤ í¬ë\xa0ˆìŠ¤íŠ¸ ëª¨ë¸ì—ì„œ ì–´ë–¤ ë³€ìˆ˜ê°€ ì¤‘ìš”í•˜ê²Œ ì“°ì˜€ëŠ”ì§€', '# feature_importances_ë¥¼ í™•ì¸í•´ë³´ìž', '# In[44]:', '# In[45]:', '# In[ ]:']",374
lgbm-credit-default-prediction.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# One of the main problems that I faced is the large amount of data that needs to be handled, so I process the data one portion at a time in order to always keep under control the memory usage, applying similar transformations multiple times.', '# Application data', '# For all the csv files I consider XNA and XAP as nan (along with the default nan).', '# In[6]:', '# Cleaning the application data', '# In[7]:', '# In[8]:', '# In[9]:', '# I drop a few rows in the train data where there are less than .01% missing values in columns where the test data has got no missing values and then I join the two datasets adding one column IS_TRAIN to identify where each record belongs.', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# Analysis of columns with more than 60% of missing values', '# In[17]:', '# In[18]:', '# OWN_CAR_AGE can be handled with FLAG_OWN_CAR when using the tree based gradient boosting.', '# EXT_SOURCE_1 will be imputed when the external bureau data is added.', '# The rest is data relative to the housing and it is mostly missing, so I drop all those columns.', '# In[19]:', '# In[20]:', '# In the final submission I decided to also leave the housing features which slightly improve the score.', '# In[21]:', '# Label encoding for binary categorical features', '# In[22]:', '# Next I handle the three categorical features with missing values: ORGANIZATION_TYPE, NAME_TYPE_SUITE, OCCUPATION_TYPE. The approach that I prefer to follow is to create a new categorical value for all of them called Nan in order to avoid messing up the existing data, which will be handled by the get_dummies function used for the one hot encoding. I will use the same approch for all the following data.', '# One hot encoding of all the other categorical features', '# In[23]:', '# I check the correlation of the features with the target to see if I can drop the remaining columns with missing values', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# In[28]:', '# In[29]:', '# EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 are the best features, which are scores obtained from external sources. I tried to impute them using the rest of the data, but I only end up lowering the correlation with the target feature so I prefer to let them as they are since the the lgbm algorithm can handle missing data.', '# The 6 AMT_REQ_CREDIT_BUREAU features are missing because these clients are not present in the bureau credit data. So I add a new feature IS_IN_BUREAU.', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# As for the CNT_SOCIAL_CIRCLE features, not knowing how this data was gathered, I decided to add a feature HAS_SOCIAL_CIRCLE.', '# In[34]:', '# In[35]:', '# In[36]:', '# Hand crafted features. The few application data features that actually regard the entity of the loan are only slightly correlated to the target. So I tried to build a few new features', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# Only AMT_GOODS_FRAC is actually a very good feature. I kept all the others leaving the machine learning algorithm to decide how to use them.', '# Bureau Balance data', '# In[43]:', '# I drop the data of loans that are not related to clients in the application data.', '# In[44]:', '# In[45]:', '# One-hot encoding', '# In[46]:', '# Aggregation', '# In[47]:', '# In[48]:', '# In[49]:', '# In[50]:', '# In[51]:', '# In[52]:', '# In[53]:', '# Bureau data', '# In[54]:', '# In[55]:', '# In[56]:', '# In[57]:', '# In[58]:', '# In[59]:', '# In[60]:', '# In[61]:', '# In[62]:', '# In[63]:', '# In[64]:', '# In[65]:', '# In[66]:', '# Previous applications', '# In[67]:', '# In[68]:', '# In[69]:', '# In[70]:', '# In[71]:', '# In[72]:', '# In[73]:', ""prev_application = prev_application.groupby('SK_ID_CURR').agg(['max', 'sum', 'mean']) # last"", '# In[74]:', '# In[75]:', '# In[76]:', '# In[77]:', '# In[78]:', '# In[79]:', '# POS Cash Balance', '# In[80]:', '# In[81]:', '# In[82]:', '# In[83]:', '# In[84]:', ""pos_cash_balance = pos_cash_balance.groupby(['SK_ID_PREV', 'SK_ID_CURR']).agg(['sum', 'mean', 'max']) # last"", '# In[85]:', '# In[86]:', '# In[87]:', '# In[88]:', '# In[89]:', '# In[90]:', '# In[91]:', '# In[92]:', '# In[93]:', '# In[94]:', '# In[95]:', '# In[96]:', '# Credit Card Balance', '# In[97]:', '# In[98]:', '# In[99]:', '# In[100]:', '# In[101]:', ""credit_card_balance = credit_card_balance.groupby(['SK_ID_PREV', 'SK_ID_CURR']).agg(['sum', 'mean', 'max']) # last"", '# In[102]:', '# In[103]:', '# In[104]:', '# In[105]:', '# In[106]:', '# In[107]:', '# In[108]:', '# In[109]:', '# In[110]:', '# In[111]:', '# Installment payments', '# In[112]:', '# In[113]:', '# In[114]:', '# In[115]:', '# In[116]:', '# In[117]:', '# In[118]:', '# In[119]:', '# In[120]:', '# In[121]:', '# In[122]:', '# In[123]:', '# In[124]:', '# In[125]:', '# In[126]:', '# In[127]:', '# In[128]:', '# Feature selection', '# In order to reduce the number of features before starting the training and evaluation, I use the lgbm algorithm to select the most important features based on the number of times the feature is used in a model. ', '# In[129]:', '# In[130]:', '# In[131]:', '# In[132]:', '# In[133]:', '# In[134]:', '# In[135]:', '# In[136]:', '# In[137]:', '# In[138]:', '# In[139]:', '# In[140]:', '# In[141]:', '# In[142]:', '# In[143]:', '# In[144]:', '# In[145]:', '# Hyperparameter Tuning', '# The approach that I follow for the hyperparameter tuning is the random search on the interval around the main default parameters of the lgbt classifier.', '# In[146]:', '# In[147]:', '# In[148]:', '# remove the comment to do hyperparameter tuning', '# In[149]:', '# Training and evaluation', '# In[150]:', '# In[151]:', '# In[152]:', '# Submission', '# In[153]:', '# In[154]:', '# References', '# ', '# 1. Guolin Ke Qi Meng Thomas Finely Taifeng Wang Wei Chen Weidong Ma Qiwei Ye Tie-Yan Liu. 2017. [LightGBM: A Highly Efficient Gradient Boosting Decision Tree](https://papers.nips.cc/paper/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.pdf)']",196
lgbm-with-bayesian-optimization.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', ' #  n_estimators=1327, n_jobs=-1, num_leaves=106, objective=None,random_state=None, reg_alpha=0.5129992714397862, reg_lambda=0.38268769901820565, silent=True, subsample=0.7177561548329953, subsample_for_bin=80000,', '  #     subsample_freq=0, verbose=1)', '# In[7]:', '# In[8]:', '# Save the submission dataframe']",12
lighgbm_with_selected_features.py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just added a few features so I thought I had to make release it as well...', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', ""            'learning_rate': 0.02,  # 02,"", ""            'min_child_weight': 60, # 39.3259775,"", '    # Write submission file and plot feature importance', '# Display/plot feature importance']",44
lighgbm_with_selected_features_impr.py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just added a few features so I thought I had to make release it as well...', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', ""            'learning_rate': 0.02,  # 02,"", ""            'min_child_weight': 60, # 39.3259775,"", '    # Write submission file and plot feature importance', '# Display/plot feature importance']",44
light-gbm-easy-peasy.py,"['# coding: utf-8', '# # Home Credit Solution ', '# ## This Kernal is made for beginners learning purpose.', '# ### Feel free to fork and use it. ', '# ### You will learn how to handle large dataset without being confused.', '# ![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSkr6pXKnRSPy5tYRwUBMr0nZwjAzDVAzVFAigd6bauuwvHoQTf)', '# ', '# # 1. Introduction', '# In this notebook, we will take an initial look at the Home Credit default risk machine learning competition currently hosted on Kaggle. The objective of this competition is to use historical loan application data to predict whether or not an applicant will be able to repay a loan.', '# # 2. Importing requires packages', '# In[ ]:', '# numpy and pandas for data manipulation', '# sklearn preprocessing for dealing with categorical variables', '# File system manangement', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# # 3. Retrieving the Data', '# In[ ]:', '# List files available', '# # 4. Exploration of Application Train/Test Data.', '# In[ ]:', '# Training data', '# ## 4.1 Merge both train and test dataset', '# In[ ]:', '# We can see there are some anamolies in  `DAYS_EMPLOYED`.', '# ', '# `DAYS_EMPLOYED` at max seems to have very large positive value.', '# ', '# ## 4.2 Removing Anamolies / Outlier', '# In statistics, an outlier is an observation point that is distant from other observations. An outlier may be due to variability in the measurement or it may indicate experimental error; the latter are sometimes excluded from the data set. An outlier can cause serious problems in statistical analyses.', '# ', '# ', '# ', '# In[ ]:', '# 365243 days is somewhat around 1000 years, which is impossible.', '# ', '# So, its best for us to replace it by NaN.', '# In[ ]:', '# NaN values for DAYS_EMPLOYED: 365.243 -> nan', '# ## 4.3 Categorical Variables ', '# In[ ]:', '# Number of unique classes in each object column', ""# `CODE_GENDER` has unknown value 'XNA'. Its better to remove these 4 rows."", '# In[ ]:', '# Remove the rows with XNA value in CODE_GENDER', '# ## 4.4 Label Encoder and One Hot Encoding', '# ', '# **Label Encoder **: As you might know by now, we canâ€™t have text in our data if weâ€™re going to run any kind of model on it. So before we can run a model, we need to make this data ready for the model.', '# ', '# And to convert this kind of categorical text data into model-understandable numerical data, we use the Label Encoder class.', '# ', '# Suppose, we have a feature State which has 3 category i.e India , France, China . So, Label Encoder will categorize them as 0, 1, 2.', '# ', '# **One Hot Encoding** : One hot encoding is a process by which categorical variables are converted into a form that could be provided to ML algorithms to do a better job in prediction. ', '# ', '# If we applied OHE on say Gender column which has category male,female. OHE will create two new column Gender_male, Gender_female and store the value 0 and 1 according to the main category value.', '# In[ ]:', '# Create a label encoder object', '# Iterate through the columns', '        # If 2 or fewer unique categories', '# One Hot Encoding ', '# ## 4.5 Add some feature variables', ""# Since i don't consider myself as a credit expert. I have used this features from [this](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features/code#L261) script by Aguiar."", '# ', ""# - DAYS_EMPLOYED_PERC: the percentage of the days employed relative to the client's age."", ""# - INCOME_CREDIT_PERC: the percentage of the credit amount relative to a client's income."", '# - INCOME_PER_PERSON : the percentage of income per person.', ""# - ANNUITY_INCOME_PERC: the percentage of the loan annuity relative to a client's income."", '# - PAYMENT_RATE : the percentage of rate of payment annually.', '# In[ ]:', '# ## Target Column Distribution ', '# The target is what we are asked to predict: either a 0 for the loan was repaid on time, or a 1 indicating the client had payment difficulties. We can first examine the number of loans falling into each category.', '# In[ ]:', '# In[ ]:', '# There are far more loans that were repaid on time than loans that were not repaid. Once we get into more sophisticated machine learning models, we can weight the classes by their representation in the data to reflect this imbalance.', '# ## Garbage Collection', '# Pythonâ€™s memory allocation and deallocation method is automatic. The user does not have to preallocate or deallocate memory similar to using dynamic memory allocation in languages such as C or C++.', '# ', '# Here we are using **Manual Garbage Collection**', '# ', '# Invoking the garbage collector manually during the execution of a program can be a good idea on how to handle memory being consumed by reference cycles.', '# The garbage collection can be invoked manually in the following way:', '# In[ ]:', '# If you wish not to use GC then better watch your RAM. It is likely to over-exceed and Kernel error may come up.', '# ## Handling Categorical Features', '# In[ ]:', '# function to obtain Categorical Features', '# function to factorize categorical features', '# function to create dummy variables of categorical features', '# In[ ]:', '# # factorize the categorical features from train and test data', '# df_cats = _get_categorical_features(df)', '# df = _factorize_categoricals(df, df_cats)', '# # 5. Exploration of Bureau and Bureau_data', '# In[ ]:', '# ## 5.1 One Hot Encoding', '# In[ ]:', '# ## 5.2 Feature Engineering - Bureau Data', '# In[ ]:', '# Average Values for all bureau features ', '# # 6. Exploration of Previous Application', '# In[ ]:', '# ## 6.1 Handling Outliers', '# In[ ]:', '# ## 6.2 One Hot Encoding', '# In[ ]:', '# ## 6.3 Feature Engineering - Previous Application', '# In[ ]:', '# # 7. Exploration of POS Cash Balance', '# In[ ]:', '# ## 7.1 One Hot Encoding', '# In[ ]:', '# ## 7.2 Feature Engineering - POS Cash Balance', '# In[ ]:', '# # 8. Exploration of Installment Payments', '# In[ ]:', '# ## 8.1 One Hot Encoding', '# In[ ]:', '# ## 8.2 Adding some new features', '# In[ ]:', '# Percentage and difference paid in each installment (amount paid and installment value)', '# Days past due and days before due (no negative values)', '# ## 8.3 Feature Engineering - Installment Payments', '# In[ ]:', '# # 9. Exploration of Credit Card', '# In[ ]:', '# ## 9.1 One Hot Encoding', '# In[ ]:', '# ## 9.2 Feature Engineering - Credit Card', '# In[ ]:', '# # 10. LightGBM', '# ', '# - It is a gradient boosting framework that uses **tree based learning algorithm**.', '# - It grows tree vertically while other algorithm grows trees horizontally meaning that Light GBM grows tree leaf-wise while other algorithm grows level-wise.', '# -  It is prefixed as â€˜Lightâ€™ because of its** high speed**.', '# - It can handle the **large size of data** and takes **lower memory to run.**', '# - This is popular because it focuses on **accuracy of results.**', '# -  LGBM also supports **GPU learning.**', '# ', '# **Why not to use Light GBM?**', '# ', '# - It is **not advisable** to use LGBM on **small datasets**.', '# - Light GBM is sensitive to overfitting and can easily **overfit small data**.', '# ', '# The only complicated thing is **parameter tuning.** Light GBM covers more than 100 parameters but donâ€™t worry, you donâ€™t need to learn all.', '# ', '# Lets learn about some of the parameters we used in our model :', '# ', '# - **n_estimators** : number of boosting iterations.', '# - **objective** : This is the most important parameter and specifies the application of your model, whether it is a regression problem or classification problem. LightGBM will by default consider model as a regression model.', '# ', '#     - regression: for regression', '#     - binary: for binary classification', '#     - multiclass: for multiclass classification problem', '#    ', '# - **learning_rate** : This determines the impact of each tree on the final outcome. GBM works by starting with an initial estimate which is updated using the output of each tree. The learning parameter controls the magnitude of this change in the estimates. Typical values: 0.1, 0.001, 0.003â€¦', '# - **reg_alpha** : L1 regularization', '# -  **reg_lambda** : L2 regularization', '# ', '# In[ ]:', '# ## 10.1 Prepare Final Train and Test data', '# In[ ]:', '# Divide in training/validation and test data', '# ## 10.2 Cross Validation Model', '# **K-Fold Cross Validation**: To reduce variability, in most machine learning methods multiple rounds of cross-validation are performed using different partitions, and the validation are averaged at the end. This method is known as k-fold cross validation.', '# ', '# Increase the `n_splits` to make better prediction. But it may increase the time of processing.', '# In[ ]:', '# In[ ]:', '# Create arrays and dataframes to store results', '# ## 10.3 Fitting the model and Predicting', '# In[ ]:', '# Iterate through each fold', '    # Training data for the fold', '    # Validation data for the fold', '    # Create the model', '    # Train the model', '# ## 10.5 Submission', '# In[ ]:', '# **Thanks for taking time to go through the kernel. **', '# ', '# **Show your appreciation by upvoting or commenting about your feedbacks. **']",182
lightgbm-automated-feature-engineering-easy.py,"['# coding: utf-8', '# **Want to find out how to do the feature enigeering step automatically in a concise and compact tutorial, applying it on a binary classification problem using lightGBM?---look no further **', '# ', '# After finding out that data scientists created a tool that ""replaces"" data-scientists I had to try it out. Thank you [https://docs.featuretools.com/](http://)! Feature-engineering is tiresome, and takes the biggest amount of time do it. What if we can make it a one liner. Well now it seems we can. Even more appropriately we will be working on Home Credit Default Risk. A set of datasets where all of them are in a relationship with one-another and from all of them some information should be extracted. Featuretools makes it easy! Our goal in the end is simple. Predict whether the customer will default or not.', '# In[ ]:', '# Load in the data, NOTE: datasets are huge, working on them will be computationally costly. In order to avoid it we can introduce some limited sample size.', '# In[ ]:', '# Please note that you could have read it with simple read_csv, without using os (operating system commands...)', '# If we merge datasets now we can perofrm neccesary operations and seperate them later.', '# In[ ]:', '# Merge the datasets into a single one for training', '# **NOTE** This NaN handling is just for the sake of it. It is by no-means complete and there are lot of them underneath (function is built that shows us percentage). But there is a specific way that GBM (light and xBGM) handle missing values. So even tough it would be better we want to focus on algortihm and automatic feature engineering!', '# In[ ]:', '# A lot of the continuous days variables have integers as missing value indicators.', '# **NOTE** Even tough it is automatic, we can incorporate some manual features. IF we know some domain specific information.', '# In[ ]:', '# Amount loaned relative to salary', '# Number of overall payments (I think!)', '# Social features', '# ***Featuretools*** is an open-source Python library for automatically creating features out of a set of related tables using a technique called deep feature synthesis. Automated feature engineering, like many topics in machine learning, is a complex subject built upon a foundation of simpler ideas. By going through these ideas one at a time, we can build up our understanding of how featuretools which will later allow for us to get the most out of it.', '# ', '# There are a few concepts that we will cover along the way:', '# ', '# 1.  Entities and EntitySets', '# 2. Relationships between tables', '# 3. Feature primitives: aggregations and transformations', '# 4. Deep feature synthesis', '# In[ ]:', '# Create new entityset', '# Create an entity from the applications (app_both) dataframe', '# This dataframe already has an index', '# Create an entity from the bureau dataframe', '# This dataframe already has an index', '# Create an entity from the bureau balance dataframe', '# Create an entity from the installments dataframe', '# Create an entity from the previous applications dataframe', '# Create an entity from the credit card balance dataframe', '# Create an entity from the POS Cash balance dataframe', '# **2. Relationships betweeen the sets**', '# In[ ]:', '# Relationship between applications and credits bureau', '# Relationship between applications and credits bureau', '# Relationship between applications and credits bureau', '# Relationship between applications and previous applications', '# Relationship between applications and credit card balance', '# Relationship between applications and POS cash balance', '# **Feature primitives** Basically which functions are we going to use to create features. Since we did not specify it we will be using standard ones (check doc) There is a option to define own ones or to just select some of the standards.', '# In[ ]:', '# Create new features using specified primitives', '# In[ ]:', '# **Label encoding** Making it machine readable', '# In[ ]:', '    # Label encode categoricals', '# In[ ]:', '# **NaN imputation** will be skipped in this tutorial.', '# In[ ]:', '# Let us split the variables one more time.', '# In[ ]:', '# Separate into train and test', '# **Train** the model, predict, etc.', '# In[ ]:', '# In[ ]:', '# In[ ]:']",63
lightgbm-predictions-explained-with-shap-0-796.py,"['# coding: utf-8', '# This kernel shows how one can try to explain the predictions of a given boosted tree model using the lib SHAP https://github.com/slundberg/shap', '# ', '# The model is then retrained only with the best features to avoid fitting to noise and improve our LB score ;)', '# ', '# It is based on the best performing public script and some other variants: i.e. https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features et al.', '# In[ ]:', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[ ]:', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance', '# Display/plot shapley values', '# In[ ]:', '# In[ ]:', '# ## Using SHAP (SHapley Additive exPlanations)', '# In[ ]:', ""# explain the model's predictions using SHAP values"", '# (same syntax works for LightGBM, CatBoost, and scikit-learn models)', '# In[ ]:', '# load JS visualization code to notebook', ""# visualize the first prediction's explanation (in log-odds scale)"", '# In[ ]:', '# Reconstructing the lgb output from shap_values:', '# In[ ]:', '# visualize the training set predictions', '# In[ ]:', '# summarize the effects of top features', '# ## Select Best Features', '# To avoid fitting to noise and improve our LB score ;)', '# In[ ]:']",66
lightgbm.py,"[""        #    df[col] = df[col].astype('category')""]",1
lightgbm_7th_place_solution (1).py,"['    # Add ratios and groupby between different tables', '    # CREDIT TO INCOME RATIO', '    # PREVIOUS TO CURRENT CREDIT RATIO', '    # PREVIOUS TO CURRENT ANNUITY RATIO', '    # PREVIOUS TO CURRENT CREDIT TO ANNUITY RATIO', '    # DAYS DIFFERENCES AND RATIOS', '# ------------------------- LIGHTGBM MODEL -------------------------', '    # Hold oof predictions, test predictions, feature importance and training/valid auc', '        # Feature importance by GAIN and SPLIT', '    # Get the average feature importance between folds', '    # Save feature importance, test predictions and oof predictions as csv', '        # Generate oof csv', '        # Save submission (test data) and feature importance', '# ------------------------- APPLICATION PIPELINE -------------------------', '    # Data cleaning', ""    df = df[df['CODE_GENDER'] != 'XNA']  # 4 people with XNA code gender"", ""    df = df[df['AMT_INCOME_TOTAL'] < 20000000]  # Max income in test is 4M; train has a 117M value"", '    # Flag_document features - count and kurtosis', '    # Categorical age - based on target=1 plot', '    # New features based on External sources', '    # Credit ratios', '    # Income ratios', '    # Time ratios', '    # Groupby: Statistics for applications in the same group', '    # Encode categorical features (LabelEncoder)', '    # Drop most flag document columns', '# ------------------------- BUREAU PIPELINE -------------------------', '    # Credit duration and credit/account end date difference', '    # Credit to debt ratio and difference', '    # One-hot encoder', '    # Join bureau balance features', '    # Flag months with late payments (days past due)', '    # Aggregate by number of months in balance and merge with bureau (loan length agg)', '    # General loans aggregations', '    # Active and closed loans aggregations', '    # Aggregations for the main loan types', '    # Time based aggregations: last x months', '    # Last loan max overdue', '    # Ratios: total debt/total credit and active loans debt/ active loans credit', '    # Calculate rate for each category with decay', '    # Min, Max, Count and mean duration of payments (months)', '# ------------------------- PREVIOUS PIPELINE -------------------------', '    # One-hot encode most important categorical features', '    # Feature engineering: ratios and difference', '    # Interest ratio on previous application (simplified)', '    # Active loans - approved and not complete yet (last_due 365243)', '    # Find how much was already payed in active loans (using installments csv)', '    # Active loans: difference of what was payed and installments', '    # Merge with active_df', '    # Perform aggregations for active applications', '    # Change 365.243 values to nan (missing)', '    # Days last due difference (scheduled x done)', '    # Categorical features', '    # Perform general aggregations', '    # Merge active loans dataframe on agg_prev', '    # Aggregations for approved and refused loans', '    # Aggregations for Consumer loans and Cash loans', '    # Get the SK_ID_PREV for loans with late payments (days past due)', '    # Aggregations for loans with late payments', '    # Aggregations for loans in the last x months', '# ------------------------- POS-CASH PIPELINE -------------------------', '    # Flag months with late payment', '    # Aggregate by SK_ID_CURR', '    # Sort and group by SK_ID_PREV', '    # Percentage of previous loans completed and completed before initial term', '    # Number of remaining installments (future installments) and percentage from total', '    # Group by SK_ID_CURR and merge', '    # Percentage of late payments for the 3 most recent applications', '    # Last month of each application', '    # Most recent applications (last 3)', '    # Drop some useless categorical features', '# ------------------------- INSTALLMENTS PIPELINE -------------------------', '    # Group payments and get Payment difference', '    # Payment Entry: Days past due and Days before due', '    # Flag late payment', '    # Percentage of payments that were late', '    # Flag late payments that have a significant amount', '    # Flag k threshold late payments', '    # Aggregations by SK_ID_CURR', '    # Installments in the last x months', '    # Last x periods trend features', '    # Last loan features', '# ------------------------- CREDIT CARD PIPELINE -------------------------', '    # Amount used from limit', '    # Current payment / Min payment', '    # Late payment', '    # How much drawing of limit', '    # Aggregations by SK_ID_CURR', '    # Last month balance of each credit card application', '    # Aggregations for last x months', '# ------------------------- UTILITY FUNCTIONS -------------------------', '                # Can use unsigned int here too', '# ------------------------- CONFIGURATIONS -------------------------', '# GENERAL CONFIGURATIONS', '# INSTALLMENTS TREND PERIODS', '# LIGHTGBM CONFIGURATION AND HYPER-PARAMETERS', '# AGGREGATIONS', '    # Categorical', '    # Group by loan duration features (months)', '    # Engineered features', '    # Engineered features', '    # Engineered features', '    # The following features are only for approved applications', '    # Engineered features', '    # Engineered features', '    # Engineered features']",106
lightgbm_harder_better_slower.py,"['# Memory saving function credit to https://www.kaggle.com/gemartin/load-data-reduce-memory-usage', '    # # Add new features', '    # Amount loaned relative to salary', '    # A lot of the continuous days variables have integers as missing value indicators.', '    # Number of overall payments (I think!)', '    # Social features', '    # Previous loan amounts & installments', '    # Misc', '    # # Aggregate and merge supplementary datasets', '    # Previous applications', '    # Average the rest of the previous app data', '    # Previous app categorical features', '    # Credit card data - numerical features', '    # Credit card data - categorical features', '    # Credit bureau data - numerical features', '    # Credit bureau categorical features', '    # Bureau balance data', '    # Pos cash data - weight values by recency when averaging', '    # Unweighted aggregations of numeric features', '    # Pos cash data data - categorical features', '    # Installments data', '    # Add more value counts', '    # # Further engineering of combined features', '    # Label encode categoricals', '# Merge the datasets into a single one for training', '# Separate metadata', '# Process the data set.', '# Capture other categorical features not as object data types:', '# Re-separate into train and test', '# Some parameters taken from https://www.kaggle.com/ogrellier/fork-lightgbm-with-simple-features/code                       ', '# Plot importances']",31
lightgbm_try.py,"['import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '    # make sure that the number of features in train and test should be same', ""#                              application_train_ohe['TARGET'])"", '# You can use the full sample and do sample weighting in lightgbm using `is_unbalance` OR `scale_pos_weight` argument', '# But it makes the code to run 8x..10x slower, which is ok for the run with pre-optimised parametersm but is too slow for HP optimisation']",8
lightgbm_with_simple_features.py,"['# HOME CREDIT DEFAULT RISK COMPETITION', '# Most features are created by applying min, max, mean, sum and var functions to grouped tables. ', '# Little feature selection is done and overfitting might be a problem since many features are related.', '# The following key ideas were used:', '# - Divide or subtract important features to get rates (like annuity and income)', '# - In Bureau Data: create specific features for Active credits and Closed credits', '# - In Previous Applications: create specific features for Approved and Refused applications', '# - Modularity: one function for each table (except bureau_balance and application_test)', '# - One-hot encoding for categorical features', '# All tables are joined with the application DF using the SK_ID_CURR key (except bureau_balance).', '# You can use LightGBM with KFold or Stratified KFold.', '# Update 16/06/2018:', '# - Added Payment Rate feature', '# - Removed index from features', '# - Use standard KFold CV (not stratified)', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Some simple new features (percentages)', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance']",55
lightgbm_with_weighted_averages_dropout_787.py,"['    # # Add new features', '    # Amount loaned relative to salary', '    # Number of overall payments (I think!)', '    # Social features', '    # A lot of the continuous days variables have integers as missing value indicators.', '    # # Aggregate and merge supplementary datasets', '    # Previous applications', '    # Average the rest of the previous app data', '    # Previous app categorical features', '    # Credit card data - numerical features', '    # Credit card data - categorical features', '    # Credit bureau data - numerical features', '    # Bureau balance data', '    # Pos cash data - weight values by recency when averaging', '    # Unweighted aggregations of numeric features', '    # Pos cash data data - categorical features', '    # Installments data', '    # Add more value counts', '    # Label encode categoricals', '# Merge the datasets into a single one for training', '# Separate metadata', '# Process the data set.', '# Capture other categorical features not as object data types:', '# Re-separate into train and test']",24
ligthgbm-0-781-home-credit-default-risk.py,"['# coding: utf-8', '# # Home Credit Default Risk - Competition', '# ## LigthGBM [0.781]', '# # 1. Load Data and Modules', '# In[1]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# # Preparation for modeling', '# In[ ]:', '# In[ ]:', '        # n_estimators=1000,', '        # num_leaves=20,', '        # colsample_bytree=.8,', '        # subsample=.8,', '        # max_depth=7,', '        # reg_alpha=.1,', '        # reg_lambda=.1,', '        # min_split_gain=.01', '# In[ ]:', '# In[ ]:', '# Plot feature importances', '# In[ ]:', '# Plot ROC curves', '    # Plot the roc curve', '# In[ ]:', '# Plot ROC curves']",43
machinelearningflow.py,"['# coding: utf-8', '# **[Problem 1] Cross Validation**', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# loading the csv of the dataset', '# cleaning the dataset by filling the empy data(null)', '# get only existing data with no missing values', '# separating them into variables', '# In[3]:', '# ', '# **[Problem 2] Grid search**', '# In[4]:', '# checking which model and params are best', '# defining an array to store the scores', '# **[Problem 3] Survey from Kaggle Notebooks**', '# Model Hyperparameter Optimization is the  points of choice or configuration that allow a machine learning model to be customized for a specific task or dataset.', '# ', '# Parameters are different from hyperparameters. Parameters are learned automatically; hyperparameters are set manually to help guide the learning process.', '# ', '# the Gradient Boosting Algorithm for Machine Learning The origin of boosting from learning theory and AdaBoost.', '# How gradient boosting works including the loss function, weak learners and the additive model.', '# How to improve performance over the base algorithm with various regularization schemes.', '# Modal explainability ', '# Early Stopping to Avoid Overtraining Neural Networks A compromise is to train on the training dataset but to stop training at the point when performance on a validation dataset starts to degrade. This simple, effective, and widely used approach to training neural networks is called early stopping.', '# **[Problem 4] Creating a model with high generalization performance**', '# In[5]:', '# creating an instance of the model', '# save the default params', '# number of folds', '# creating a dataset', '# Cross validation results when avoid overfitting', '# displaying the results', '# imported the whole dataset', '# created a subset of only numbers', '# split the data using kfold', '# used gridsearchCV to find the best model and params to fine tune my classiffiers', '# **[Problem 5] Final model selection**', '# In[6]:', '# loading the csv of the test dataset', '# cleaning the dataset by removing the empy data(null)', '# separating them into variables', '# standardizing the data', '# predicting', '# In[7]:', '# In[8]:', '# In[ ]:']",55
magic_of_weighted_average_rank_0_80.py,"['# USING WEIGHTED AVERAGE RANK METHOD', '# Plese refer this discussion for more detials - https://www.kaggle.com/c/home-credit-default-risk/discussion/60934']",2
micro-model-174-features-0-8-auc-on-home-credit (1).py,"['# coding: utf-8', '# ## a Micro Model Study on Home Credit', '# ', '# The Home Credit Default Risk dataset on the Kaggle is subjected as a final project of my DS/ML bootcamp, and I have spent a period of three weeks on this project. I developed various models and quite a large number of them having AUC scores better than 0.8 ( highest one +0.804). Unfortunately, I could not run any full version of my models on Kaggle because of insufficient RAM issue even though datasets are zipped to almost 4 times by integer/float dtype conversion on my datasets. In addition, I made a bleend boosting study to acheive highest AUC score (0.81128, much highers possible) on Kaggle (https://www.kaggle.com/hikmetsezen/blend-boosting-for-home-credit-default-risk).', '# ', '# Here I would like to share my micro model study with you. This micro model has only 174 features and is able to reach better than 0.8 AUC score. Micro model is developed on my base model via successive feature elimination and addition procedure, which is developed by myself. My ambition is that tremendously increasing number of feature is not always necessary to improve performance of model! ', '# ', '# Mostly I use Colab Pro to compute LigthGBM calculations with 5-fold CV on GPUs. My models have 900-1800 features. ', '# ', '# I have a limited knowledge about the credit finance, therefore, I combined many Kaggle notebooks for expending number of features as much as I desire and/or acceptance of my LigthGBM models harvesting further enhance scores. I would like to thank these contributors. Some of them are listed here:', '# * https://www.kaggle.com/jsaguiar/lightgbm-with-simple-features <=-- my models are based on this study', '# * https://www.kaggle.com/jsaguiar/lightgbm-7th-place-solution', '# * https://www.kaggle.com/sangseoseo/oof-all-home-credit-default-risk <=-- in most cases these hyperparameters are used', '# * https://www.kaggle.com/ashishpatel26/different-basic-blends-possible <=-- thank for blending idea', '# * https://www.kaggle.com/mathchi/home-credit-risk-with-detailed-feature-engineering', '# * https://www.kaggle.com/windofdl/kernelf68f763785', '# * https://www.kaggle.com/meraxes10/lgbm-credit-default-prediction', '# * https://www.kaggle.com/luudactam/hc-v500', '# * https://www.kaggle.com/aantonova/aggregating-all-tables-in-one-dataset', '# * https://www.kaggle.com/wanakon/kernel24647bb75c', '# In[1]:', '# !pip install lightgbm==2.3.1', '# import lightgbm', '# lightgbm.__version__', '# In[2]:', '# load libraries', '# In[3]:', '# run functions and pre_settings', '# In[4]:', '    # general cleaning procedures', ""    df = df[df['AMT_INCOME_TOTAL'] < 20000000] # remove a outlier 117M"", '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', ""    df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace=True) # set null value"", ""    df['DAYS_LAST_PHONE_CHANGE'].replace(0, np.nan, inplace=True) # set null value"", '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # Flag_document features - count and kurtosis', '    # Categorical age - based on target=1 plot', '    # New features based on External sources', '    # Some simple new features (percentages)', '    # Credit ratios', '    # Income ratios', '    # Time ratios', '    # EXT_SOURCE_X FEATURE', '    # AMT_INCOME_TOTAL : income', '    # CNT_FAM_MEMBERS  : the number of family members', ""    # DAYS_BIRTH : Client's age in days at the time of application"", '    # DAYS_EMPLOYED : How many days before the application the person started current employment', '    # other feature from better than 0.8', '# In[5]:', '    # Credit duration and credit/account end date difference', '    # Credit to debt ratio and difference', '    # CREDIT_DAY_OVERDUE :', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# In[6]:', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Feature engineering: ratios and difference', '    # Interest ratio on previous application (simplified)', '    # Days last due difference (scheduled x done)', '    # from off', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# In[7]:', '    # Flag months with late payment', ""    pos['POS_IS_DPD'] = pos['SK_DPD'].apply(lambda x: 1 if x > 0 else 0) #  0) & (x < 120) else 0)"", '    # Features', '    # Count pos cash accounts', '    # Percentage of previous loans completed and completed before initial term', '    # Number of remaining installments (future installments) and percentage from total', '    # Group by SK_ID_CURR and merge', '    # Percentage of late payments for the 3 most recent applications', '    # Last month of each application', '    # Most recent applications (last 3)', '# In[8]:', '    # Group payments and get Payment difference', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Flag late payment', '    # Flag late payments that have a significant amount', '    # Flag k threshold late payments', '    # Features: Perform aggregations', '    # Count installments accounts', '    # from oof (DAYS_ENTRY_PAYMENT)', '# In[9]:', '    # Amount used from limit', '    # Current payment / Min payment', '    # Late payment  0 else 0)', '    # How much drawing of limit', '    # General aggregations', '    # Count credit card lines', '    # Last month balance of each credit card application', '# In[10]:', '    # loading predicted result ', '    # split train, and test datasets', '    # Expand train dataset with two times of test dataset including predicted results', '    # Cross validation model', '    # Create arrays and dataframes to store results', '    # limit number of feature to only 174!!!', '    # print final shape of dataset to evaluate by LightGBM', '    # create submission file', '# In[11]:']",108
minimal-pipeline-lightgbm-lb-744-auc.py,"['# coding: utf-8', '# # Minimal pipeline with LightGBM (~.744 AUC on Public Leaderboard)', '# ', '# - Still trying to make it shorter. Please do let me know if you have any suggestions/improvements! ', '# - No EDA, no custom/manual feature engineering (aside from generic numeric/categoricals handling in pipeline)', '# - (pipeline goal is to be as generic as possible)', '# - some warnings with LabelEnconder I coudnt fix yet, checking.', '# - note: sklearn .20 has some  solutions for OneHot/Categorical Imputation, anyone knows ow to update the package Kaggle kernels?', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Split X,y', '# Split kaggle train, reserve internal hold out test set', '# In[ ]:', '# Note: sklearn .20 has now SimpleImputer works for categorical also, workaround', '# In[ ]:', '# Some workarounds for sklearn 19.1 (.20 use OneHot, SimpleImputer)', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Full fit', '# In[ ]:', '# Prepare submission', '# In[ ]:', '# Check predictions ', '# In[ ]:']",27
ml-dive-week4.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# Check missing value ratios', '# In[5]:', '# Bring high cordinality columns to numerical pipeline', '# In[6]:', '    # Bring high cordinality columns to numerical pipeline', '# missing_df is sorted by missing_ratio', '# In[7]:', '# In[8]:', '# Column preprocessing', '# Model pipeline', '# In[9]:']",25
model-stacking.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '    # Get all the models tested so far in DataFrame format', '    # Get current parameters and the best parameters    ', '    # Save all model results', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# prev.head(10)', '# In[ ]:', '# avg_prev.head(10)', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# bayes_cv_tuner = BayesSearchCV(', '#     estimator = lgb.LGBMClassifier(', ""#         boosting='dart',"", ""#         application='binary',"", ""#         metric='auc',"", '#         drop_rate=0.2,', '#         n_jobs=1,', '#         verbose=0', '#     ),', '#     search_spaces = {', ""#         'learning_rate': (0.01, 0.3, 'uniform'),"", ""#         'num_leaves': (1, 225),      "", ""#         'max_depth': (0, 8),"", ""#         'feature_fraction':(0.5, 1.0, 'uniform'),"", '#         ""min_data_in_leaf"":(20, 100),', ""# #         'min_child_samples': (0, 50),"", ""#         'max_bin': (100, 1000),"", ""#         'reg_lambda': (1e-9, 1.0, 'log-uniform'),"", ""#         'reg_alpha': (1e-9, 1.0, 'log-uniform'),"", ""#         'scale_pos_weight': (1,12, 'uniform'),"", '# },    ', ""#     scoring = 'roc_auc',"", '#     cv = StratifiedKFold(', '#         n_splits=3,', '#         shuffle=True,', '#         random_state=42', '#     ),', '#     n_jobs = 1,', '#     n_iter = 15,   ', '#     verbose = 0,', '#     refit = True,', '#     random_state = 42', '# )', '# # Fit the model', '# result = bayes_cv_tuner.fit(data, y, callback=status_print)', '# In[ ]:', '# # model = lgb.LGBMClassifier(lgbm_params)', '# Best ROC-AUC: 0.7618', ""# Best params: {'max_bin': 783, 'max_depth': 7, 'min_child_samples': 37, 'min_child_weight': 7, 'n_estimators': 94, 'num_leaves': 92, 'reg_alpha': 0.6654390259962506, 'reg_lambda': 8.076151891962533e-06, 'scale_pos_weight': 7.642490251593845, 'subsample': 0.25371759984574854, 'subsample_freq': 9}"", '# In[ ]:', '# Model #10', '# Best ROC-AUC: 0.7711', ""# Best params: {'learning_rate': 0.685534641629431, 'max_bin': 112, 'max_depth': 38, 'min_child_samples': 42, 'min_child_weight': 3, 'n_estimators': 60, 'num_leaves': 25, 'reg_alpha': 1.462442068214992e-06, 'reg_lambda': 3.5571385509488406e-07, 'scale_pos_weight': 0.0052366805641386495, 'subsample': 0.7074795557274224, 'subsample_freq': 10}"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '#                           min_data_in_leaf=lgbm_params[""min_data_in_leaf""],', '#                            feature_fraction=lgbm_params[""feature_fraction""],', '# In[ ]:', '# clf = lgb.train(train_set=lgbm_train,', '#                  params=lgbm_params,', '#                  num_boost_round=optimum_boost_rounds)', '# In[ ]:', '# model = lgb.LGBMClassifier(lgbm_params)', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# data = data.drop(columns = zero_features)', '# test = test.drop(columns = zero_features)', '# # ', '# In[ ]:', '        # Record the best score', '# In[ ]:', '# In[ ]:', '# out_df = pd.DataFrame({""SK_ID_CURR"":test[""SK_ID_CURR""], ""TARGET"":y_pred})', '# out_df.to_csv(""submissions.csv"", index=False)', '# In[ ]:']",127
model-tuning-results-random-vs-bayesian-opt.py,"['# coding: utf-8', '# # Introduction: Random vs Bayesian Optimization Model Tuning', '# ', '# In this notebook, we will compare random search and Bayesian optimization hyperparameter tuning methods implemented in two previous notebooks.', '# ', '# * [Intro to Model Tuning: Grid and Random Search](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search)', '# * [Automated Model Tuning](https://www.kaggle.com/willkoehrsen/automated-model-tuning)', '# ', '# In those notebooks we saw results of the methods applied to a limited dataset (10000 observations) but here we will explore results on a complete dataset with 700 + features.  The results in this notebook are from 500 iterations of random search and 400 iterations of Bayesian Optimization (these took about 5 days to run each). We will thoroughly explore the results both visually and statistically, and then implement the best hyperparameter values on a full set of features. After all the hard work in the random search and Bayesian optimization notebooks, now we get to have some fun! ', '# ', '# # Roadmap', '# ', '# Our plan of action is as follows:', '# ', '# 1. High Level Overview', '#     * Which method did best? ', '# 2. Examine distribution of scores', '#     * Are there trends over the course of the search?', '# 3. Explore hyperparameter values', '#     * Look at values over the course of the search', '#     * Identify correlations between hyperparameters and the score', '# 4. Perform ""meta"" machine learning using these results', '#     * Fit a linear regression to results and look at coefficients', '# 5. Train a model on the full set of features using the best performing values', '#     * Try best results from both random search and bayesian optimization', '# 6.  Lay out next steps', '#     * How can we use these results for this _and other_ problems? ', '#     * Are there better methods for hyperparameter optimization', '#     ', '# At each step, we will use plenty of figures and statistics to explore the data. This will be a fun notebook (even though it may not land you at the top of the leaderboard)! ', '# ', '# ## Recap ', '# ', '# In the respective notebooks, we examined we performed 1000 iterations of random search and Bayesian optimization on a reduced sample of the dataset (10000 rows). We compared the cross-validation ROC AUC on the training data, the score on a ""testing set"" (6000 observations) and the score on the real test set when submitted to the competition leaderboard. Results are below:', '# ', '# | Method                               | Cross Validation Score | Test Score (on 6000 Rows) | Submission to Leaderboard | Iterations to best score |', '# |--------------------------------------|------------------------|---------------------------|---------------------------|--------------------------|', '# | Random Search                        | 0.73110                | 0.73274                   | 0.782                     | 996                      |', '# | Bayesian Hyperparameter Optimization | 0.73448                | 0.73069                   | 0.792                     | 596                      ', '# __Take these with some skepticism because they were performed on a very small subset of the data!__ ', '# ', '# For more rigorous results, we will turn to the evaluation metrics from running __500 iterations (with random search)__ and __400+ iterations (with Bayesian Optimization)__ on a full training dataset with about 700 features (the features are from [this notebook](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) by [Aguiar](https://www.kaggle.com/jsaguiar)). These iterations took around 6 days on a machine with 128 GB of RAM so they will not run in a kernel! The Bayesian Optimization method is still running and I will update the results as they finish.', '# ', '# __In this notebook  we will focus only on the results and building the best model, so for the explanations of the methods, refer to the previous notebooks! __', '# ', '# # Overall Results', '# ', ""# First, let's start with the most basic question: which model produced the highest cross validation ROC AUC score (using 5 folds) on the training dataset?"", '# In[ ]:', '# pandas and numpy for data manipulation', '# Visualizations!', '# Plot formatting and default style', '# In[ ]:', '# Read in data and sort', '# Well, there you go! __Random search slightly outperformed  Bayesian optimization and found a higher cross validation model in far fewer iterations.__ However, as we will shortly see, this does not mean random search is the better hyperparameter optimization method. ', '# ', '# When submitted to the competition (at the end of this notebook):', '# ', '# * __Random search results scored 0.790__', '# * __Bayesian optimization results scored 0.791__', '# ', '# What were the best model hyperparameters from both methods?', '# ', '# ####  Random Search best Hyperparameters', '# In[ ]:', '# #### Bayesian Optimization best Hyperparameters', '# In[ ]:', '# If we compare the individual values, we actually see that they are fairly close together when we consider the entire search grid! ', '# ', '# ## Distribution of Scores', '# ', ""# Let's plot the distribution of scores for both models in a kernel density estimate plot."", '# In[ ]:', '# Kdeplot of model scores', '# Bayesian optimization did not produce the highest individual score, but it did tend to spend more time evaluating ""better"" values of hyperparameters. __Random search got lucky and found the best values but Bayesian optimization tended to ""concentrate"" on better-scoring values__. That\'s pretty much what we expect: random search does a good job of exploring the search space which means it will probably happen upon a high-scoring set of values (if the space is not extremely high-dimensional) while Bayesian optimization will tend to focus on a set of values that yield higher scores. __If all you wanted was the conclusion, then you\'re probably good to go. If you really enjoy making plots and doing exploratory data analysis and want to gain a better understanding of how these methods work, then read on!__ In the next few sections, we will thoroughly explore these results.', '# ', '# Our plan for going through the results is as follows:', '# ', '# * Distribution of scores', '#     * Overall distribution', '#     * Score versus the iteration (did scores improve as search progressed)', '# * Distribution of hyperparameters', '#     * Overall distribution including the hyperparameter grid for a reference', '#     * Hyperparameters versus iteration to look at _evolution_ of values', '# * Hyperparameter values versus the score', '#     * Do scores improve with certain values of hyperparameters (correlations)', '#     * 3D plots looking at effects of 2 hyperparameters at a time on the score', '# * Additional Plots', '#     * Time to run each evaluation for Bayesian optimization', '#     * Correlation heatmaps of hyperparameters with score', '#     ', '# There will be all sorts of plots: heatmaps, 3D scatterplots, density plots, bar charts (hey even bar charts can be helpful!)', '# ', '# After going through the results, we will do a little meta-machine learning, and implement the best model on the full set of features.', '# # Distribution of Scores', '# ', ""# We already saw the kernel density estimate plot, so let's go on to a bar plot. First we'll get the data in a long format."", '# In[ ]:', '# In[ ]:', ""# Keep in mind that random search ran for more iterations (as of now). Even so, we can see that Bayesian Optimization tended to produce much more higher cross validation scores. Let's look at the statistical averages:"", '# In[ ]:', '# If we are going by mean, then Bayesian optimization is the clear winner. If we go by high score, then random search just wins out. ', '# ## Score versus Iteration', '# ', '# Now, to see if either method improves over the course of the search, we need to plot the score as a function of the iteration. ', '# In[ ]:', '# Again keeping in mind that Bayesian optimization has not yet finished, we can see a clear upward trend for this method and no trend whatsoever for random search. ', '# ', '# ### Linear Regression of Scores versus Iteration', '# ', '# To show that Bayesian optimization improves over time, we can regress the score by the iteration. Then, we can use this to extrapolate into the future, __a wildly inappropriate technique in this case, but fun nonetheless!__', '# ', '# Here we use `np.polyfit` with a degree of 1 for the linear regression (you can compare the results with `LinearRegression`  from `sklearn.linear_model`.', '# In[ ]:', '# The random search slope is basically zero. ', '# In[ ]:', '# In[ ]:', '# The Bayesian slope is about 15 times greater than that of random search! What happens if we say run these methods for 10,000 iterations?', '# In[ ]:', '# In[ ]:', '# Incredible! I told you this was wildly inappropriate. Nonetheless, the slope does indicate that Bayesian optimization ""learns"" the hyperparameter values that do better over time. It then concentrates on evaluating these rather than spending time exploring other values as does random search. This means it can get stuck in a local optimum and can tend to __exploit__ values rather than continue to __explore__.', '# ', '# Now we will move on to the actual values of the hyperparameters.', '# # Hyperparameter Values', '# ', '# For each hyperparameter, we will plot the values tried by both searches as well as the reference distribution (which was the same in both cases, just a grid for random and distributions for Bayesian). We would expect the random search to almost exactly match the reference - it will converge on the reference given enough iterations.', '# ', '# First, we will process the results into a dataframe where each column is one hyperparameter. Saving the file converted the dictionary into a string, so we use `ast.literal_eval` to convert back to a dictionary before adding as a row in the dataframe.', '# In[ ]:', '    # Sort with best values on top', '     # Create dataframe of hyperparameters', '    # Iterate through each set of hyperparameters that were evaluated', '    # Put the iteration and score in the hyperparameter dataframe', '# In[ ]:', '# Next we define the hyperparameter grid that was used (the same ranges applied in both searches).', '# In[ ]:', '# Hyperparameter grid', '# # Distributions of Search Values', '# ', '# Below are the kernel density estimate plots for each hyperparameter. The dashed vertical lines indicate the ""optimal"" value found in the respective searches. ', '# ', '# We start with the learning rate:', '# In[ ]:', '# In[ ]:', '# Density plots of the learning rate distributions ', '# Even though the search domain extended from 0.005 to 0.2, both optimal values clustered around a lower value. Perhaps this tells us we should concentrate further searches in this area below 0.02?', '# ', ""# That code was a little tedious, so let's write a function that makes the same code for any hyperparameter (feel free to pick your own colors!)."", '# In[ ]:', '    # Density plots of the learning rate distributions ', '# In[ ]:', '# We can do this for all of the hyperparameters. These results can be used to inform further searches. They can even be used to define a grid search over a concentrated region. The problem with grid search is the insane compuational and time costs involved, and a smaller hyperparameter grid will help immensely! ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# The `reg_alpha` and `reg_lambda` best scores seem to complement one another for Bayesian optimization. In other words, if either `reg_lambda` or `reg_alpha` is high (say greater than 0.5), then the other should be low (below 0.5). These hyperparameters control a penalty placed on the weights of the trees and thus are meant to control overfitting. It might make sense if only one needs to be high then.', '# In[ ]:', '# In[ ]:', '# ### Boosting Type', '# ', ""# The boosting type deserves its own section because it is a categorical variable, and because as we will see, it has an outsized effect on model performance. First, let's calculate statistics grouped by boosting type for each search method."", '# In[ ]:', '# In[ ]:', ""# In both search methods, the `gbdt` (gradient boosted decision tree) and `dart` (dropout meets additive regression tree) do much better than `goss` (gradient based one-sided sampling). `gbdt` does the best on average (and for the max), so it might make sense to use that method in the future! Let's view the results as a barchart:"", '# In[ ]:', '# __`gbdt` (or `dart`) it should be! Notice that random search tried `gbdt` about the same number of times as the other two (since it selected with no reasoning) while Bayesian optimization tried `gbdt` much more often. __', '# ', ""# Since `gbdt` supports `subsample` (using on a sample of the observations to train on in every tree) we can plot the distribution of `subsample` where `boosting_type=='gbdt'`. We also show the reference distribution."", '# In[ ]:', '# Density plots of the learning rate distributions ', '# There is a significant disagreement between the two methods on the optimal value for `subsample`. Perhaps we would want to leave this as a wide distribution in any further searches (although some subsampling does look to be beneficial).', '# Finally, we can look at the instance of `is_unbalance`, a hyperparameter that tells LightGBM whether or not to treat the problem as unbalance classification.', '# In[ ]:', '# In[ ]:', ""# __According to the average score, it pretty much does not matter if this hyperparameter is `True` or `False`.__ To be honest, I'm not sure what difference this is supposed to make, so anyone who wants can fill me in!"", '# # Hyperparameters versus Iteration', '# ', '# Next we will take a look at the __evolution__ of the Bayesian search (random search shows no pattern as expected) by graphing the values versus the iteration. This can inform us the direction in which the search was heading in terms of where the values tended to cluster. Given these graphs, we might then be able to extrapolate values that lead to even higher scores (or maybe not, _extrapolation is dangerous_!)', '# ', '# The black star in the plots below signifies the best scoring value.', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '# We want to be careful about placing too much value in these results, because remember, the Bayesian optimization could have found a local minimum of the cross validation loss that it is exploting. Moreover, the trends here are generally pretty small. It is encouraging that the best value was found close to the end of the search indicating cross validation scores were continuing to improve. ', '# ', '# Next, we can look at the values of the score as a function of the hyperparameter values. This is again a dangerous area! ', '# # Plots of Hyperparameters vs Score', '# ', '# ![](http://)These next plots show the value of a single hyperparameter versus the score. We want to avoid placing too much emphasis on these graphs, because we are not changing one hyperparameter at a time. Therefore, if there are trends, it might not be solely due to the single hyperparameter we show. A truly accurate grid would be 10-dimensional and show the values of __all__ hyperparameters and the resulting score. If we could understand a __10-dimensional__ graph, then we might be able to figure out the optimal combination of hyperparameters! ', '# In[ ]:', '# Append the two dataframes together', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '        # Scatterplot', ""# __The only clear distinction is that the score decreases as the learning rate increases.__ Of course, we cannot say whether that is due to the learning rate itself, or some other factor (we will look at the interplay between the learning rate and the number of esimators shortly). The learning rate domain was on a logarithmic scale, so it's most accurate for the plot to be as well (unfortunately I cannot get this to work yet)."", '# In[ ]:', ""# hyper = 'learning_rate'"", '# fig, ax = plt.subplots(1, 1, figsize = (6, 6))', '# random_hyp[hyper] = random_hyp[hyper].astype(float)', '# # Scatterplot', ""# sns.regplot(hyper, 'score', data = random_hyp, ax = ax, color = 'b', scatter_kws={'alpha':0.6})"", ""# ax.scatter(best_random_hyp[hyper], best_random_hyp['score'], marker = '*', s = 200, c = 'b', edgecolor = 'k')"", '# opt_hyp[hyper] = opt_hyp[hyper].astype(float)', '# # Scatterplot', ""# sns.regplot(hyper, 'score', data = opt_hyp, ax = ax, color = 'g', scatter_kws={'alpha':0.6})"", ""# ax.scatter(best_opt_hyp[hyper], best_opt_hyp['score'], marker = '*', s = 200, c = 'g', edgecolor = 'k')"", ""# ax.set(xlabel = '{}'.format(hyper), ylabel = 'Score', title = 'Score vs {}'.format(hyper))"", ""# ax.set(xscale = 'log');"", '# Now for the next four hyperparameters versus the score.', '# In[ ]:', '# Plot of four hyperparameters', '        # Scatterplot', '        # Scatterplot', '# There are not any strong trends here. Next we will try to look at two hyperparameters simultaneously versus the score in a 3-dimensional plot. This makes sense for hyperparameters that work in concert, such as the learning rate and the number of esimators or the two regularization values.', '# ## 3D Plots ', '# ', '# To try and examine the simultaneous effects of hyperparameters, we can make 3D plots with 2 hyperparameters and the score. A truly accurate plot would be 10-D (one for each hyperparameter) but in this case we will stick to 3 dimensions. 3D plots can be made in matplotlib by import `Axes3D` and specifying the `3d` projection in a call to `.add_subplot`', '# In[ ]:', '# First up is `reg_alpha` and `reg_lambda`. These control the amount of regularization on each decision tree and help to prevent overfitting to the training data.', '# In[ ]:', '# In[ ]:', ""# It's a little difficult to tell much from this plot. If we look at the best values and then look at the plot, we can see that scores do tend to be higher around 0.9 for `reg_alpha`and 0.2 for `reg_lambda`.  Later, we'll make the same plot for the Bayesian Optimization for comparison."", '# The next plot is learning rate and number of estimators versus the score. __Remember that the number of estimators was selected using early stopping for 100 rounds with 5-fold cross validation__. The number of estimators __was not__ a hyperparameter in the grid that we searched over. Early stopping is a more efficient method of finding the best number of estimators than including it in a search (based on my limited experience)!', '# In[ ]:', '# Here there appears to be a clear trend: a lower learning rate leads to higher values! What does the plot of just learning rate versus number of estimators look like?', '# In[ ]:', '# This plot is very easy to interpret: the lower the learning rate, the more estimators that will be trained. From our knowledge of the model, this makes sense: each individual decision trees contribution is lessened as the learning rate is decreased leading to a need for more decision trees in the ensemble. Moreover, from the previous graphs, it appears that decreasing the learning rate increases the model score.', '# ### Function for 3D plotting', '# ', ""# Any time you write code more than twice, it should be encoded into a function! That's what the next code block is for: putting this code into a function that we can use many times! This function can be used for __any__ 3d plotting needs."", '# In[ ]:', '    # 3d scatterplot', '    # Plot labeling', '# The bayesian optimization results are close in trend to those from random search: lower learning rate leads to higher cross validation scores.', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Again, we probably want one of the regularization values to be high and the other to be low. This must help to ""balance"" the model between bias and variance. ', '# # Correlations between Hyperparameters and Score', '# ', '# Time for another dangerous act: finding correlations between the hyperparameters and the score. These are not going to be accurate because again, we are not varying one value at a time! Nonetheless, we may discover useful insight about the Gradient Boosting Machine model.', '# ### Correlations for Random Search', '# In[ ]:', '# As expected, the `learning_rate` has one of the greatest correlations with the score. The `subsample` rate might be affected by the fact that 1/3 of the time this was set to 1.0.', '# In[ ]:', '# ### Correlations for Bayesian Optimization', '# In[ ]:', '# The `learning_rate` again appears to be moderately correlated with the score. This should tell us again that a lower learning rate tends to co-occur with a higher cross-validation score, but not that this is nexessarily the cause of the higher score. ', '# In[ ]:', '# ## Correlation Heatmap', '# ', '# Now we can make a heatmap of the correlations. I enjoy heatmaps and thankfully, they are not very difficult to make in `seaborn`.', '# In[ ]:', '# Heatmap of correlations', ""# That's a lot of plot for not very much code! We can see that the number of estimators and the learning rate have the greatest magnitude correlation (ignoring subsample which is influenced by the boosting type)."", '# In[ ]:', '# Heatmap of correlations', '# Feel free to use this code for your own heatmaps! (Also send me color recommendations because I am not great at picking out a palette).', '# # Meta-Machine Learning', '# ', '# So we have a labeled set of data: the hyperparameter values and the resulting score. Clearly, the next step is to use these for machine learning? Yes, here we will perform _meta-machine learning_ by fitting an estimator on top of the hyperparameter values and the scores. This is a supervised regression problem, and although we can use any method for learning the data, here we will stick to a linear regression. This will let us examine the coefficients on each hyperparameter and will help reduce overfitting. ', '# In[ ]:', '# Create training data and labels', '# In[ ]:', '# Create the lasso regression with cv', '# Train on the data', '# In[ ]:', '# If we wanted, we could treat this as _another optimization problem_ and try to maximize the linear regression in terms of the score! However, for now I think we have done enough optimization. ', '# ', ""# It's time to move on to implementing the best hyperparameter values from random and Bayesian optimization on the full dataset."", '# # Implementation', '# ', '# The full set of features on which these results come are from [this notebook](https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features) by [Aguiar](https://www.kaggle.com/jsaguiar)). Here, we will load in the same features, train on the full training features and make predictions on the testing data. These can then be uploaded to the competition.', '# In[ ]:', '# In[ ]:', '# First we need to format the data and extract the labels.', '# In[ ]:', '# We can also save the features to later use for plotting feature importances.', '# In[ ]:', '# ### Random Search', '# In[ ]:', '# In[ ]:', '# ### Bayesian Optimization', '# In[ ]:', '# In[ ]:', '# ### Competition Results', '# ', '# * __Random search results scored 0.790__', '# * __Bayesian optimization results scored 0.791__', '# ', ""# If we go by best score on the public leaderboard, Bayesian Optimization wins! However, the public leaderboard is based only on 10% of the test data, so it's possible this is a result of overfitting to this particular subset of the testing data. Overall, I would say the complete results suggest that both methods produce similar outcomes especially when run for enough iterations. Either method is better than hand-tuning! "", '# #### Feature Importances', '# ', '# As a final step, we can compare the feature importances between the models from the best hyperparameters. It would be interesting to see if the hyperparameter values has an effect on the feature importances.', '# In[ ]:', '# In[ ]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[ ]:', '# In[ ]:', '# The feature importances look to be relatively stable across hyperparameter values. This is what I expected, but at the same time, we can see that the _absolute magnitude_ of the importances differs significantly but not the _relative ordering_.', '# In[ ]:', '# # Conclusions', '# ', '# Random search narrowly beat out Bayesian optimization in terms of finding the hyperparameter values that resulted in the highest cross validation ROC AUC. That single number does not tell the whole story though as the Bayesian method average ROC AUC was much higher than that of random search. We expect this to be the case because Bayesian optimization should focus on higher scoring values based on the surrogate model of the objective function it constructs. Morevoer, this tells us Bayesian optimization is a valuable technique, but random search can still happen upon better values in fewer search iterations if we are lucky. ', '# ', '# * Random search slightly outperformed Bayesian optimization in terms of cv ROC AUC ', '# * Bayesian optimization average scores were much higher than random search indicating it spends more time evaluating ""better"" hyperparameters', '# * Bayesian scored 0.791 when submitted and random search scored 0.790 indicating that with enough iterations, the methods deliver similar results', '# * Boosting type ""gdbt"" did much better than ""goss"" with ""dart"" nearly as good', '# * A lower learning rate resulted in higher model scores: lower than 0.02 looks to be optimal', '# * `reg_alpha` and `reg_lambda` should complement one another: if one is high (above 0.5), than the other should be lower (below 0.5)', '# * Some subsampling appears to increase the model scores', '# * The other hyperparameters either did not have a significant effect, or their effects are intertwined and hence could not be disentangled in this study', '# ', ""# Feel free to build upon these results! I'm curious if the best hyperparameters for this dataset will translate to other datasets, either for this problem, or for vastly different data science problems. The best way to find out is to try them! "", '# ', ""# If you're looking for more work on this problem, I have a series of notebooks documenting my work:"", '# ', '# __Additional Notebooks__ ', '# ', '# * [A Gentle Introduction](https://www.kaggle.com/willkoehrsen/start-here-a-gentle-introduction)', '# * [Manual Feature Engineering Part One](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering)', '# * [Manual Feature Engineering Part Two](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering-p2)', '# * [Introduction to Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/automated-feature-engineering-basics)', '# * [Advanced Automated Feature Engineering](https://www.kaggle.com/willkoehrsen/tuning-automated-feature-engineering-exploratory)', '# * [Feature Selection](https://www.kaggle.com/willkoehrsen/introduction-to-feature-selection)', '# * [Intro to Model Tuning: Grid and Random Search](https://www.kaggle.com/willkoehrsen/intro-to-model-tuning-grid-and-random-search)', '# * [Automated Model Tuning](https://www.kaggle.com/willkoehrsen/automated-model-tuning)', '# ', '# Thanks for reading and feel free to share any constructive criticism or feedback. ', '# ', '# Best,', '# ', '# Will', '# In[ ]:']",344
my-try.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# ## Import Libraries', '# In[3]:', '# ## The Data', '# ', '# > Reading train/test csv files into the pandas dataframe.', '# In[4]:', '# In[5]:', '# In[6]:', '# Target Distribution', '# Result: this is an imbalanced class problem', '# In[7]:', '# Testing data features', '# ## Check missing data', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# ## Categorical data', '# In[20]:', '# dtypes: float64(65), int64(41), object(16)', '# In[21]:', '# In[22]:', '# for example:', '# In[23]:', '# In[24]:', '# ## EDA', '# In[25]:', '# Target 1: client with payment difficulties', '# Result: Cash loans is the most popular contract type and no difficulties for Revolving contract type', '# In[26]:', '# Target 1: client with payment difficulties', '# ## CORR with TARGET', '# In[27]:', '# In[28]:', '# In[29]:', '# Display Neg', '# In[30]:', '# Display Pos', '# In[31]:', '# Make a new dataframe for features', '# In[32]:', '# THIS IS GOING TO BE A VERY LARGE PLOT', '# In[33]:', '# imputer for handling missing values', '# Feature names', '# Median imputation of missing values', '# Fit on the training data', '# In[34]:', '# Transform both training and testing data', '# In[35]:', '# Scale each feature to 0-1', '# Repeat with the scaler', '# In[36]:', '# In[37]:', '# In[38]:', '# ## Logistic Regression Implementation', '# In[39]:', '# Make the model', '# logmodel = LogisticRegression()', '# Train on the training data', '# logmodel.fit(traindf, train_labels)', '# predict_lr = logmodel.predict_proba(testdf)', '# ## KNN Implementation', '# ### Train Test Split', '# In[40]:', '# In[41]:', '# ### Using KNN', '# In[42]:', '# In[43]:', '# ### Predictions and Evaluations', '# In[44]:', '# In[45]:', '# In[46]:', '# ### Choosing a K Value', '# In[47]:', '# Will take some time', '# In[48]:', '# In[49]:', '# NOW WITH K=30', '# ### Pred on Testing dataset', '# In[50]:', '# In[51]:', '# In[52]:', '# Submission dataframe', '# In[53]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",108
notebook721481d097.py,"['# coding: utf-8', '# In[1]:', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Ð—Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶ÑƒÑ”Ð¼Ð¾ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ñ– Ð´Ð°Ð½Ñ–', '# In[2]:', '# ---', '# # ÐŸÐµÑ€ÑˆÐ¸Ð¹ Ð¿Ð¾Ð³Ð»ÑÐ´ Ð½Ð° Ñ‚Ð°Ð±Ð»Ð¸Ñ†Ñ–', '# Ð£ Ñ„Ð°Ð¹Ð»Ñ– `HomeCredit_columns_description.csv` Ð·Ð½Ð°Ñ…Ð¾Ð´ÑÑ‚ÑŒÑÑ Ð¾Ð¿Ð¸ÑÐ¸ ÐºÐ¾Ð¶Ð½Ð¾Ñ— ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ Ð· Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñƒ', '# In[3]:', '# Ð¯Ðº Ð¼Ð¾Ð¶Ð½Ð° Ð¿Ð¾Ð±Ð°Ñ‡Ð¸Ñ‚Ð¸ (Ñ‚Ð° Ð¿Ñ€Ð¾Ñ‡Ð¸Ñ‚Ð°Ñ‚Ð¸ Ð· Ð¾Ð¿Ð¸ÑÑƒ Ð´Ð°Ð½Ð¸Ñ… Ð½Ð° [https://www.kaggle.com/c/home-credit-default-risk/data](https://www.kaggle.com/c/home-credit-default-risk/data)), ÐºÐ¾Ð¶ÐµÐ½ Ñ€ÑÐ´Ð¾Ðº Ð´Ð°Ð½Ð¸Ñ… - Ñ†Ðµ Ð´Ð°Ð½Ñ– ÐºÐ»Ñ–Ñ”Ð½Ñ‚Ð°, Ñ‰Ð¾ Ñ…Ð¾Ñ‡Ðµ Ð²Ð·ÑÑ‚Ð¸ Ð¿Ð¾Ð·Ð¸ÐºÑƒ, Ð¿Ñ€Ð¸Ñ‡Ð¾Ð¼Ñƒ Ð² Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ– Ñ” ÐºÐ¾Ð»Ð¾Ð½ÐºÐ° `TARGET`, 1 Ð² ÑÐºÑ–Ð¹ Ð¾Ð·Ð½Ð°Ñ‡Ð°Ñ”, Ñ‰Ð¾ Ñƒ Ñ†Ñ–Ñ”Ñ— Ð»ÑŽÐ´Ð¸Ð½Ð¸ ÑÐºÐ»Ð°Ð´Ð½Ð¾Ñ‰Ñ– Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ. Ð†Ð½ÑˆÑ– ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ Ð² Ð¾Ð±Ð¾Ñ… Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ð°Ñ… - Ñ†Ðµ Ñ€Ñ–Ð·Ð½Ð° Ñ–Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ñ–Ñ Ð¿Ñ€Ð¾ Ð»ÑŽÐ´Ð¸Ð½Ñƒ: Ð²Ñ–Ðº, ÑÑ‚Ð°Ñ‚ÑŒ, Ð½Ð°ÑÐ²Ð½Ñ–ÑÑ‚ÑŒ Ð°Ð²Ñ‚Ð¾/Ð½ÐµÑ€ÑƒÑ…Ð¾Ð¼Ð¾ÑÑ‚Ñ–/ÐºÐ²Ð°Ñ€Ñ‚Ð¸Ñ€Ð¸/Ð´Ñ–Ñ‚ÐµÐ¹, Ð´Ð¾Ñ…Ñ–Ð´, Ð½Ð°ÑÐ²Ð½Ñ–ÑÑ‚ÑŒ ÑÐºÐ¸Ñ…Ð¾ÑÑŒ Ð´Ð¾ÐºÑƒÐ¼ÐµÐ½Ñ‚Ñ–Ð² Ñ‚Ð¾Ñ‰Ð¾. ', '# ÐŸÐµÑ€ÑˆÑ– Ð´ÐµÐºÑ–Ð»ÑŒÐºÐ° Ñ€ÑÐ´ÐºÑ–Ð² Ð¾Ð±Ð¾Ñ… Ñ‚Ð°Ð±Ð»Ð¸Ñ†ÑŒ', '# In[4]:', '# Ð¢Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¸Ð¹ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚ Ð¼Ñ–ÑÑ‚Ð¸Ñ‚ÑŒ 307511 Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´Ñ–Ð²', '# Ð¢Ð¸Ð¿Ð¸ Ð´Ð°Ð½Ð¸Ñ… Ð² Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–:', '# In[5]:', '# In[6]:', '# Ð¢ÐµÑÑ‚Ð¾Ð²Ð¸Ð¹ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚ Ð¼Ñ–ÑÑ‚Ð¸Ñ‚ÑŒ 48744 Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´Ñ–Ð²', '# Ð¢Ð¸Ð¿Ð¸ Ð´Ð°Ð½Ð¸Ñ… Ð² Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–:', '# In[7]:', ""# ÐšÐ¾Ð»Ð¾Ð½Ð¾Ðº Ð· Ñ‚Ð¸Ð¿Ð¾Ð¼ `int64` Ð½Ð° Ð¾Ð´Ð½Ñƒ Ð¼ÐµÐ½ÑˆÐµ Ñ‡ÐµÑ€ÐµÐ· Ð²Ñ–Ð´ÑÑƒÑ‚Ð½Ñ–ÑÑ‚ÑŒ ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ `TARGET`. Ð¢Ð¸Ð¿ Ð´Ð°Ð½Ð¸Ñ… `object` - Ñ†Ðµ ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸, Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½ÑÐ¼Ð¸ ÑÐºÐ¸Ñ… Ñ” `string`'Ð¸"", '# ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° Ñ€Ð¾Ð·Ð¿Ð¾Ð´Ñ–Ð» Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ Ð² ÐºÐ¾Ð»Ð¾Ð½Ñ†Ñ– `TARGET` Ð² Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–', '# In[8]:', '# Ð‘Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ 0 Ñ‚Ð°Ð¼ Ð·Ð½Ð°Ñ‡Ð½Ð¾ Ð±Ñ–Ð»ÑŒÑˆÐµ, Ð½Ñ–Ð¶ 1, Ñ‚Ð¾Ð±Ñ‚Ð¾ ÐºÐ»Ñ–Ñ”Ð½Ñ‚Ñ–Ð² Ð· Ñ„Ñ–Ð½Ð°Ð½ÑÐ¾Ð²Ð¸Ð¼Ð¸ Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð°Ð¼Ð¸ Ð² Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ– Ð·Ð½Ð°Ñ‡Ð½Ð¾ Ð¼ÐµÐ½ÑˆÐµ', '# ---', '# # ÐŸÑ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ñ– Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ', '# Ð”Ð¾ÑÐ»Ñ–Ð´Ð¸Ð¼Ð¾ Ð½Ð°ÑÐ²Ð½Ñ–ÑÑ‚ÑŒ, ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ Ñ‚Ð° Ñ‡Ð°ÑÑ‚ÐºÐ¸ Ð¿Ñ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ Ñƒ ÐºÐ¾Ð»Ð¾Ð½ÐºÐ°Ñ… Ð¾Ð±Ð¾Ñ… Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–Ð²', '# In[9]:', '# In[10]:', '# In[11]:', '# Ð¯Ðº Ð²Ð¸Ð´Ð½Ð¾ Ð· Ð³Ñ–ÑÑ‚Ð¾Ð³Ñ€Ð°Ð¼Ð¸, Ð±Ñ–Ð»ÑŒÑˆÐµ Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½Ð¸ ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº Ð½Ðµ Ð¼Ð°ÑŽÑ‚ÑŒ Ð°Ð±Ð¾ Ð¼Ð°Ð¹Ð¶Ðµ Ð½Ðµ Ð¼Ð°ÑŽÑ‚ÑŒ Ð¿Ñ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ, Ð°Ð»Ðµ 33% ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº Ð¼Ð°ÑŽÑ‚ÑŒ Ð±Ñ–Ð»ÑŒÑˆÐµ Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½Ð¸ Ð¿Ñ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ', '# Ð—Ñ€Ð¾Ð±Ð¸Ð¼Ð¾ Ñ‚Ð°ÐºÐµ Ð¶ Ð´Ð¾ÑÐ»Ñ–Ð´Ð¶ÐµÐ½Ð½Ñ Ð´Ð»Ñ Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð³Ð¾ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñƒ', '# In[12]:', '# In[13]:', '# ÐÐ° Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ– ÑÐ¸Ñ‚ÑƒÐ°Ñ†Ñ–Ñ Ð¿Ñ€Ð¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ñ‚Ð°ÐºÐ° Ð¶, ÑÐº Ñ– Ð½Ð° Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ, Ð¿Ñ€Ð¸Ñ‡Ð¾Ð¼Ñƒ ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ Ð· Ð½Ð°Ð¹Ð±Ñ–Ð»ÑŒÑˆÐ¾ÑŽ ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŽ Ð¿Ñ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ Ñ‚Ñ– Ð¶ ÑÐ°Ð¼Ñ–', '# ÐŸÑ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð½Ñ– Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ð¿Ñ€Ð¸ Ð½Ð°Ð²Ñ‡Ð°Ð½Ð½Ñ– Ð¼Ð¾Ð´ÐµÐ»Ñ– Ð·Ð°Ð¿Ð¾Ð²Ð½Ð¸Ð¼Ð¾ Ð¼ÐµÐ´Ñ–Ð°Ð½Ð½Ð¸Ð¼Ð¸ Ð¿Ð¾ ÐºÐ¾Ð¶Ð½Ñ–Ð¹ ÐºÐ¾Ð»Ð¾Ð½Ñ†Ñ–', '# ---', '# # ÐšÐ°Ñ‚ÐµÐ³Ð¾Ñ€Ñ–Ð¹Ð½Ñ– Ð·Ð¼Ñ–Ð½Ð½Ñ–', '# Ð¯Ðº Ð±ÑƒÐ»Ð¾ Ð²Ð¸ÑÐ²Ð»ÐµÐ½Ð¾ Ð²Ð¸Ñ‰Ðµ, Ð² Ð¾Ð±Ð¾Ñ… Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ð°Ñ… Ñ” 16 ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº Ñ‚Ð¸Ð¿Ñƒ `object`, ÑÐºÐ¸Ð¼ Ð²Ñ–Ð´Ð¿Ð¾Ð²Ñ–Ð´Ð°ÑŽÑ‚ÑŒ ÐºÐ°Ñ‚ÐµÐ³Ð¾Ñ€Ñ–Ð¹Ð½Ñ– Ð·Ð¼Ñ–Ð½Ð½Ñ–. ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ ÑƒÐ½Ñ–ÐºÐ°Ð»ÑŒÐ½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ ÐºÐ¾Ð¶Ð½Ð¾Ñ—.', '# Ð¢Ñ€ÐµÐ¹Ð¾Ð²Ð½Ð¸Ð¹ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚:', '# In[14]:', '# Ð¢ÐµÑÑ‚Ð¾Ð²Ð¸Ð¹ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚:', '# In[15]:', '# Ð›Ð¾Ð³Ñ–Ñ‡Ð½Ð¾ Ð·Ð°ÐºÐ¾Ð´ÑƒÐ²Ð°Ñ‚Ð¸ Ð·Ð¼Ñ–Ð½Ð½Ñ–, Ñ‰Ð¾ Ð¼Ð°ÑŽÑ‚ÑŒ 2 ÑƒÐ½Ñ–ÐºÐ°Ð»ÑŒÐ½Ð¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ, Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾ÑŽ 0/1, Ð° Ñ–Ð½ÑˆÑ– - Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾ÑŽ one-hot ÐºÐ¾Ð´ÑƒÐ²Ð°Ð½Ð½Ñ', '# In[16]:', '# one-hot', '# In[17]:', '# ÐšÐ¾Ð´ÑƒÐ²Ð°Ð½Ð½Ñ ÐºÐ°Ñ‚ÐµÐ³Ð¾Ñ€Ñ–Ð¹Ð½Ð¸Ñ… Ð·Ð¼Ñ–Ð½Ð½Ð¸Ñ… Ð·Ð±Ñ–Ð»ÑŒÑˆÐ¸Ð»Ð¾ ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº Ð²Ð´Ð²Ñ–Ñ‡Ñ–, Ð°Ð»Ðµ Ñ‡ÐµÑ€ÐµÐ· Ñ‚Ðµ, Ñ‰Ð¾ Ð´ÐµÑÐºÐ¸Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½ÑŒ Ð¼Ð¾Ð³Ð»Ð¾ Ð½Ðµ Ð±ÑƒÑ‚Ð¸ Ð² ÑÐºÐ¾Ð¼ÑƒÑÑŒ Ð· Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–Ð², ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº Ð²Ñ–Ð´Ñ€Ñ–Ð·Ð½ÑÑ”Ñ‚ÑŒÑÑ (Ð· ÑƒÑ€Ð°Ñ…ÑƒÐ²Ð°Ð½Ð½ÑÐ¼ ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ `TARGET`), Ñ†Ðµ Ñ‚Ñ€ÐµÐ±Ð° Ð²Ð¸Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸', '# In[18]:', '# ---', '# # ÐÐ½Ð¾Ð¼Ð°Ð»Ñ–Ñ— Ð² Ð´Ð°Ð½Ð¸Ñ…', '# ÐÐ½Ð¾Ð¼Ð°Ð»Ñ–Ñ— Ð¼Ð¾Ð¶ÑƒÑ‚ÑŒ Ñ‚Ñ€Ð°Ð¿Ð»ÑÑ‚Ð¸ÑÑ Ñ‡ÐµÑ€ÐµÐ· Ð¿Ð¾Ð¼Ð¸Ð»ÐºÐ¸ Ð¿Ñ€Ð¸ Ð²Ð²ÐµÐ´ÐµÐ½Ñ– Ð´Ð°Ð½Ð¸Ñ… Ñ‡Ð¸ Ñ—Ñ… Ð²Ð¸Ð¼Ñ–Ñ€ÑŽÐ²Ð°Ð½Ð½Ñ–. ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ `DAYS_BIRTH` Ñ‚Ð° `DAYS_EMPLOYED`, Ñ‰Ð¾ Ð¿Ð¾ÐºÐ°Ð·ÑƒÑŽÑ‚ÑŒ Ð²Ñ–Ðº Ð»ÑŽÐ´ÐµÐ¹ Ñƒ Ð´Ð½ÑÑ… Ñ‚Ð° ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ Ð´Ð½Ñ–Ð², ÑÐºÑ– Ð»ÑŽÐ´Ð¸Ð½Ð° Ð¿Ñ€Ð°Ñ†ÑŽÑ” Ð½Ð° Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ñ–Ð¹ Ñ€Ð¾Ð±Ð¾Ñ‚Ñ– Ð½Ð° Ð¼Ð¾Ð¼ÐµÐ½Ñ‚ Ð¿Ð¾Ð´Ð°Ñ‡Ñ– Ð·Ð°ÑÐ²Ð¸, Ð¾ÑÐºÑ–Ð»ÑŒÐºÐ¸ Ð² Ñ‚Ð°ÐºÐ¸Ñ… Ð´Ð°Ð½Ð¸Ñ… Ð¿Ñ€Ð¸Ñ€Ð¾Ð´Ð½Ð¾ Ð¾Ñ‡Ñ–ÐºÑƒÐ²Ð°Ñ‚Ð¸ Ð¿Ð¾Ð¼Ð¸Ð»Ð¾Ðº Ð¿Ñ€Ð¸ Ð²Ð²ÐµÐ´ÐµÐ½Ð½Ñ–.', '# In[19]:', '# Ð¢Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¸Ð¹ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚', '# In[20]:', '# In[21]:', '# In[22]:', ""# Ð™Ð¾Ð¹, Ð² `train['DAYS_EMPLOYED']` Ñ” Ð°Ð¶ 55 Ñ‚Ð¸ÑÑÑ‡ Ð»ÑŽÐ´ÐµÐ¹, Ñ‰Ð¾ Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ -1000 Ñ€Ð¾ÐºÑ–Ð²"", '# In[23]:', '# Ð¦Ñ–ÐºÐ°Ð²Ð¾, Ñ‰Ð¾ Ñ‡Ð°ÑÑ‚ÐºÐ° Ð»ÑŽÐ´ÐµÐ¹ Ð±ÐµÐ· Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ ÑÐµÑ€ÐµÐ´ ""Ð°Ð½Ð¾Ð¼Ð°Ð»ÑŒÐ½Ð¸Ñ…"" Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð±Ñ–Ð»ÑŒÑˆÐµ, Ð½Ñ–Ð¶ ÑÐµÑ€ÐµÐ´ ""Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð¸Ñ…"". ÐÐµ Ð´Ð°Ñ€Ð¼Ð° Ð²Ð¾Ð½Ð¸ Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ Ñ‚Ð¸ÑÑÑ‡Ñƒ Ñ€Ð¾ÐºÑ–Ð², Ð½Ðµ Ð´Ð°Ñ€Ð¼Ð°...', '# Ð—Ð°Ð¼Ñ–Ð½Ð¸Ð¼Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ `DAYS_EMPLOYED` Ñƒ Ñ†Ð¸Ñ… Ñ€Ð¾Ð±Ñ–Ñ‚Ð½Ð¸ÐºÑ–Ð² Ñ‚Ð¸ÑÑÑ‡Ð¾Ð»Ñ–Ñ‚Ñ‚Ñ (Ñ‚Ð°, ÑÐºÑ‰Ð¾ Ñ‚Ð°ÐºÑ– Ñ”, Ð² Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ– Ñ‚ÐµÐ¶) Ð½Ð° `nan`, Ð° Ð¿Ð¾Ñ‚Ñ–Ð¼ Ð²Ð¶Ðµ Ð¿Ñ€Ð¸ Ñ‚Ñ€ÐµÐ½ÑƒÐ²Ð°Ð½Ð½Ñ– Ð¼Ð¾Ð´ÐµÐ»Ñ– Ð·Ð°Ð¿Ð¾Ð²Ð½Ð¸Ð¼Ð¾ Ñ—Ñ… Ð¼ÐµÐ´Ñ–Ð°Ð½Ð½Ð¸Ð¼Ð¸. Ð¢Ð°ÐºÐ¾Ð¶, Ð´Ð¾Ð´Ð°Ð¼Ð¾ ÐºÐ¾Ð»Ð¾Ð½ÐºÑƒ, Ñ‰Ð¾ Ð²ÐºÐ°Ð·ÑƒÐ²Ð°Ñ‚Ð¸Ð¼Ðµ, Ñ‡Ð¸ Ð±ÑƒÐ»Ð¾ Ñ†Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ð°Ð½Ð¾Ð¼Ð°Ð»ÑŒÐ½Ð¸Ð¼.', '# In[24]:', '# In[25]:', '# Ð¢ÐµÐ¿ÐµÑ€ Ñ€Ð¾Ð·Ð¿Ð¾Ð´Ñ–Ð» Ñ€Ð¾ÐºÑ–Ð² Ñ€Ð¾Ð±Ð¾Ñ‚Ð¸ Ð±Ñ–Ð»ÑŒÑˆ Ð¿Ñ€Ð¸Ð¹Ð½ÑÑ‚Ð½Ð¸Ð¹, Ð°Ð»Ðµ Ñ‚Ñ€ÐµÐ±Ð° Ð¿ÐµÑ€ÐµÐ²Ñ–Ñ€Ð¸Ñ‚Ð¸, Ñ‡Ð¸ Ð´Ñ–Ð¹ÑÐ½Ð¾ Ð¾ÐºÑ€ÐµÐ¼Ñ– Ð»ÑŽÐ´Ð¸ Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ Ð¿Ð¾ 40-50 Ñ€Ð¾ÐºÑ–Ð² (Ñ‡Ð¸ Ð½Ðµ Ð²Ð¸ÑÐ²Ð¸Ñ‚ÑŒÑÑ Ñ—Ñ… Ð²Ñ–Ðº Ð¼ÐµÐ½ÑˆÐµ)', '# In[26]:', '# Ð¢Ð°ÐºÐ¸Ñ… Ð²Ð¸Ð¿Ð°Ð´ÐºÑ–Ð² Ð½ÐµÐ¼Ð°Ñ”, Ñ‚Ð¾Ð¼Ñƒ Ñ‚ÐµÐ¿ÐµÑ€ Ð·Ð°Ð»Ð¸ÑˆÐ°Ñ”Ð¼Ð¾ ÑÐº Ñ”, Ð¿Ð¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ñ‰Ðµ Ð½Ð° Ñ‚Ð°ÐºÑ– Ð¶ Ñ€Ð¾Ð·Ð¿Ð¾Ð´Ñ–Ð»Ð¸ Ð½Ð° Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–', '# In[27]:', '# In[28]:', '# ÐÐ°Ñ€ÐµÑˆÑ‚Ñ–, Ñ‚ÐµÐ¿ÐµÑ€ Ð»Ð¾Ð³Ñ–Ñ‡Ð½Ð¾ Ð·Ð°Ð¼Ñ–Ð½Ð¸Ñ‚Ð¸ ÑƒÑÑ– Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ð½Ð° Ð´Ð¾Ð´Ð°Ñ‚Ð½Ñ–, Ñ‰Ð¾Ð± Ð´Ð°Ð»Ñ– Ð½Ðµ Ð¿ÐµÑ€ÐµÐ¹Ð¼Ð°Ñ‚Ð¸ÑÑ Ñ‰Ð¾Ð´Ð¾ Ñ†ÑŒÐ¾Ð³Ð¾', '# In[29]:', '# ---', '# # ÐšÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ— Ð² Ð´Ð°Ð½Ð¸Ñ…', '# Ð¢ÐµÐ¿ÐµÑ€ Ñ€Ð¾Ð·Ñ€Ð°Ñ…ÑƒÑ”Ð¼Ð¾ ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ð¸ ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ— ÐºÐ¾Ð»Ð¾Ð½ÐºÐ¸ `TRAIN` Ð· Ñ–Ð½ÑˆÐ¸Ð¼Ð¸ Ð² Ñ‚Ñ€ÐµÐ¹Ð½Ð¾Ð²Ð¾Ð¼Ñƒ Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–', '# In[30]:', '# 10 Ð½Ð°Ð¹Ð±Ñ–Ð»ÑŒÑˆÐ¸Ñ… Ð´Ð¾Ð´Ð°Ñ‚Ð½Ð¸Ñ… ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ñ–Ð² ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ—', '# In[31]:', '# Ð¢ÑƒÑ‚ Ð½Ð°Ð¹Ð±Ñ–Ð»ÑŒÑˆÑ– ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ð¸ ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ— Ñƒ `REGION_RATING_CLIENT_W_CITY` Ñ‚Ð° `REGION_RATING_CLIENT`, Ñ‰Ð¾ Ð¾Ð·Ð½Ð°Ñ‡Ð°ÑŽÑ‚ÑŒ ÑÐºÐ¸Ð¼Ð¾ÑÑŒ Ñ‡Ð¸Ð½Ð¾Ð¼ Ð¾Ñ†Ñ–Ð½ÐµÐ½Ð¸Ð¹ Ñ€ÐµÐ¹Ñ‚Ð¸Ð½Ð³ Ñ€ÐµÐ³Ñ–Ð¾Ð½Ñƒ/Ð¼Ñ–ÑÑ‚Ð°, Ð´Ðµ Ð¶Ð¸Ð²Ðµ Ð»ÑŽÐ´Ð¸Ð½Ð°.', '# In[32]:', ""# 10 Ð½Ð°Ð¹Ð¼ÐµÐ½ÑˆÐ¸Ñ… Ð²Ñ–Ð´'Ñ”Ð¼Ð½Ð¸Ñ… ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ñ–Ð² ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ—"", '# In[33]:', ""# Ð‘Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ¸ `EXT_SOURCE`, ÑÐºÑ–, Ð·Ð³Ñ–Ð´Ð½Ð¾ Ð¾Ð¿Ð¸ÑÑƒ, Ð¾Ð·Ð½Ð°Ñ‡Ð°ÑŽÑ‚ÑŒ Normalized score from external data source, Ð¼Ð°ÑŽÑ‚ÑŒ Ð²ÐµÐ»Ð¸ÐºÑ– Ð²Ñ–Ð´'Ñ”Ð¼Ð½Ñ– ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ð¸ ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ—. ÐŸÑ–ÑÐ»Ñ Ð½Ð¸Ñ… Ñ–Ð´ÑƒÑ‚ÑŒ `DAYS_BIRTH` Ñ‚Ð° `DAYS_EMPLOYED`: Ð·Ñ– Ð·Ð±Ñ–Ð»ÑŒÑˆÐµÐ½Ð½ÑÐ¼ Ñ—Ñ… Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ð·Ð¼ÐµÐ½ÑŒÑˆÑƒÑ”Ñ‚ÑŒÑÑ ÑˆÐ°Ð½Ñ Ñ‚Ð¾Ð³Ð¾, Ñ‰Ð¾ Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ Ð±ÑƒÐ´ÑƒÑ‚ÑŒ."", '# Ð¢Ð°ÐºÐ¾Ð¶, Ñ†Ñ–ÐºÐ°Ð²Ð¾ÑŽ Ñ” ÑÐ¸Ñ‚ÑƒÐ°Ñ†Ñ–Ñ Ð· Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ°Ð¼Ð¸ `CODE_GENDER_F` Ñ‚Ð° `CODE_GENDER_M`, Ñ‰Ð¾ Ñ” ÐºÐ¾Ð´ÑƒÐ²Ð°Ð½Ð½ÑÐ¼ ÑÑ‚Ð°Ñ‚Ñ– Ð»ÑŽÐ´Ð¸Ð½Ð¸. ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° Ñ€Ð¾Ð·Ð¿Ð¾Ð´Ñ–Ð» `TARGET` Ð² Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑ‚Ñ– Ð²Ñ–Ð´ ÑÑ‚Ð°Ñ‚Ñ–', '# In[34]:', '# Ð‘Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ ÑÐµÑ€ÐµÐ´ Ð¶Ñ–Ð½Ð¾Ðº Ñ‡Ð°ÑÑ‚ÐºÐ° Ñ‚Ð¸Ñ…, Ñƒ ÐºÐ¾Ð³Ð¾ Ñ” Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ, Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð¼ÐµÐ½ÑˆÐ°, Ð½Ñ–Ð¶ ÑÐµÑ€ÐµÐ´ Ñ‡Ð¾Ð»Ð¾Ð²Ñ–ÐºÑ–Ð²', '# Ð¢ÐµÐ¿ÐµÑ€ Ð¿Ð¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° Ñ€Ð¾Ð·Ð¿Ð¾Ð´Ñ–Ð» Ð²Ñ–ÐºÑƒ Ð² Ñ€Ð¾ÐºÐ°Ñ… Ð² Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑ‚Ñ– Ð²Ñ–Ð´ Ð½Ð°ÑÐ²Ð½Ð¾ÑÑ‚Ñ– Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ', '# In[35]:', '# ÐžÑ‚Ð¶Ðµ, Ð±Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ Ð¼ÐµÐ´Ñ–Ð°Ð½Ð½Ð¸Ð¹ Ð²Ñ–Ðº Ð»ÑŽÐ´ÐµÐ¹, Ñƒ ÑÐºÐ¸Ñ… Ñ” Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ, Ð¼ÐµÐ½ÑˆÐµ Ð·Ð° Ð¼ÐµÐ´Ñ–Ð°Ð½Ð½Ð¸Ð¹ Ð²Ñ–Ðº Ð»ÑŽÐ´ÐµÐ¹, Ñƒ ÑÐºÐ¸Ñ… Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼ Ð½ÐµÐ¼Ð°Ñ”. Ð”Ð¾ Ñ‚Ð¾Ð³Ð¾ Ð¶, Ð²Ð¸Ð´Ð½Ð¾, Ñ‰Ð¾ Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ Ñ‡Ð°ÑÑ‚Ñ–ÑˆÐµ Ð²Ð¸Ð½Ð¸ÐºÐ°ÑŽÑ‚ÑŒ Ñƒ Ð±Ñ–Ð»ÑŒÑˆ Ð¼Ð¾Ð»Ð¾Ð´Ð¸Ñ… Ð»ÑŽÐ´ÐµÐ¹', '# Ð¢ÐµÐ¿ÐµÑ€ Ð·Ñ€Ð¾Ð±Ð¸Ð¼Ð¾ Ñ‚ÐµÐ¶ ÑÐ°Ð¼Ðµ Ð· `DAYS_EMPLOYED`', '# In[36]:', '# Ð”Ð»Ñ Ñ†ÑŒÐ¾Ð³Ð¾ Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ° Ð½ÐµÐ¼Ð°Ñ” Ð²Ñ–Ð·ÑƒÐ°Ð»ÑŒÐ½Ð¾Ñ— Ñ€Ñ–Ð·Ð½Ð¸Ñ†Ñ– Ð¼Ñ–Ð¶ Ñ‚Ð¸Ð¼Ð¸, Ñ…Ñ‚Ð¾ Ð¼Ð°Ñ” Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸, Ñ– Ñ‚Ð¸Ð¼Ð¸, Ñ…Ñ‚Ð¾ Ð½ÐµÐ¼Ð°Ñ”.', '# Ð”Ð¾Ð´Ð°Ð¼Ð¾ Ñ‰Ðµ Ð¾Ð´Ð¸Ð½ Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸Ðº, Ñ€Ñ–Ð²Ð½Ð¸Ð¹ `DAYS_EMPLOYED/DAYS_BIRTH` - ÑÐºÑƒ Ñ‡Ð°ÑÑ‚Ð¸Ð½Ñƒ ÑÐ²Ð¾Ð³Ð¾ Ð¶Ð¸Ñ‚Ñ‚Ñ Ð»ÑŽÐ´Ð¸Ð½Ð° Ð¿Ñ€Ð°Ñ†ÑŽÑ” Ð½Ð° Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ñ–Ð¹ (Ð½Ð° Ð¼Ð¾Ð¼ÐµÐ½Ñ‚ Ð¿Ð¾Ð´Ð°Ñ‡Ñ– Ð·Ð°ÑÐ²ÐºÐ¸) Ñ€Ð¾Ð±Ð¾Ñ‚Ñ–', '# In[37]:', '# In[38]:', '# Ð¯ÐºÑ‰Ð¾ Ð½Ðµ Ð²Ñ€Ð°Ñ…Ð¾Ð²ÑƒÐ²Ð°Ñ‚Ð¸ Ð»ÑŽÐ´ÐµÐ¹, Ñ‰Ð¾ Ð´Ð¾ÑÐ¸Ñ‚ÑŒ Ð´Ð¾Ð²Ð³Ð¾ Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ Ð½Ð° Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ñ–Ð¹ Ñ€Ð¾Ð±Ð¾Ñ‚Ñ–, Ð²Ð¸Ð´Ð½Ð¾, Ñ‰Ð¾ Ñ‚Ñ– Ð»ÑŽÐ´Ð¸, ÑÐºÑ– Ð¼Ð°ÑŽÑ‚ÑŒ Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼Ð¸ Ð· Ð¾Ð¿Ð»Ð°Ñ‚Ð¾ÑŽ, Ð½Ð° Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ñ–Ð¹ Ñ€Ð¾Ð±Ð¾Ñ‚Ñ– Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ Ð¼ÐµÐ½ÑˆÑƒ Ñ‡Ð°ÑÑ‚Ð¸Ð½Ñƒ Ð¶Ð¸Ñ‚Ñ‚Ñ, Ð½Ñ–Ð¶ Ñ‚Ñ–, ÑÐºÑ– Ð¿Ñ€Ð¾Ð±Ð»ÐµÐ¼ Ð½Ðµ Ð¼Ð°ÑŽÑ‚ÑŒ.', '# ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ñ‚ÐµÐ¿ÐµÑ€ Ð½Ð° Ñ‚Ð°Ñ”Ð¼Ð½Ð¸Ñ‡Ñ– Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ¸ `EXT_SOURCE_1`, `EXT_SOURCE_2`, `EXT_SOURCE_3`: Ð½Ð°Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´, Ð½Ð° Ñ—Ñ… ÐºÐ¾ÐµÑ„Ñ–Ñ†Ñ–Ñ”Ð½Ñ‚Ð¸ ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ—', '# In[39]:', ""# Ð‘Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ `DAYS_EMPLOYED_FRAC` Ñ‚Ð° ÑƒÑÑ– Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ¸ `EXT_SOURCE` Ð²Ñ–Ð´'Ñ”Ð¼Ð½Ð¾ ÐºÐ¾Ñ€ÐµÐ»ÑŽÑŽÑ‚ÑŒ Ñ–Ð· `TARGET`, Ð°Ð»Ðµ Ð´Ð¾Ð´Ð°Ñ‚Ð½Ð¾ - Ð· `DAYS_BIRTH`"", '# ---', '# # ÐÐ°Ñ€ÐµÑˆÑ‚Ñ–, ÐºÐ»Ð°ÑÐ¸Ñ„Ñ–ÐºÐ°Ñ†Ñ–Ñ', '# ÐŸÑ€Ð¸Ð±ÐµÑ€ÐµÐ¼Ð¾ ÐºÐ¾Ð»Ð¾Ð½ÐºÑƒ `SK_ID_CURR`, Ð¾ÑÐºÑ–Ð»ÑŒÐºÐ¸, Ð·Ð³Ñ–Ð´Ð½Ð¾ Ð¾Ð¿Ð¸ÑÑƒ, Ñ†Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ð¾ ID of loan in our sample, Ð° Ð¿Ð¾Ñ‚Ñ–Ð¼ Ð·Ð°Ð¿Ð¾Ð²Ð½Ð¸Ð¼Ð¾ Ð¿Ñ€Ð¾Ð¿ÑƒÑ‰ÐµÐ½Ð½Ñ– Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ð¼ÐµÐ´Ñ–Ð°Ð½Ð½Ð¸Ð¸Ð¼', '# In[40]:', '# In[41]:', '# In[42]:', '# ÐŸÐ¾Ð´Ñ–Ð»Ð¸Ð¼Ð¾ `train` Ñ‚Ð° `train_lables` Ð½Ð° Ð²Ð»Ð°ÑÐ½Ðµ train-Ñ‡Ð°ÑÑ‚Ð¸Ð½Ñƒ Ñ‚Ð° validation-Ñ‡Ð°ÑÑ‚Ð¸Ð½Ñƒ', '# In[43]:', '# Ð’Ð¸ÐºÐ¾Ð½Ð°Ñ”Ð¼Ð¾ grid search Ð´Ð»Ñ Ð·Ð½Ð°Ñ…Ð¾Ð´Ð¶ÐµÐ½Ð½Ñ Ð¾Ð¿Ñ‚Ð¸Ð¼Ð°Ð»ÑŒÐ½Ð¾Ñ— ÐºÑ–Ð»ÑŒÐºÐ¾ÑÑ‚Ñ– Ð´ÐµÑ€ÐµÐ² Ñƒ Ð»Ñ–ÑÑ–', '# In[44]:', '# ÐÐ°Ñ‚Ñ€ÐµÐ½ÑƒÑ”Ð¼Ð¾ `RandomForestClassifier` Ñ‚Ð° Ð¿ÐµÑ€ÐµÐ²Ñ–Ñ€Ð¸Ð¼Ð¾ ROC-AUC Ð½Ð° validation-Ð´Ð°Ñ‚Ð°ÑÐµÑ‚Ñ–', '# In[45]:', '# In[46]:', '# ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° feature importance, RandomForestClassifier Ð¼Ð¾Ð¶Ðµ Ð´Ð°Ñ‚Ð¸ Ñ†ÑŽ Ñ–Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ñ–ÑŽ', '# In[47]:', '# In[48]:', '# Ð‘Ð°Ñ‡Ð¸Ð¼Ð¾, Ñ‰Ð¾ `EXT_SOURCE_2`, `EXT_SOURCE_3`, `DAYS_BIRTH`, `DAYS_EMPLOYED` Ñ‚Ð° `DAYS_EMPLOYED_FRAC` Ð´Ñ–Ð¹ÑÐ½Ð¾ Ð¼Ð°ÑŽÑ‚ÑŒ Ð²ÐµÐ»Ð¸ÐºÐ¸Ð¹ Ð²Ð¿Ð»Ð¸Ð² Ñƒ Ð¼Ð¾Ð´ÐµÐ»Ñ–, ÑÐº Ñ– Ð¿ÐµÑ€ÐµÐ´Ð±Ð°Ñ‡Ð°Ð»Ð¾ÑÑ Ð¿Ñ€Ð¸ Ð´Ð¾ÑÐ»Ñ–Ð´Ð¶ÐµÐ½Ð½Ñ– ÐºÐ¾Ñ€ÐµÐ»ÑÑ†Ñ–Ñ—. ÐŸÐ¾Ð´Ð¸Ð²Ð¸Ð¼Ð¾ÑÑ Ð½Ð° Ñ‰Ðµ Ð´Ð²Ð° Ð¿Ð¾ÐºÐ°Ð·Ð½Ð¸ÐºÐ¸ Ð· Ð²ÐµÐ»Ð¸ÐºÐ¸Ð¼ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½ÑÐ¼', '# In[49]:', '# Ð—Ð°Ð»Ð¸ÑˆÐ¸Ð»Ð¾ÑÑ Ð·Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ð¿ÐµÑ€ÐµÐ´Ð±Ð°Ñ‡ÐµÐ½Ð½Ñ Ð½Ð° Ñ‚ÐµÑÑ‚Ð¾Ð²Ð¸Ñ… Ð´Ð°Ð½Ð¸Ñ…, ÑÐºÐµ Ð¿Ð¾Ñ‚Ñ–Ð¼ Ð·Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶Ð¸Ð¼Ð¾ Ð½Ð° Kaggle', '# In[50]:']",117
olivier_lightgbm_parameters_by_bayesian_opt.py,"['# Based on excellent script by @olivier', '#', '# https://www.kaggle.com/ogrellier/good-fun-with-ligthgbm', '#', '# My additions and changes:', '#', '# StratifiedKFold instead of KFold', '# LightGBM parameters found by Bayesian optimization ( https://github.com/fmfn/BayesianOptimization )', '# Out-of-fold file saved for downstream use in ensembling', '#', '        # LightGBM parameters found by Bayesian optimization', '    # Plot feature importances', '    # Plot ROC curves', '        # Plot the roc curve', '    # Plot ROC curves', '        # Plot the roc curve', '    # Build model inputs', '    # Create Folds', '    # Train model and get oof and test predictions', '    # Save test predictions', '    # Display a few graphs']",21
oof-all-home-credit-default-risk (1).py,"['# coding: utf-8', '# ## Calculated the running avg of predicted probability with OOF Prediction', '# ### Load Package', '# In[1]:', '# ##### ì½”ëž© ë²„ì\xa0„ì€ Google Driveì—ì„œ ë°ì´í„° ì„¸íŠ¸ë¥¼ ë¡œë”©', '# In[2]:', '# In[3]:', '    # google drive', '# ### load data as pandas DataFrame', '# In[4]:', '# ### Modulization for Feature Engineering', '# In[5]:', '# In[6]:', '    # EXT_SOURCE_X FEATURE', '    # AMT_ANNUITY - amount should be paid per month.', '    # AMT_CREDIT  - total amount of loan.', '    # AMT_GOODS_PRICE : consumer loadn.eg) car purchase installment.', '    # AMT_INCOME_TOTAL : income ', '    # CNT_FAM_MEMBERS  : the number of family members', ""    # DAYS_BIRTH : Client's age in days at the time of application"", '    # DAYS_EMPLOYED : How many days before the application the person started current employment', '    # AMT_APPLICATION : For how much credit did client ask on the previous application', '    # AMT_GOODS_PRICE : Goods price of good that client asked for (if applicable) on the previous application', ""    # prev['PREV_ANNUITY_APPL_RATIO'] = prev['AMT_ANNUITY']/prev['AMT_APPLICATION']"", '    # data cleansing', '    # important features for determine days overdue', '    # 1.PREV_INTERESTS_RATE : interest ratio', '    # ë§¤ì›” ë‚©ë¶€ ê¸ˆì•¡ê³¼ ë‚©ë¶€ íšŸìˆ˜ ê³±í•´ì„œ ì\xa0„ì²´ ë‚©ë¶€ ê¸ˆì•¡ êµ¬í•¨. ', '    # AMT_ANNUITY : Annuity of previous application', '    # ì\xa0„ì²´ ë‚©ë¶€ ê¸ˆì•¡ ëŒ€ë¹„ AMT_CREDIT ë¹„ìœ¨ì„ êµ¬í•˜ê³\xa0 ì—¬ê¸°ì— ë‹¤ì‹œ ë‚©ë¶€íšŸìˆ˜ë¡œ ë‚˜ëˆ„ì–´ì„œ ì´ìžìœ¨ ê³„ì‚°. ', '         # ê¸°ì¡´ ì»¬ëŸ¼ aggregation. ', '        # ê°€ê³µ ì»¬ëŸ¼ aggregation', ""    # multi index ì»¬ëŸ¼ì„ '_'ë¡œ ì—°ê²°í•˜ì—¬ ì»¬ëŸ¼ëª… ë³€ê²½"", '    # rename column', '    # NaNê°’ì€ ëª¨ë‘ 0ìœ¼ë¡œ ë³€ê²½. ', '    # Refused or Approved previous credit', '    # prev_amt_aggì™€ ì¡°ì¸. ', '    # SK_ID_CURRë³„ ê³¼ê±° ëŒ€ì¶œê±´ìˆ˜ ëŒ€ë¹„ APPROVED_COUNT ë° REFUSED_COUNT ë¹„ìœ¨ ìƒì„±. ', ""    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' ì»¬ëŸ¼ drop "", '    # DAYS_CREDIT_ENDDATE : CB í¬ë\xa0ˆë”§ ì±„ë¬´ ì™„ë£Œê¹Œì§€ ë‚¨ì•„ìžˆëŠ” ì¼ìˆ˜(ì‹\xa0ì²\xadì¼ ê¸°ì¤€) Remaining duration of CB credit (in days) at the time of application in Home Credit', '    # DAYS_ENDDATE_FACT : CB í¬ë\xa0ˆë”§ ì±„ë¬´ ì™„ë£Œê¹Œì§€ ê±¸ë¦° ì‹¤ì\xa0œ ì¼ìˆ˜(ì‹\xa0ì²\xadì¼ ê¸°ì¤€, ìƒíƒœê°€ Closeì¼ë•Œë§Œ) Days since CB credit ended at the time of application in Home Credit (only for closed credit)', '    # DAYS_CREDIT : í˜„ìž¬ ëŒ€ì¶œ ì‹\xa0ì²\xad ì¼ ê¸°ì¤€ ê³¼ê±° ëŒ€ì¶œ ì‹\xa0ì²\xad ì§€ë‚œ ê¸°ê°„(How many days before current application did client apply for Credit Bureau credit)', '    # ì±„ë¬´ ê¸ˆì•¡ ëŒ€ë¹„/ëŒ€ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ë° ì°¨ì´ ê°€ê³µ', '    # ì—°ì²´ ì—¬ë¶€ ë° 120ì¼ ì´ìƒ ì—°ì²´ ì—¬ë¶€ ê°€ê³µ', '    # CREDIT_DAY_OVERDUE : ëŒ€ì¶œ ì‹\xa0ì²\xad ì‹œ CB í¬ë\xa0ˆë”§ ì—°ì²´ ì¼ìˆ˜', '    # Number of days past due on CB credit at the time of application for related loan in our sample', '    # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '        # ì¶”ê°€ ê°€ê³µ ì»¬ëŸ¼', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '    # Status of Credit Bureau loan during the month (active, closed, DPD0-30,?[C means closed, X means status unknown, 0 means no DPD, ', '    # 1 means maximal did during month between 1-30, 2 means DPD 31-60,?5 means DPD 120+ or sold or written off ] )', '    # SK_ID_CURR ë\xa0ˆë²¨ë¡œ ê±´ìˆ˜ì™€ MONTHS_BALANCEì˜ aggregation ê°€ê³µ ', '    # ì¡°ì¸ì„ ìœ„í•´ SK_ID_CURRì„ reset_index()ë¡œ ì»¬ëŸ¼í™” ', '    # bureau_day_amt_aggì™€ bureau_active_agg ì¡°ì¸.  ', '    # STATUSê°€ ACTIVE IS_DPD RATIOê´€ë\xa0¨ ë¹„ìœ¨ ìž¬ê°€ê³µ. ', '    # bureau_aggì™€ bureau_bal_agg ì¡°ì¸. ', '    # ì—°ì²´ì—¬ë¶€,  ì—°ì²´ì¼ìˆ˜ 0~ 120 ì‚¬ì´ ì—¬ë¶€, ì—°ì²´ ì¼ìˆ˜ 120ë³´ë‹¤ í° ì—¬ë¶€ ', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ì‹\xa0ê·œ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ì‹\xa0ê·œ aggregation ì»¬ëŸ¼ ìƒì„±', '        # ì¶”ê°€ ì»¬ëŸ¼. ', '    # MONTHS_BALANCEê°€ ìµœê·¼(20ê°œì›” ì´í•˜)ì¸ ë°ì´í„° ì„¸íŠ¸ ë³„ë„ ê°€ê³µ. ', '    # MONTHS_BALANCE < 20 : having tendency to fall into DPD', '        # ì¶”ê°€ ì»¬ëŸ¼. ', '    # ì»¬ëŸ¼ ë³€ê²½ ', '    # SK_ID_CURRì„ reset_index()ë¥¼ ì´ìš©í•˜ì—¬ ì»¬ëŸ¼ìœ¼ë¡œ ë³€í™˜', '    # AMT_INSTALMENT : ì˜ˆì\xa0•ë‚©ë¶€ê¸ˆì•¡', '    # AMT_PAYMENT - ë‚©ë¶€ê¸ˆì•¡', '    # DAYS_ENTRY_PAYMENT : When was the installments of previous credit paid actually (relative to application date of current loan - í˜„ ëŒ€ì¶œì‹\xa0ì²\xadì¼ ëŒ€ë¹„ ê³¼ê±° ëŒ€ì¶œê±´ ëŒ€ì¶œë‚©ìž… ì‹¤ì\xa0œì¼ìž)', '    # DAYS_INSTALMENT - When the installment of previous credit was supposed to be paid (relative to application date of current loan-í˜„ ëŒ€ì¶œì‹\xa0ì²\xadì¼ ëŒ€ë¹„ ì´ì\xa0„ ëŒ€ì¶œë‚©ìž… ì˜ˆì\xa0•ì¼ìž)', '    # ì—°ì²´ì—¬ë¶€,  ì—°ì²´ì¼ìˆ˜ 30~ 120 ì‚¬ì´ ì—¬ë¶€, ì—°ì²´ ì¼ìˆ˜ 100ë³´ë‹¤ í° ì—¬ë¶€ ë°ì´í„° ê°€ê³µ. ', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ì‹\xa0ê·œ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ ì‹\xa0ê·œ aggregation ì»¬ëŸ¼ ìƒì„±. ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # ì‹¤ì\xa0œ ë‚©ë¶€ ì¼ìž(DAYS_ENTRY_PAYMENT)ê°€ ë¹„êµì\xa0 ìµœê·¼(1ë…„ ì´ë‚´) ë°ì´í„°ë§Œ ë³„ë„ë¡œ ê°€ê³µ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # ì›”ë³„ ì¹´ë“œ í—ˆìš©í•œë„ì— ë”°ë¥¸ ìž”ê³\xa0ì™€ ì¸ì¶œ ê¸ˆì•¡ ë¹„ìœ¨ ', '    # DPDì— ë”°ë¥¸ ê°€ê³µ ì»¬ëŸ¼ ìƒì„±.', '    # ê¸°ì¡´ ì»¬ëŸ¼ê³¼ ê°€ê³µ ì»¬ëŸ¼ìœ¼ë¡œ SK_ID_CURR ë\xa0ˆë²¨ë¡œ aggregation ì‹\xa0ê·œ ì»¬ëŸ¼ ìƒì„±. ', '        #  ì¶”ê°€ ì»¬ëŸ¼', '    # MONTHS_BALANCEê°€ ë¹„êµì\xa0 ìµœê·¼ ë°ì´í„°( 3ê°œì›” ì´í•˜)ë§Œ ë³„ë„ë¡œ ê°€ê³µ.  ', '# In[7]:', '    # ìƒì„±ëœ prev_agg, bureau_agg, pos_bal_agg, install_agg, card_bal_aggë¥¼ appsì™€ ì¡°ì¸í•˜ì—¬ ìµœì¢… í•™ìŠµ/í…ŒìŠ¤íŠ¸ ì§‘í•© ìƒì„±. ', '# ### Creation of the final train and test datasets', '# In[8]:', '# application, previous, bureau, bureau_bal ê´€ë\xa0¨ ë°ì´í„°ì…‹ ê°€ê³µ ë° ì·¨í•©. ', '# Category ì»¬ëŸ¼ì„ ëª¨ë‘ Label ì¸ì½”ë”© ìˆ˜í–‰. ', '# í•™ìŠµê³¼ í…ŒìŠ¤íŠ¸ ë°ì´í„°ë¡œ ë¶„ë¦¬. ', '# In[9]:', '# ### Ouf Of Fold Prediction', '# In[10]:', 'np.zeros(10)  # note that 1 dim', '# In[11]:', '# In[12]:', ""    ftr_app = apps_all_train.drop(['SK_ID_CURR', 'TARGET'], axis=1)  # feature dateset"", ""    target_app = apps_all_train['TARGET']                           # target datasets"", '    # nfolds ê°œì˜ cross validatin fold setì„ ê°€ì§€ëŠ” KFold ìƒì„± ', '    #  Out of Foldsë¡œ í•™ìŠµëœ ëª¨ë¸ì˜ validation setì„ ì˜ˆì¸¡í•˜ì—¬ ê²°ê³¼ í™•ë¥\xa0ì„ ë‹´ì„ array ìƒì„±.', '    # validation setê°€ n_splitê°¯ìˆ˜ë§Œí¼ ìžˆìœ¼ë¯€ë¡œ í¬ê¸°ëŠ” ftr_appì˜ í¬ê¸°ê°€ ë˜ì–´ì•¼ í•¨. ', '    # Ouf of Foldsë¡œ í•™ìŠµëœ ëª¨ë¸ì˜ test datasetì„ ì˜ˆì¸¡í•˜ì—¬ ê²°ê³¼ í™•ë¥\xa0ì„ ë‹´ì„ array ìƒì„±. ', '    # n_estimatorsë¥¼ 4000ê¹Œì§€ í™•ëŒ€. ', '    # í˜„ìž¬ ë°ì´í„°ì…‹ìœ¼ë¡œ í•˜ì´í„° íŒŒë¼ë¯¸í„°ë¥¼ íŠœë‹í•˜ëŠ”ê²ƒì´ ë°”ëžŒì§.', '    # nfolds ë²ˆ cross validation Iteration ë°˜ë³µí•˜ë©´ì„œ OOF ë°©ì‹ìœ¼ë¡œ í•™ìŠµ ë° í…ŒìŠ¤íŠ¸ ë°ì´í„° ì˜ˆì¸¡', '        # í•™ìŠµìš© ë°ì´í„° ì„¸íŠ¸ì˜ ì¸ë±ìŠ¤ì™€ ê²€ì¦ìš© ë°ì´í„° ì„¸íŠ¸ì˜ ì¸ë±ìŠ¤ ì¶”ì¶œí•˜ì—¬ ì´ë¥¼ ê¸°ë°˜ìœ¼ë¡œ í•™ìŠµ/ê²€ì¦ ë°ì´í„° ì¶”ì¶œ', '        # ì¶”ì¶œëœ í•™ìŠµ/ê²€ì¦ ë°ì´í„° ì„¸íŠ¸ë¡œ ëª¨ë¸ í•™ìŠµ. early_stoppingì€ 200ìœ¼ë¡œ ì¦ê°€. ', '        # ê²€ì¦ ë°ì´í„° ì„¸íŠ¸ë¡œ ì˜ˆì¸¡ëœ í™•ë¥\xa0 ì\xa0€ìž¥ ì‚¬ìš©ë˜ì§€ëŠ” ì•ŠìŒ. ', '        # í•™ìŠµëœ ëª¨ë¸ë¡œ í…ŒìŠ¤íŠ¸ ë°ì´í„° ì„¸íŠ¸ì— ì˜ˆì¸¡ í™•ë¥\xa0 ê³„ì‚°. ', '        # nfolds ë²ˆ ë°˜ë³µ ì‹¤í–‰í•˜ë¯€ë¡œ í‰ê·\xa0 í™•ë¥\xa0ì„ êµ¬í•˜ê¸° ìœ„í•´ ê°œë³„ ìˆ˜í–‰ì‹œ ë§ˆë‹¤ ìˆ˜í–‰ íšŸìˆ˜ë¡œ ë‚˜ëˆˆ í™•ë¥\xa0ì„ ì¶”í›„ì— ë”í•´ì„œ ìµœì¢… í‰ê·\xa0 í™•ë¥\xa0 ê³„ì‚°. ', '        # num_iteration  - stops at the time of early stopping', '        # [0 - normal , 1 - overdue] : fetch the probability of overdue', '        # Predecited probabily should be mean value ', '# In[13]:', '# ### CVS for predicted result', '# In[14]:', '# In[15]:', '# In[16]:']",114
preprocessing-feature-engineering-models.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Suppress warnings ', '# matplotlib and seaborn for plotting', '# # Read in Training Data', '# In[2]:', '# Training data', '# # Read in Testing Data', '# In[3]:', '# Testing data features', '# # Check if Dataset is Unbalanced', '# In[4]:', '# In[5]:', '# # Data Types', '# In[6]:', '# Number of each type of column', '# In[7]:', '# Number of unique classes in each object column', '# # One-Hot Encoding', '# In[8]:', '# one-hot encoding of categorical variables', '# # Align Training and Testing Data', '# In[9]:', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# # Preprocessing: Handle outliers and awkward data', '# In[10]:', '# # Helpful Functions', '# ## Function for Kernel Density Estimate Plots', '# The kernel density estimate plot shows the distribution of a single variable.', '# In[11]:', '# Plots the disribution of a variable colored by value of the target', '    # Calculate the correlation coefficient between the new variable and the target', '    # Calculate medians for repaid vs not repaid', '    # Plot the distribution for target == 0 and target == 1', '    # label the plot', '    # print out the correlation', '    # Print out average values', '# ## Function for Numeric Aggregations', '# Aggregates numeric values for count, mean, max, min, sum', '# In[12]:', '    # Remove id variables other than grouping variable', '    # Group by the specified variable and calculate the statistics', '    # Need to create new column names', '    # Iterate through the variables names', '        # Skip the grouping variable', '            # Iterate through the stat names', '                # Make a new column name for the variable and stat', '# ## Function to Calculate Correlation with Target', '# Function to calculate correlations with the target', '# In[13]:', '    # List of correlations', '    # Iterate through the columns ', '        # Skip the target column', '            # Calculate correlation with the target', '            # Append the list as a tuple', '    # Sort by absolute magnitude of correlations', '# ## Function to Handle Categorical Variables', '# This will calculate the counts and normalized counts of each category for all categorical variables in the dataframe.', '# In[14]:', '    # Select the categorical columns', '    # Make sure to put the identifying id on the column', '    # Groupby the group var and calculate the sum and mean', '    # Iterate through the columns in level 0', '        # Iterate through the stats in level 1', '            # Make a new column name', '# In[15]:', '    # Aggregate the numeric columns', '    # If there are categorical variables', '        # Count the categorical columns', '        # Merge the numeric and categorical', '        # Merge to get the client id in dataframe', '        # Remove the loan id', '        # Aggregate numeric stats by column', '    # No categorical variables', '        # Merge to get the client id in dataframe', '        # Remove the loan id', '        # Aggregate numeric stats by column', '# # Preprocessing', '# Handle missing values and outliers', '# ## Outliers', '# Remove or replace awkward values that were a mistake', '# In[16]:', '# ## Missing Values', '# Remove columns from training and testing datasets with greater than 50 percent of values missing.', '# In[17]:', '# Function to calculate missing values by column# Funct ', '        # Total missing values', '        # Percentage of missing values', '        # Make a table with the results', '        # Rename the columns', '        # Sort the table by percentage of missing descending', '        # Print some summary information', '        # Return the dataframe with missing information', '# In[18]:', '# Missing values statistics', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# Drop the missing columns', '# # Correlations', '# Examine the correlations of the variables with the target. We can see in any of the variables we created have a greater correlation than those already present in the training data.', '# In[24]:', '# Calculate all correlations in dataframe', '# In[25]:', '# Ten most positive correlations', '# In[26]:', '# Ten most negative correlations', '# ## Colinear Variables', '# Calculate  the correlation of each variable with every other variable. This will allow us to see if there are highly collinear variables that should perhaps be removed from the data. Look for any variables that have a greather than 0.8 correlation with other variables.', '# In[27]:', '# Set the threshold', '# Empty dictionary to hold correlated variables', '# For each column, record the variables that are above the threshold', '# Track columns to remove and columns already examined', '# Iterate through columns and correlated columns', '    # Keep track of columns already examined', '            # Only want to remove one in a pair', '# In[28]:', '# remove columns from training and testing sets']",129
project-of-datascience-homecreditdefaultrisk.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# # Distribution of AMT_CREDIT', '# In[18]:', '# # Distribution of AMT_INCOME_TOTAL', '# In[19]:', '# # Distribution of AMT_GOODS_PRICE', '# In[20]:', '# # Distribution of target (balanced or imbalanced)', '# In[21]:', '# # Distribution of Occupaiton Type', '# In[22]:', '# # Types of Organizations', '# In[23]:', '# # Contract product type', '# In[24]:', '# # Old or New Client', '# In[25]:', '# # Did the client requested insurance?', '# In[26]:', '# # Correlation', '# In[27]:', '# # Feature Importance using xgboost', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# # Preprocessing and Feature Engineering', '# In[32]:', ""# df = df[df['CODE_GENDER'] != 'XNA']"", '# In[33]:', '# for c in bureau_balance.columns:', '#     if bureau_balance[c].dtypes==object:', ""#         bb_aggregations[c] = ['mean']"", '# In[34]:', ""# df = df.join(bureau, how='left', on='SK_ID_CURR')"", '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[ ]:', '# # KFold cross validation lgb modeling', '# In[39]:', '# In[40]:', '# In[ ]:']",61
pure-gp-with-logloss.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",41
pure-gp-with-mean-squared-error.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",41
simple-blending-788-lb.py,"['# coding: utf-8', '# **Before you begin please upvote the original authors. Its all there effort not mine.**', '# **Links to original kernels-->**', '# 1.[Lightgbm with simple features by jsaguiar](http://www.kaggle.com/jsaguiar/lightgbm-with-simple-features-0-785-lb)', '# 2.[tidy_xgb -all tables by kxx](http://www.kaggle.com/kailex/tidy-xgb-all-tables-0-782/code)', '# In[2]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[6]:', '# In[7]:', '# In[8]:', '# In[ ]:']",18
simple-eda-and-lgb-model.py,"['# coding: utf-8', '# # Home credit default risk', '# ## All the information used in this kernel has been inspired by this amazing kernel: [here](https://www.kaggle.com/willkoehrsen/introduction-to-manual-feature-engineering/notebook) ', '# ## so grateful for all the information', '# ### If you have any suggestions, critics or feedback, feel free to leave me a heads up here...', '# In[1]:', '# Python â‰¥3.5 is required', '# Scikit-Learn â‰¥0.20 is required', '# Common imports', '# Ignore useless warnings (see SciPy issue #5998)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# * Loading the application train, this is gonna be the base on which we are going to add more information from other datasets that has been provided to us.', '# In[2]:', '# * checking the shape of the data', '# * calling head to see the first entries', '# In[3]:', '# In[4]:', '# * Loading the testing set, checking the shape as well', '# In[5]:', '# In[6]:', '# #### Implementing a function to check for null values and plot a countplot', '# In[7]:', '# In[8]:', '    # Calculate missing stats for train and test (remember to calculate a percent!)', '    # list of missing columns for train and test', '    # Combine the two lists together', '    # Print information', '    # Drop the missing columns and return', '# In[9]:', '# #### A bunch of null values that need to be imputed, gonna address it soon', '# In[10]:', '# * We have 3 different types in our dataset(float64, int64, object), Gonna implement a function that reduce the amount of memory used.', '# In[11]:', '# Memory saving function credit to https://www.kaggle.com/gemartin/load-data-reduce-memory-usage', '# #### looking for outliers or some anomalies...', '# In[12]:', '# > The numbers in the DAYS_BIRTH column are negative because they are recorded relative to the current loan application. To see these stats in years, we can mutliple by -1 and divide by the number of days in a year:', '# In[13]:', '# * no issues here, the max and min are reasonable... ', '# * what about days employed', '# In[14]:', '# * as can be seen, the max value is not reasonable at all, here we have an outlier that might be a mistake when the data was created', '# In[15]:', ""# * well, we have 55374 values where our 'days employed' column is more than 300000, which is not a correct value. However, with such a high amount of entries showing this issue, one good approach would be to change the values to NAN and then, afterwards, impute those values with a median value"", '# In[16]:', ""# **Taking a look at the pearson's correlation using the .corr() method**"", '# In[17]:', '# In[18]:', '# > DAYS_BIRTH is the age in days of the client at the time of the loan in negative days. Meaning, the older the client gets, it is less likely that the loan defaults', '# #### gonna plot the KDE distribution relative to target, trying to show the relationship described above', '# In[19]:', '# KDE plot of loans that were repaid on time', '# KDE plot of loans which were not repaid on time', '# Labeling of plot', ""# ##### it's clear that the older the client gets, it's more likely that he is gonna pay the credit"", '# * the higher amount of credit default can be found within ages 20-25', '# ### I would like to plot a heat map with the top positive correlation feature(DAYS BIRTH) and all the top 3 negativaly correlated(all External Sources)', '# In[20]:', '# Extract the EXT_SOURCE variables and show correlations', '# Heatmap of correlations', '# ** As we have plotted the KDE for days birth, gonna do the same for all the external sources features **', '# In[21]:', '# iterate through the sources', '    # create a new subplot for each source', '    # plot repaid loans', '    # plot loans that were not repaid', '    # Label the plots', '# ***', '# ## Before diving into feature engineering and creating features that helps our models learn more from our data, I am gonna implement pipelines and a function to help us test our first models and see how they perform.', '# In[22]:', ""# * We have created a validation dataset in order to test our models, now let's take a look at the shape before implementing the functions to help us test our models"", '# In[23]:', '# In[24]:', '    # Sort features according to importance', '            # Extract feature importances', '        # Normalize the feature importances to add up to one', '        # Make a horizontal bar chart of feature importances', '        # Need to reverse the index to plot most important on top', '        # Set the yticks and labels', '        # Plot labeling', '    # Clean up memory', '# # Second Part - Improving our model -', '# ## it was provided extra datasets with plenty of information that can be added to our training set, help us engineering some extra features and improve our model', '# ### Gonna start loading bureau.csv, which contains information of previous loans of each client', '# In[25]:', ""# #### let's have an overall picture using .head()"", '# In[26]:', ""# #### We have the ID's of each client, which is the SK_ID_CURR, and information like when the loan was taken, end date, is it overdue, days credit and so forth....so we have here a credit history"", '# In[27]:', '# ** Nice, now we have the number of past credits each client have**', ""# * let's add this information to our training dataset"", '# In[28]:', ""# * Let's see the correlation with our target:"", '# In[29]:', '# Heatmap of correlations', '# * The correlation is really low, and negatively correlated, the higher this value(more past loans), less likely to default(remember, past loans that have been paid)', '# ', ""# ## as it was used previously, the KDE plot is gonna also show the relationship between one variable and other variables. It's gonna be implemented a function to help us plot using different variables"", '# In[30]:', '# Plots the disribution of a variable colored by value of the target', '    # Calculate the correlation coefficient between the new variable and the target', '    # Calculate medians for repaid vs not repaid', '    # Plot the distribution for target == 0 and target == 1', '    # label the plot', '    # print out the correlation', '    # Print out average values', ""# **Now, let's plot the KDE correlation of each of the columns I used before and see what the KDE plot show us **"", '# In[31]:', '# #### I am repeating the KDE graphs for the other columns to a base for comparison', '# ##### Unfortunately, tho, our new feature is not really helpful...', '# ', '# * gonna continue with feature engineering', '# ***', '# * Creating a funtion that gets a dataframe, column name and dataframe name, groups by the column name and aggregate using mean, count,min, max and sum.', '# In[32]:', '    # Remove id variables other than grouping variable', '    # Group by the specified variable and calculate the statistics', '    # Need to create new column names', '    # Iterate through the variables names', '        # Skip the grouping variable', '            # Iterate through the stat names', '                # Make a new column name for the variable and stat', '# In[33]:', '# In[34]:', ""# ** Now we have 61 new columns, that we're gonna merge to our training set **"", '# In[35]:', '# In[36]:', ""# ## that function is truly amazing to help us manage the numerical values of a given dataset, now, it's possible to create a very similar funtion using pd.getdummies and peform on categorical features."", '# In[37]:', '    # Select the categorical columns', '    # Make sure to put the identifying id on the column', '    # Groupby the group var and calculate the sum and mean', '    # Iterate through the columns in level 0', '        # Iterate through the stats in level 1', '            # Make a new column name', '# In[38]:', '# In[39]:', '# In[40]:', '# ** Great! Now we have processed the bureau dataframe and extracted information that might be useful for our models. We are gonna check correlation later **', '# ***', '# ### Now, with those functions is gonna be easy to process another dataframe, like the bureau balance', '# In[41]:', '# ### Previous application', '# In[42]:', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', ""# Counts of each type of status for each previous loan, it's a categorical feature"", '# In[47]:', '# Calculate value count statistics for each `SK_ID_CURR`', '# In[48]:', '# Dataframe grouped by the loan', '# Merge to include the SK_ID_CURR', '# Aggregate the stats for each client', '# In[49]:', '# In[50]:', '# In[51]:', '# Merge with the monthly information grouped by client', '# In[52]:', ""# ** We have increased the number of features quite significantly, it's advisable to clean up the memory, freeing up space, deleting objects that won't be used anymore, but before that, let's prepare our code for our models, creating dummies for both the training and testing set and align them**"", '# In[53]:', '# In[54]:', '# In[55]:', '# In[56]:', '# In[57]:', '# ### we have an expressive number of missing values, I am gonna use the function implemented before to drop all the columns with 73% or more of null values', '# In[58]:', '# In[59]:', ""# #### at least using pearson's correlation, it seems that some of the features that has been created has a positive (linear) correlation with our target."", '# In[60]:', '# In[61]:', '# ### The 3 most negativaly correlated features continue to be the 3 EXT source... some of the features create appears here as well..', ""# ### Dropping id columns and the target, as it's not gonna help our model"", '# ***', '# # Fitting our models...', ""# ## Notice that I am using only a small part of the dataset for models that won't give us a good score, to increase performance."", '# ', '# 1. Logistic Reression', '# In[62]:', '# Train on the training data', '# 2. Random Forest', '# In[63]:', '# Make the random forest classifier', '# 3. LGB model', '# In[64]:', '# In[65]:', '# In[66]:', '# In[67]:', '# In[68]:', '# In[69]:']",193
simple-exploration-pipeline-imputer-0-7.py,"['# coding: utf-8', '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[ ]:', 'import pandas as pd # package for high-performance, easy-to-use data structures and data analysis', 'import numpy as np # fundamental package for scientific computing with Python', 'import matplotlib.pyplot as plt # for plotting', 'import seaborn as sns # for making plots with seaborn', '# from plotly import tools', '# import plotly.tools as tls', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **********POS_group-by**', '# In[ ]:', '# In[ ]:', ""# pos_grp_by_2 = POS_CASH_balance.groupby('SK_ID_CURR')['NAME_CONTRACT_STATUS'].max()"", '# pos_grp_by_2 = pos_grp_by_2.reset_index()', '# pos_grp_by_2.head(2)', '# pos_grp_by_1.head(2)', '# print (pos_grp_by_1.shape)', '# print (pos_grp_by_2.shape)', ""# pos_final_df = pos_grp_by_1.merge(pos_grp_by_2,on='SK_ID_CURR')"", '# print (pos_final_df.shape) ########## 1 data yet to join with credit data ', '# pos_final_df.head(2)', ""# data_2 = pos_final_df.merge(previous_application,on='SK_ID_CURR')"", ""# data_1 = data_2.merge(application_train,on='SK_ID_CURR')"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **CATEGORICAL SEGREGATION**', '# In[ ]:', '# **NUMERICAL SEGREGATION**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **CHECKING FOR MISSING VALUES **', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# separate dataset into train and test', '# > **2 WAYS- (1) WITH ALL FEATURES  (2)SELECT FEATURES BASED ON ROC-AUC **', '# **> *1)WITH ALL FEATURES *******', '# Creating a PipeLine ', '# In[ ]:', '# Create a boolean mask for categorical columns', '# In[ ]:', '# In[ ]:', '# Apply categorical imputer( it will effect all categorocal columns)', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **Before going to put everything into Pipeline - Do LabelEncoding to categorical vars ', '# **', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# **Now do Select Features based on ROC-AUC **', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Now check the Cross-validation Score ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Perform RandomizedSearchCV', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",117
simple-features.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', ' #  n_estimators=1327, n_jobs=-1, num_leaves=106, objective=None,random_state=None, reg_alpha=0.5129992714397862, reg_lambda=0.38268769901820565, silent=True, subsample=0.7177561548329953, subsample_for_bin=80000,', '  #     subsample_freq=0, verbose=1)', '# In[7]:', '# In[8]:', '# Save the submission dataframe']",12
simple-home-default-credit-lb-score-0-789.py,"['# coding: utf-8', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# Create an anomalous flag column', '# Replace the anomalous values with nan', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Align train and test', '# Align the training and testing data, keep only columns present in both dataframes', '# Add the target back in', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Make a new dataframe for polynomial features', '# imputer for handling missing values', '# Need to impute missing values', '# Create the polynomial object with specified degree', '# In[ ]:', '# Train the polynomial features', '# Transform the features', '# In[ ]:', '# In[ ]:', '# Create a dataframe of the features ', '# Add in the target', '# Find the correlations with the target', '# Display most negative and most positive', '# In[ ]:', '# Put test features into dataframe', '# Merge polynomial features into training dataframe', '# Merge polnomial features into testing dataframe', '# Align the dataframes', '# Print out the new shapes', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# check and remove constant columns', '# remove constant columns in the training set', '# remove constant columns in the test set', '# In[ ]:', '# In[ ]:', '# create temp DF', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', ' #   np.random.permutation(app_train_domain.index))', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '    # Extract the ids', '    # Extract the labels for training', '    # Remove the ids and target', '    # One Hot Encoding', '        # Align the dataframes by the columns', '        # No categorical indices to record', '    # Integer label encoding', '        # Create a label encoder', '        # List for storing categorical indices', '        # Iterate through each column', '                # Map the categorical features to integers', '                # Record the categorical indices', '    # Catch error if label encoding scheme is not valid', '    # Extract feature names', '    # Convert to np arrays', '    # Create the kfold object', '    # Empty array for feature importances', '    # Empty array for test predictions', '    # Empty array for out of fold validation predictions', '    # Lists for recording validation and training scores', '    # Iterate through each fold', '        # Training data for the fold', '        # Validation data for the fold', '        # Create the model', '        # Train the model', '        # Record the best iteration', '        # Record the feature importances', '        # Make predictions', '        # Record the out of fold predictions', '        # Record the best score', '        # Clean up memory', '    # Make the submission dataframe', '    # Make the feature importance dataframe', '    # Overall validation score', '    # Add the overall scores to the metrics', '    # Needed for creating dataframe of validation scores', '    # Dataframe of validation scores', '# In[ ]:', '# In[ ]:', '    # Sort features according to importance', '    # Normalize the feature importances to add up to one', '    # Make a horizontal bar chart of feature importances', '    # Need to reverse the index to plot most important on top', '    # Set the yticks and labels', '    # Plot labeling', '# In[ ]:', '# In[ ]:', '# In[ ]:']",112
simple-lightgbm.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# In[2]:', '# ãƒˆãƒ¬ãƒ¼ãƒ‹ãƒ³ã‚°ãƒ‡ãƒ¼ã‚¿ã¨ãƒ†ã‚¹ãƒˆãƒ‡ãƒ¼ã‚¿ã®èª\xadã¿è¾¼ã¿', '# In[3]:', '# åˆ—åã‚’è¡¨ç¤º', '# In[4]:', '# åˆã‚ã®5è¡Œã‚’è¡¨ç¤º', '# In[5]:', '# å„åˆ—ã®ãƒ‡ãƒ¼ã‚¿ã®åž‹ã‚’è¡¨ç¤º', '# In[6]:', '# targetã®0ã¨1ã‚’ã‚«ã‚¦ãƒ³ãƒˆ', '# In[7]:', '# EXTãŒå«ã¾ã‚Œã‚‹trainã®åˆ—ã‚’ãƒªã‚¹ãƒˆã§è¡¨ç¤º', '# In[8]:', '# yã¯trainã®TARGETåˆ—', '# trainã¨testã®3åˆ—ã\xa0ã‘ã‚’æŠ½å‡º', '# In[9]:', '# trainã®åˆã‚ã®5è¡Œã‚’è¡¨ç¤º', '# testã®åˆã‚ã®5è¡Œã‚’è¡¨ç¤º', '# In[10]:', '# ãƒ©ã‚¤ãƒ–ãƒ©ãƒªã®import', '# In[11]:', '# trainã‚’0.8:0.2ã«åˆ†å‰²', '# In[12]:', '# ã‚¤ãƒ³ã‚¹ã‚¿ãƒ³ã‚¹åŒ–', '# å\xad¦ç¿’', '# X_testã‚’æŽ¨è«–', '# In[13]:', '# In[14]:', '# testãƒ‡ãƒ¼ã‚¿ã‚’æŽ¨è«–', '# ã‚µãƒ³ãƒ—ãƒ«ã‚µãƒ–ãƒŸãƒƒãƒˆãƒ•ã‚¡ã‚¤ãƒ«ã®èª\xadã¿è¾¼ã¿', '# ã‚µãƒ³ãƒ—ãƒ«ã‚µãƒ–ãƒŸãƒƒãƒˆãƒ•ã‚¡ã‚¤ãƒ«ã®TARGETã‚’targetã«ã™ã‚‹', '# In[15]:', '# In[16]:', '# sample_submitã‚’simple_light_gbm.csvã¨ã—ã¦æ›¸ãå‡ºã—', '# # å‚è€ƒ', '# * [ï¼œå®Ÿè·µï¼žã¯ã˜ã‚ã¦ã®Kaggleä½“é¨“è¨˜ \\- kurupicalã®ãƒ–ãƒ\xadã‚°](http://kurupical.hatenablog.com/entry/2018/09/10/221420)', '# * [validationç\xad‰ã«ã¤ã„ã¦ã®ãƒ„ã‚¤ãƒ¼ãƒˆ](https://twitter.com/currypurin/status/1147841378040205314)', '# In[ ]:']",48
soumission-rc.py,"['# coding: utf-8', '# In[ ]:', 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# In[ ]:']",5
stacking_test_sklearn_xgboost_catboost_lightgbm.py,"[""# Stacking Starter based on Allstate Faron's Script"", '# Preprocessing from ogrellier', ""# print('%-55s | %7s | %10s | %10s | %10s' "", ""#       % ('FEATURES', 'TYPE', 'NB VALUES', 'NB NaNS', 'NaNs (%)'))"", '# for f_ in data: # .dtypes', '#     print(""%-55s | %7s | %10s | %10s |    %5.2f""', '#           % (f_, str(data[f_].dtype), ', '#              str(len(data[f_].value_counts(dropna=False))), ', '#              str(data[f_].isnull().sum()),', '#              100 * data[f_].isnull().sum() / data.shape[0]', '#             )', '#          )', ""# PLEASE DON'T DO THIS AT HOME LOL"", '# Averaging factorized categorical features defeats my own reasoning']",14
target-variables.py,"['# coding: utf-8', '# In[1]:', '# In[2]:', '# HomeCredit_columns_description = pd.read_csv(""../input/home-credit-default-risk/HomeCredit_columns_description.csv"")', '# In[3]:', '# In[4]:', '# In[5]:', '# - secondary', '# ä¸\xadç\xad‰æ•™è‚²', '# - higher education', '# é«˜ç\xad‰æ•™è‚²', '# - incomplete higher', '# é«˜æ\xa0¡ä¸\xadé€€ï¼ˆï¼Ÿï¼Ÿï¼Ÿï¼‰', '# - lower secondary', '# ä¸\xadå\xad¦æ\xa0¡', '# - academic degree', '# å\xad¦ä½', '# In[6]:', '# In[7]:', '# In[8]:', '# - working', '# åŠ´åƒè€…', '# - State servant', '# å…¬å‹™å“¡', '# - Commercial associate', '# å•†äºº', '# - Pensioner', '# å¹´é‡‘å—çµ¦è€…', '# - unemployed', '# å¤±æ¥\xadè€…', '# - student', '# å\xad¦ç”Ÿ', '# - Businessman', '# ãƒ“ã‚¸ãƒã‚¹ãƒžãƒ³', '# - Maternity leave', '# è‚²å…ä¼‘æ¥\xadä¸\xad', '# In[9]:', '# In[10]:', '# In[11]:', '# In[12]:', '# In[13]:', '# In[14]:', '# In[15]:', '# å¤–ã‚Œå€¤ãŒã™ã”ã„ã®ã§logã¨ã‚‹', '# take the logarithm because the graph above is affected by outliers', '# In[16]:', '# ä¸Šã®ã‚„ã¤ã§ã‚‚ã€å¤–ã‚Œå€¤ã®å½±éŸ¿ã‚ã‚‹ã®ã§ã€rangeã§è¡¨ç¤ºç¯„å›²ã‚’ç‹\xadã‚ã‚‹', '# In[17]:', '# In[18]:', '# In[19]:', 'y_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration', 'y_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration', '# Feature Importance', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# X = X.fillna(X.mean())', 'y_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration', 'y_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration', '# Feature Importance', '# In[24]:', '# X = X.fillna(X.mean())', 'y_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration', 'y_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration', '# Feature Importance', '# In[25]:', '# In[26]:', '# X = X.fillna(X.mean())', 'y_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration', 'y_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration', '# Feature Importance', '# In[27]:', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[ ]:']",80
thank-you (1).py,"['# coding: utf-8', ""# **Thank you everyone for showing your appreciation and support. It's my first gold medal in kernels and I hope to publish far better kernels than this in near future.**"", '# In[ ]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# ## Blend with one rank weighted submission [0.8 LB]', '# In[ ]:', '# In[ ]:', '# Function for merging dataframes efficiently ', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Diversified blend [0.799 LB]', '# ', '# ', '# **The blending ingredients are taken from three different type of models.**', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Blending lowest correlated models', '# In[ ]:', 'print(Corr_Mat) # Correlation matrix of five submission files', '# In[ ]:', '# In[ ]:', '# ', '# In[ ]:']",34
the-first-baseline.py,"['# coding: utf-8', '# In[1]:', '# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load"", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the read-only ""../input/"" directory', '# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory', '# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using ""Save & Run All"" ', ""# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"", '# In[2]:', '# In[3]:', '# In[4]:', '# In[5]:', '# In[6]:', '# In[7]:', '# In[8]:', '# ### 1.Data preprocessing', '# 1.1 Numerique columns', '# In[9]:', '# In[10]:', '# In[11]:', '# Put the negative values to positive', '# In[12]:', '# Outliers', '# In[13]:', '# In[14]:', '# In[15]:', '# In[16]:', '# In[17]:', '# In[18]:', '# In[19]:', '# In[20]:', '# In[21]:', '# In[22]:', '# In[23]:', '# In[24]:', '# In[25]:', '# In[26]:', '# In[27]:', '# 1.2 Object columns', '# In[28]:', '# In[29]:', '# In[30]:', '# In[31]:', '# In[32]:', '# In[33]:', '# In[34]:', '# In[35]:', '# In[36]:', '# In[37]:', '# In[38]:', '# In[39]:', '# In[40]:', '# In[41]:', '# In[42]:', '# simple_impute ', '# In[43]:', '# In[44]:', '# In[45]:', '# In[46]:', '# ### 3.Model', '# In[47]:', '# In[48]:', '# 3.1 Rdf', '# In[49]:', '# In[50]:', '# In[51]:', '# In[52]:', '# In[53]:', '# In[54]:', '# In[55]:']",73
the-model-3.py,"['# coding: utf-8', '# - Still Working on this notebook :-)', '# ', '# -[Reference](https://www.kaggle.com/dromosys/fork-of-fork-lightgbm-with-simple-features-cee847)', '# In[ ]:', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# LightGBM GBDT with KFold or Stratified KFold', '# Parameters from Tilii kernel: https://www.kaggle.com/tilii7/olivier-lightgbm-parameters-by-bayesian-opt/code', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        # LightGBM parameters found by Bayesian optimization', '    # Write submission file and plot feature importance', '# Display/plot feature importance', '# In[ ]:', '# In[ ]:']",46
tidy_xgb_all_tables_0_796.R,[],0
ultimate-guide.py,"['# coding: utf-8', '# # Home Credit Default Prediction Models', '# ### About Home Credit', '# Home Credit is a non-banking financial institution, founded in 1997 in the Czech Republic. ', '# * The company operates in 14 countries (including United States, Russia, Kazahstan, Belarus, China, India) and focuses on lending primarily to people with little or no credit history which will either not obtain loans or became victims of untrustworthly lenders. Home Credit group has over 29 million customers, total assests of 21 billions Euro, over 160 millions loans.', ""# * It uses of a variety of alternative data - including telco and transactional information - to predict their clients' repayment abilities."", '# ## 0. Setup', '# In[ ]:', ""plt.style.use('ggplot') # overall 'ggplot' style"", '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## 1. Some more EDA', '# #### Unbalanced Classes', '# In[ ]:', '# #### Income', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# Missings', '# ## 2. Feature Engineering', '# In[ ]:', '# ## Borrower characteristics', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# ## Employment', '# In[ ]:', '# In[ ]:', '# In[ ]:', ""# application_train[['OCCUPATION_TYPE', 'NAME_EDUCATION_TYPE', 'SK_ID_CURR']].groupby(['NAME_EDUCATION_TYPE', 'OCCUPATION_TYPE']).count()"", '# In[ ]:', '# In[ ]:', '# ## Assets', '# In[ ]:', '# In[ ]:', '# ## Credit', '# In[ ]:', '# In[ ]:', '    i[""AMT_CREDIT_LOG""] = np.log(i[""AMT_CREDIT""]) # this is the amount of the loan', '    i[""AMT_GOODS_PRICE_LOG""] =np.log(i[\'AMT_GOODS_PRICE\']) # FOR CONS LOANS-- half million usd???', '# In[ ]:', ""# application_train['DOCS']"", '# In[ ]:', '# In[ ]:', '# ## 3. Modeling', '# ### Logistic Regression', '# In[ ]:', '# In[ ]:', '# for i in sorted(application_train.columns):', '#     print(i)', '# #### Train', '# In[ ]:', '# In[ ]:', '# #### Test', '# In[ ]:', '# In[ ]:', '# ### Logistic', '# In[ ]:', '# transform the test & train data', '# In[ ]:', '# In[ ]:', '# classification_report(y_train,p)', '# In[ ]:', '# In[ ]:', '# ## 4. Submission ', '# In[ ]:', '# In[ ]:', '# In[ ]:']",70
v0-only-main-dataset.py,"['# coding: utf-8', '# In[ ]:', '# %load /home/felipe/firstcell.py', '# In[ ]:', '# In[ ]:', '# one row = one loan', '# In[ ]:', '# In[ ]:', '# one row = one loan', '# ### merge names in both train+test sets for all categorical variables', '# ## v0 just using the stuff on the main table', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# take the second column because the classifier outputs scores for', '# the 0 class as well', '# fpr means false-positive-rate', '# tpr means true-positive-rate', ""# it's helpful to add a diagonal to indicate where chance "", '# scores lie (i.e. just flipping a coin)', '# ### final train', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",32
v1-main-dataset-and-bureau-only.py,"['# coding: utf-8', '# In[ ]:', '# %load /home/felipe/firstcell.py', '# ### common utils', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# one row = one loan', '# In[ ]:', '# In[ ]:', '# one row = one loan', '# In[ ]:', '# ### merge names in both train+test sets for all categorical variables', ""# only need to do this for the main dataset because it's split in train and test"", '# In[ ]:', '# In[ ]:', '# ### start to work', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# num_cols = 3', '# num_rows = math.ceil(len(ParameterGrid(param_grid)) / num_cols)', '# # create a single figure', '# plt.clf()', '# fig,axes = plt.subplots(num_rows,num_cols,sharey=True)', '# fig.set_size_inches(num_cols*5,num_rows*5)', '# for i,g in tqdm(enumerate(ParameterGrid(param_grid))):', '#     clf = XGBClassifier()', '#     clf.set_params(**g)', '#     clf.fit(X_train,y_train)', '#     y_preds = clf.predict_proba(X_test)', '#     # take the second column because the classifier outputs scores for', '#     # the 0 class as well', '#     preds = y_preds[:,1]', '#     # fpr means false-positive-rate', '#     # tpr means true-positive-rate', '#     fpr, tpr, _ = metrics.roc_curve(y_test, preds)', '#     auc_score = metrics.auc(fpr, tpr)', '#     ax = axes[i // num_cols, i % num_cols]', ""#     # don't print the whole name or it won't fit"", '#     ax.set_title(str([r""{}:{}"".format(k.split(\'__\')[1:],v) for k,v in g.items()]),fontsize=9)', ""#     ax.plot(fpr, tpr, label='AUC = {:.3f}'.format(auc_score))"", ""#     ax.legend(loc='lower right')"", ""#     # it's helpful to add a diagonal to indicate where chance "", '#     # scores lie (i.e. just flipping a coin)', ""#     ax.plot([0,1],[0,1],'r--')"", '#     ax.set_xlim([-0.1,1.1])', '#     ax.set_ylim([-0.1,1.1])', ""#     ax.set_ylabel('True Positive Rate')"", ""#     ax.set_xlabel('False Positive Rate')"", '# plt.gcf().tight_layout()', '# plt.show()', '# ### final train', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:', '# In[ ]:']",72
xgb_lgbm_vote.py,"['# This Python 3 environment comes with many helpful analytics libraries installed', '# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python', ""# For example, here's several helpful packages to load in "", 'import numpy as np # linear algebra', 'import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)', '# Input data files are available in the ""../input/"" directory.', '# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory', '# Any results you write to the current directory are saved as output.', '# -*- coding: utf-8 -*-', '#', '#', '#                              indices=True)', '#                                 n_estimators=10000,', ""#                                boosting_type='dart',"", ""##        # criterion = 'gini' 'entropy'"", ""#        'gradboost':GradientBoostingClassifier(random_state=111,n_estimators=200, "", '#                                               learning_rate=0.1,', '#                                               max_depth =3)', ""#        'forest':RandomForestClassifier(n_estimators = 200, criterion = 'gini', "", '#                                        random_state = 100, n_jobs=-1)', '    #    for train_index, test_index in skf.split(df_train.index, y_target):', '#del a, b, c # dfs still in list', 'del lst     # memory release now']",23
xgb_simple_features.py,"['# Forked from excellent kernel : https://www.kaggle.com/jsaguiar/updated-0-792-lb-lightgbm-with-simple-features', '# From Kaggler : https://www.kaggle.com/jsaguiar', '# Just added a few features so I thought I had to make release it as well...', '# One-hot encoding for categorical columns with get_dummies', '# Preprocess application_train.csv and application_test.csv', '    # Read data and merge', '    # Optional: Remove 4 applications with XNA CODE_GENDER (train set)', '    # NaN values for DAYS_EMPLOYED: 365.243 -> nan', '    # Categorical features with Binary encode (0 or 1; two categories)', '    # Categorical features with One-Hot encode', '    # Some simple new features (percentages)', ""    # df['DAYS_EMPLOYED_PERC'] = df['DAYS_EMPLOYED'] / df['DAYS_BIRTH']"", ""    # df['INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] / df['AMT_CREDIT']"", ""    # df['INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] / df['CNT_FAM_MEMBERS']"", ""    # df['ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] / df['AMT_INCOME_TOTAL']"", ""    # df['PAYMENT_RATE'] = df['AMT_ANNUITY'] / df['AMT_CREDIT']"", '# Preprocess bureau.csv and bureau_balance.csv', '    # Bureau balance: Perform aggregations and merge with bureau.csv', '    # Bureau and bureau_balance numeric features', '    # Bureau and bureau_balance categorical features', '    # Bureau: Active credits - using only numerical aggregations', '    # Bureau: Closed credits - using only numerical aggregations', '# Preprocess previous_applications.csv', '    # Days 365.243 values -> nan', '    # Add feature: value ask / value received percentage', '    # Previous applications numeric features', '    # Previous applications categorical features', '    # Previous Applications: Approved Applications - only numerical features', '    # Previous Applications: Refused Applications - only numerical features', '# Preprocess POS_CASH_balance.csv', '    # Features', '    # Count pos cash accounts', '# Preprocess installments_payments.csv', '    # Percentage and difference paid in each installment (amount paid and installment value)', '    # Days past due and days before due (no negative values)', '    # Features: Perform aggregations', '    # Count installments accounts', '# Preprocess credit_card_balance.csv', '    # General aggregations', '    # Count credit card lines', '# XGB GBDT with KFold or Stratified KFold', '    # Divide in training/validation and test data', '    # Cross validation model', '    # Create arrays and dataframes to store results', '        if n_fold == 0: # REmove for full K-fold run', '            sub_preds += clf.predict_proba(test_df[feats])[:, 1] # / folds.n_splits # - Uncomment for K-fold ', '            # feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)', ""    # print('Full AUC score %.6f' % roc_auc_score(train_df['TARGET'], oof_preds))"", '    # Write submission file and plot feature importance', '# Display/plot feature importance']",50
